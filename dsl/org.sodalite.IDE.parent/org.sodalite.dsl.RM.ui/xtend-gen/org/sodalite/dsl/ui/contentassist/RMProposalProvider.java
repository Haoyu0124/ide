/**
 * generated by Xtext 2.17.1
 */
package org.sodalite.dsl.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.sodalite.dsl.ui.contentassist.AbstractRMProposalProvider;

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
@SuppressWarnings("all")
public class RMProposalProvider extends AbstractRMProposalProvider {
  public enum Boolean {
    True,
    
    False;
  }
  
  private final String SELF_DESCRIPTION = ("A TOSCA orchestrator will interpret this keyword as the Node or Relationship\n" + 
    "Template instance that contains the function at the time the function is evaluated");
  
  private final String SOURCE_DESCRIPTION = ("A TOSCA orchestrator will interpret this keyword as the Node Template instance that\n" + 
    "is at the source end of the relationship that contains the referencing function.");
  
  private final String TARGET_DESCRIPTION = ("A TOSCA orchestratorwill interpret this keyword as the Node Template instance that is\n" + 
    "at the target end of the relationship that contains the referencing function");
  
  private final String HOST_DESCRIPTION = ("A TOSCA orchestrator will interpret this keyword to refer\n" + 
    "to the all nodes that “host”the node using this reference (i.e., as identified by its HostedOn relationship).");
  
  @Override
  public void completeKeyword(final Keyword keyword, final ContentAssistContext contentAssistContext, final ICompletionProposalAcceptor acceptor) {
    this._completeKeyword(keyword, contentAssistContext, acceptor);
  }
  
  public void _completeKeyword(final Keyword keyword, final ContentAssistContext contentAssistContext, final ICompletionProposalAcceptor acceptor) {
    final ICompletionProposal proposal = this.createCompletionProposal(keyword.getValue(), 
      this.getKeywordDisplayString(keyword), this.getImage(keyword), contentAssistContext);
    this.getPriorityHelper().adjustKeywordPriority(proposal, contentAssistContext.getPrefix());
    acceptor.accept(proposal);
  }
  
  @Override
  public void completeENodeType_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("Invoking content assist for ENodeType::name property");
    final String proposalText = "tosca.types.id";
    final String displayText = "tosca.types.id";
    final String additionalProposalInfo = "The required id of the node type";
    this.createEditableCompletionProposal(proposalText, displayText, context, additionalProposalInfo, acceptor);
  }
  
  @Override
  public void completeEDataType_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("Invoking content assist for EDataType::name property");
    final String proposalText = "tosca.datatypes.id";
    final String displayText = "tosca.datatypes.id";
    final String additionalProposalInfo = "The required id of the data type";
    this.createEditableCompletionProposal(proposalText, displayText, context, additionalProposalInfo, acceptor);
  }
  
  @Override
  public void completeEArtifactType_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("Invoking content assist for EArtifactType::name property");
    final String proposalText = "tosca.artifacts.id";
    final String displayText = "tosca.artifacts.id";
    final String additionalProposalInfo = "The required id of the artifact type";
    this.createEditableCompletionProposal(proposalText, displayText, context, additionalProposalInfo, acceptor);
  }
  
  @Override
  public void completeECapabilityType_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("Invoking content assist for ECapabilityType::name property");
    final String proposalText = "tosca.capabilities.id";
    final String displayText = "tosca.capabilities.id";
    final String additionalProposalInfo = "The required id of the capability type";
    this.createEditableCompletionProposal(proposalText, displayText, context, additionalProposalInfo, acceptor);
  }
  
  @Override
  public void completeEInterfaceType_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("Invoking content assist for EInterfaceType::name property");
    final String proposalText = "tosca.interfaces.id";
    final String displayText = "tosca.interfaces.id";
    final String additionalProposalInfo = "The required id of the interface type";
    this.createEditableCompletionProposal(proposalText, displayText, context, additionalProposalInfo, acceptor);
  }
  
  @Override
  public void completeERelationshipType_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("Invoking content assist for ERelationshipType::name property");
    final String proposalText = "tosca.relationships.id";
    final String displayText = "tosca.relationships.id";
    final String additionalProposalInfo = "The required id of the relationship type";
    this.createEditableCompletionProposal(proposalText, displayText, context, additionalProposalInfo, acceptor);
  }
  
  @Override
  public void completeEPolicyType_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("Invoking content assist for EPolicyType::name property");
    final String proposalText = "tosca.policies.id";
    final String displayText = "tosca.policies.id";
    final String additionalProposalInfo = "The required id of the policy type";
    this.createEditableCompletionProposal(proposalText, displayText, context, additionalProposalInfo, acceptor);
  }
  
  @Override
  public void completeEPropertyDefinition_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("Invoking content assist for EPropertyDefinition::name property");
    final String proposalText = "property_name";
    final String displayText = "property_name";
    final String additionalProposalInfo = "The required id of the property definition";
    this.createEditableCompletionProposal(proposalText, displayText, context, additionalProposalInfo, acceptor);
  }
  
  @Override
  public void completeEAttributeDefinition_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("Invoking content assist for EAttributeDefinition::name property");
    final String proposalText = "attribute_name";
    final String displayText = "attribute_name";
    final String additionalProposalInfo = "The required id of the attribute definition";
    this.createEditableCompletionProposal(proposalText, displayText, context, additionalProposalInfo, acceptor);
  }
  
  @Override
  public void completeEInterfaceDefinition_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("Invoking content assist for EInterfaceDefinition::name property");
    final String proposalText = "interface_name";
    final String displayText = "interface_name";
    final String additionalProposalInfo = "The required id of the interface definition";
    this.createEditableCompletionProposal(proposalText, displayText, context, additionalProposalInfo, acceptor);
  }
  
  @Override
  public void completeEOperationDefinition_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("Invoking content assist for EOperationDefinition::name property");
    final String proposalText = "operation_name";
    final String displayText = "operation_name";
    final String additionalProposalInfo = "The required id of the operation definition";
    this.createEditableCompletionProposal(proposalText, displayText, context, additionalProposalInfo, acceptor);
  }
  
  @Override
  public void completeEParameterDefinition_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("Invoking content assist for EParameterDefinition::name property");
    final String proposalText = "parameter_name";
    final String displayText = "parameter_name";
    final String additionalProposalInfo = "The required id of the parameter definition";
    this.createEditableCompletionProposal(proposalText, displayText, context, additionalProposalInfo, acceptor);
  }
  
  @Override
  public void completeECapabilityDefinition_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("Invoking content assist for ECapabilityDefinition::name property");
    final String proposalText = "capability_name";
    final String displayText = "capability_name";
    final String additionalProposalInfo = "The required id of the capability definition";
    this.createEditableCompletionProposal(proposalText, displayText, context, additionalProposalInfo, acceptor);
  }
  
  @Override
  public void completeERequirementDefinition_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("Invoking content assist for ERequirementDefinition::name property");
    final String proposalText = "requirement_name";
    final String displayText = "requirement_name";
    final String additionalProposalInfo = "The required id of the requirement definition";
    this.createEditableCompletionProposal(proposalText, displayText, context, additionalProposalInfo, acceptor);
  }
  
  @Override
  public void completeEPropertyDefinitionBody_Required(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("Invoking content assist for EPropertyDefinitionBody::required property");
    this.createNonEditableCompletionProposal("true", "true", context, "", acceptor);
    this.createNonEditableCompletionProposal("false", "false", context, "", acceptor);
  }
  
  @Override
  public void completeGetAttributeBody_Entity(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("Invoking content assist for GetAttributeBody::entity property");
    this.createEntityProposals(context, acceptor);
  }
  
  @Override
  public void completeGetPropertyBody_Entity(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("Invoking content assist for GetPropertyBody::entity property");
    this.createEntityProposals(context, acceptor);
  }
  
  @Override
  public void completeEMapEntry_Key(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("Invoking content assist for EMapEntry::key property");
    this.createEditableCompletionProposal("map_key_name", "map_key_name", context, "Key name for map entry", acceptor);
  }
  
  @Override
  public void completeELIST_List(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("Invoking content assist for ELIST::list property");
    this.createEditableCompletionProposal("\"value\"", "\"value\"", context, "Give a single String value or a comma separate list of String values", acceptor);
  }
  
  @Override
  public void complete_EMAP(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("Invoking content assist for EMAP::map property");
    this.createEditableCompletionProposal("{", "{", context, "Start a Map of key=value entries", acceptor);
  }
  
  protected void createEntityProposals(final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.createNonEditableCompletionProposal("SELF", "SELF", context, this.SELF_DESCRIPTION, acceptor);
    this.createNonEditableCompletionProposal("SOURCE", "SOURCE", context, this.SOURCE_DESCRIPTION, acceptor);
    this.createNonEditableCompletionProposal("TARGET", "TARGET", context, this.TARGET_DESCRIPTION, acceptor);
    this.createNonEditableCompletionProposal("HOST", "HOST", context, this.HOST_DESCRIPTION, acceptor);
  }
  
  protected void createNonEditableCompletionProposal(final String proposalText, final String displayText, final ContentAssistContext context, final String additionalProposalInfo, final ICompletionProposalAcceptor acceptor) {
    ICompletionProposal proposal = this.createCompletionProposal(proposalText, displayText, null, context);
    if ((proposal instanceof ConfigurableCompletionProposal)) {
      final ConfigurableCompletionProposal configurable = ((ConfigurableCompletionProposal) proposal);
      configurable.setAdditionalProposalInfo(additionalProposalInfo);
      configurable.setAutoInsertable(false);
    }
    acceptor.accept(proposal);
  }
  
  protected void createEditableCompletionProposal(final String proposalText, final String displayText, final ContentAssistContext context, final String additionalProposalInfo, final ICompletionProposalAcceptor acceptor) {
    ICompletionProposal proposal = this.createCompletionProposal(proposalText, displayText, null, context);
    if ((proposal instanceof ConfigurableCompletionProposal)) {
      final ConfigurableCompletionProposal configurable = ((ConfigurableCompletionProposal) proposal);
      configurable.setSelectionStart(configurable.getReplacementOffset());
      configurable.setSelectionLength(proposalText.length());
      configurable.setAutoInsertable(false);
      configurable.setSimpleLinkedMode(context.getViewer(), '\t', ' ');
      configurable.setAdditionalProposalInfo(additionalProposalInfo);
    }
    acceptor.accept(proposal);
  }
}
