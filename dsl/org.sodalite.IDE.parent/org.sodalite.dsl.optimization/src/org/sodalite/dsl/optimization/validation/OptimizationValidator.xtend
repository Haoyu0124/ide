/*
 * generated by Xtext 2.19.0
 */
package org.sodalite.dsl.optimization.validation

import org.eclipse.xtext.validation.Check
import org.sodalite.dsl.optimization.optimization.EOptimization
import org.sodalite.dsl.optimization.optimization.OptimizationPackage
import org.sodalite.dsl.optimization.optimization.EAITrainingCase
import org.sodalite.dsl.optimization.optimization.EHPCCase
import org.sodalite.dsl.optimization.optimization.EAITraining
import org.sodalite.dsl.optimization.optimization.EPyTorchCase
import org.sodalite.dsl.optimization.optimization.ETensorFlowCase
import org.sodalite.dsl.optimization.optimization.EKerasCase
import org.sodalite.dsl.optimization.optimization.EAITrainingConfig
import org.sodalite.dsl.optimization.optimization.EHPCConfig
import org.sodalite.dsl.optimization.optimization.EHPC
import org.sodalite.dsl.optimization.optimization.EMPICase
import org.sodalite.dsl.optimization.optimization.EOPENMPCase
import org.sodalite.dsl.optimization.optimization.EOPENACCCase
import org.sodalite.dsl.optimization.optimization.EOPENCLCase

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class OptimizationValidator extends AbstractOptimizationValidator {
	
	public static val MANDATORY_ELEMENT = 'MandatoryElement'

	@Check
	def checkOptimizationMandatoryElement(EOptimization opt) {
		if (opt.enable_opt_build && opt.opt_build === null) {
			error('opt_build property should be present if enable_opt_build is true', 
					OptimizationPackage.Literals.EOPTIMIZATION__ENABLE_OPT_BUILD,
					MANDATORY_ELEMENT)
		}
		if (!opt.enable_opt_build && opt.opt_build !== null) {
			error('An opt_build property is present but enable_opt_build is false', 
					OptimizationPackage.Literals.EOPTIMIZATION__ENABLE_OPT_BUILD,
					MANDATORY_ELEMENT)
		}
		if (opt.enable_autotuning && opt.autotuning === null) {
			error('autotuning property should be present if enable_autotuning is true', 
					OptimizationPackage.Literals.EOPTIMIZATION__ENABLE_AUTOTUNING,
					MANDATORY_ELEMENT)
		}
		if (!opt.enable_autotuning && opt.autotuning !== null) {
			error('An autotuning property is present but enable_autotuning is false', 
					OptimizationPackage.Literals.EOPTIMIZATION__ENABLE_AUTOTUNING,
					MANDATORY_ELEMENT)
		}
		if (opt.app_type == "AI_Training" && !(opt.app_optimization instanceof EAITrainingCase)) {
			error('A ai_training property should be present if app_type is AI_Training', 
					OptimizationPackage.Literals.EOPTIMIZATION__APP_TYPE,
					MANDATORY_ELEMENT)
			error('This property is not compatible with selected app_type', 
					OptimizationPackage.Literals.EOPTIMIZATION__APP_OPTIMIZATION,
					MANDATORY_ELEMENT)
		}
		if (opt.app_type == "HPC" && !(opt.app_optimization instanceof EHPCCase)) {
			error('Ah hpc property should be present if app_type is HPC', 
					OptimizationPackage.Literals.EOPTIMIZATION__APP_TYPE,
					MANDATORY_ELEMENT)
			error('This property is not compatible with selected app_type', 
					OptimizationPackage.Literals.EOPTIMIZATION__APP_OPTIMIZATION,
					MANDATORY_ELEMENT)
		}
	}
	
	@Check
	def checkAITrainingConfigMandatoryElement(EAITrainingConfig conf) {
		val parent = conf.eContainer as EAITraining
		if (conf.ai_framework == "PyTorch" && !(parent.aitrainingcase instanceof EPyTorchCase)) {
			error('A pytorch property should be present if ai_framework is PyTorch', 
					OptimizationPackage.Literals.EAI_TRAINING_CONFIG__AI_FRAMEWORK,
					MANDATORY_ELEMENT)
		}
		if (conf.ai_framework == "TensorFlow" && !(parent.aitrainingcase instanceof ETensorFlowCase)) {
			error('A tensorflow property should be present if ai_framework is TensorFlow', 
					OptimizationPackage.Literals.EAI_TRAINING_CONFIG__AI_FRAMEWORK,
					MANDATORY_ELEMENT)
		}
		if (conf.ai_framework == "Keras" && !(parent.aitrainingcase instanceof EKerasCase)) {
			error('A keras property should be present if ai_framework is Keras', 
					OptimizationPackage.Literals.EAI_TRAINING_CONFIG__AI_FRAMEWORK,
					MANDATORY_ELEMENT)
		}
	}
	
	@Check
	def checkAITrainingMandatoryElement(EAITraining ai_training) {
		if (ai_training.config.ai_framework == "PyTorch" && !(ai_training.aitrainingcase instanceof EPyTorchCase)) {
			error('This property is not compatible with selected app_type', 
					OptimizationPackage.Literals.EAI_TRAINING__AITRAININGCASE,
					MANDATORY_ELEMENT)
		}
		if (ai_training.config.ai_framework == "TensorFlow" && !(ai_training.aitrainingcase instanceof ETensorFlowCase)) {
			error('This property is not compatible with selected app_type', 
					OptimizationPackage.Literals.EAI_TRAINING__AITRAININGCASE,
					MANDATORY_ELEMENT)
		}
		if (ai_training.config.ai_framework == "Keras" && !(ai_training.aitrainingcase instanceof EKerasCase)) {
			error('This property is not compatible with selected app_type', 
					OptimizationPackage.Literals.EAI_TRAINING__AITRAININGCASE,
					MANDATORY_ELEMENT)
		}
	}
	
		@Check
	def checkHPCConfigMandatoryElement(EHPCConfig conf) {
		val parent = conf.eContainer as EHPC
		if (conf.parallelisation == "MPI" && !(parent.hpccase instanceof EMPICase)) {
			error('A mpi property should be present if ai_framework is MPI', 
					OptimizationPackage.Literals.EHPC_CONFIG__PARALLELISATION,
					MANDATORY_ELEMENT)
		}
		if (conf.parallelisation == "OPENMP" && !(parent.hpccase instanceof EOPENMPCase)) {
			error('A openmp property should be present if ai_framework is OPENMP', 
					OptimizationPackage.Literals.EHPC_CONFIG__PARALLELISATION,
					MANDATORY_ELEMENT)
		}
		if (conf.parallelisation == "OPENACC" && !(parent.hpccase instanceof EOPENACCCase)) {
			error('A openacc property should be present if ai_framework is OPENACC', 
					OptimizationPackage.Literals.EHPC_CONFIG__PARALLELISATION,
					MANDATORY_ELEMENT)
		}
		if (conf.parallelisation == "OPENCL" && !(parent.hpccase instanceof EOPENCLCase)) {
			error('A opencl property should be present if ai_framework is OPENCL', 
					OptimizationPackage.Literals.EHPC_CONFIG__PARALLELISATION,
					MANDATORY_ELEMENT)
		}
	}
	
	@Check
	def checkHPCMandatoryElement(EHPC hpc) {
		if (hpc.config.parallelisation == "MPI" && !(hpc.hpccase instanceof EMPICase)) {
			error('This property is not compatible with selected app_type', 
					OptimizationPackage.Literals.EHPC__HPCCASE,
					MANDATORY_ELEMENT)
		}
		if (hpc.config.parallelisation == "OPENMP" && !(hpc.hpccase instanceof EOPENMPCase)) {
			error('This property is not compatible with selected app_type', 
					OptimizationPackage.Literals.EHPC__HPCCASE,
					MANDATORY_ELEMENT)
		}
		if (hpc.config.parallelisation == "OPENACC" && !(hpc.hpccase instanceof EOPENACCCase)) {
			error('This property is not compatible with selected app_type', 
					OptimizationPackage.Literals.EHPC__HPCCASE,
					MANDATORY_ELEMENT)
		}
		if (hpc.config.parallelisation == "OPENCL" && !(hpc.hpccase instanceof EOPENCLCase)) {
			error('This property is not compatible with selected app_type', 
					OptimizationPackage.Literals.EHPC__HPCCASE,
					MANDATORY_ELEMENT)
		}
	}
	
}
