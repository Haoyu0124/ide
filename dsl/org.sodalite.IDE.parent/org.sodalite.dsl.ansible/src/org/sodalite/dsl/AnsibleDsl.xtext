grammar org.sodalite.sdl.ansible.AnsibleDsl with org.eclipse.xtext.common.Terminals

generate ansibleDsl "http://www.sodalite.org/dsl/AnsibleDsl"
import "http://www.sodalite.org/dsl/RM" as rm

Model:
	EPlaybook
;

EPlaybook:
	'playbook{'
		'playbook_name:' name=STRING
		('used_by{'
			'node_type:' node_type=[rm::ENodeType|STRING]
			'operation:' operation=[rm::EOperationDefinition|STRING]
		'}')?
		'plays{'
			('play{'
				plays+=EPlay
			'}')+
		'}'
	'}'
;

EBase:
	EPlay | EExecution
;

EExecution:
	EBlock | ETaskHandler | ERoleInclusion
;

EBlockTask:
	EBlock | ETask
;

ETaskHandler:
	ETask | EHandler
;

EBaseAttributes:
	(
	('privilage_escalation{'
		privilage_escalation=EPrivilageEscalation
	'}')? &
	('validation_mode{'
		validation_mode=EValidationMode
	'}')? &
	('connection_info{'
		connection=EConnection
	'}')? &
	('no_log:' no_log=EBooleanPassed)? &
	('debugger:' debugger= ('always' | 'never' | 'on_failed' | 'on_unreachable' | 'on_skipped'))? &
	('module_defaults:' module_defaults=EListPassed)? &
	('environment:' environment=EListPassed)? &
	('collections:' collections=EListPassed)? &
	('tags:' tags=EListPassed)? &
	('vars{'
		(variable_declarations+=EVariableDeclaration)+
	'}')?
	)
;

EExecutionAttributes:
	(
	('exe_settings{'
		exe_settings=EExecutionExeSettings
	'}')? &
	('delegation{'
		delegation=EDelegation
	'}')? &
	('when:' when_expression=EJinjaExpressionEvaluationWithoutBrackets)?
	)
;

ETaskHandlerAttributes:
	(
	('error_handling{'
		error_handling=ETaskHandlerErrorHandling
	'}')? &
	('action:' action=EJinjaExpressionAndString)? &
	('asynchronous_settings{'
		asynchronous_settings=EAsynchronousSettings
	'}')? &
	('args:' args=EDictionaryPassed)? &
	('module_call{'
		module=EModuleCall
	'}') &
	('notify:' (notifiables+=ENotifiable)+)? &
	('loop{'
		loop=ELoop
	'}')? &
	(register=ERegisterVariable)?
	)
;

EPlay:
	'play_name:' name=STRING
	('base_attributes{'
		base_attributes=EBaseAttributes
	'}')?
	('play_exe_settings{'
		play_exe_settings=EPlayExeSettings
	'}')? &
	('error_handling{'
		error_handling=EPlayErrorHandling
	'}')? &
	('facts_settings{'
		facts_settings=EFactsSettings
	'}')? &
	('vars_files:' vars_files=EListPassed)? &
	('vars_prompt:' vars_prompt=EListPassed)? &
	('force_handlers:' force_handlers=EBooleanPassed)? &
	('pre_tasks{'
		(pre_tasks_list+=EBlockTask)+
	'}')? &
	(roles_inclusions=ERoleInclusions)? &
	('tasks_list{'
		(tasks_list+=EBlockTask)+
	'}')? &
	('post_tasks{'
		(post_tasks_list+=EBlockTask)+
	'}')? &
	('handlers{'
		(handlers+=EHandler)+
	'}')?
;

EBlock:
	'block{'
		('block_name:' name=STRING)?
		('base_attributes{'
			base_attributes=EBaseAttributes
		'}')?
		('execution_attributes{'
			execution_attributes=EExecutionAttributes
		'}')?
		('error_handling{'
			error_handling=EBlockErrorHandling
		'}')?
		'tasks{'
			(tasks+=ETask)+
		'}'
		('rescue_tasks{'
			(rescue_tasks+=ETask)+
		'}')?
		('always_tasks{'
			(always_tasks+=ETask)+
		'}')?
	'}'
;

ETask:
	{ETask}
	'task{'
		('task_name:' name=STRING)?
		('base_attributes{'
			base_attributes=EBaseAttributes
		'}')?
		('execution_attributes{'
			execution_attributes=EExecutionAttributes
		'}')?
		('task_handler_attributes{'
			task_handler_attributes=ETaskHandlerAttributes
		'}')?
	'}'
;

EHandler:
	{EHandler}
	'handler{'
		('handler_name:' name=STRING)?
		('base_attributes{'
			base_attributes=EBaseAttributes
		'}')?
		('execution_attributes{'
			execution_attributes=EExecutionAttributes
		'}')?
		('task_handler_attributes{'
			task_handler_attributes=ETaskHandlerAttributes
		'}')?
		('listen:' (listen_to+=[ENotifiedTopic|STRING])+)?
	'}'
;

EModuleCall:
	'module_name:' name=ID
	('direct_parameter:' direct_parameter=EValuePassed)?
	('parameters{'
		(parameters+=EParameter)+
	'}')?
;

EParameter:
	name=ID ':' value_passed=EValuePassed
;

ERoleInclusion:
	'role{'
		'role_name:' name=STRING
		('base_attributes{'
			base_attributes=EBaseAttributes
		'}')?
		('execution_attributes{'
			execution_attributes=EExecutionAttributes
		'}')?
	'}'
;

ERoleInclusions:
	'roles_inclusions{'
		(roles+=ERoleInclusion)+
	'}'
;

ELoop:
	ELoopOverList | EUntil
;

ELoopOverList:
	'loop_over:' loop_list=EValuePassed
	('loop_control{'
		loop_control=ELoopControl
	'}')?
;

ELoopControl:
	(
	('label:' label=EValuePassed)? &
	('pause:' pause=ENumberPassed)? & //number of seconds
	('index_var:' index_var=EIndexOrLoopVariable)? &
	('loop_var:' loop_var=EIndexOrLoopVariable)? &
	('extended:' extended=EBooleanPassed)?
	)
;

EUntil:
	'until:' until=EJinjaExpressionEvaluationWithoutBrackets
	(
	('retries:' retries=ENumberPassed)? &
	('delay:' delay=ENumberPassed)? //number of seconds
	)
;

EPrivilageEscalation:
	(
	('become:' become=EBooleanPassed)? &
	('become_exe:' become_exe=EJinjaExpressionAndString)? &
	('become_flags:' become_flags=EJinjaExpressionAndString)? &
	('become_method:' become_method=EJinjaExpressionAndString)? &
	('become_user:' become_user=EJinjaExpressionAndString)?
	)
;

EValidationMode:
	(
	('check_mode:' check_mode=EBooleanPassed)? &
	('diff:' diff=EBooleanPassed)?
	)
;

EConnection:
	(
	('connection:' connection=EJinjaExpressionAndString)? &
	('port:' port=ENumberPassed)? &
	('remote_user:' remote_user=EJinjaExpressionAndString)?
	)
;

EExeSettings:
	EExecutionExeSettings | EPlayExeSettings
;

EPlayExeSettings:
	(
	('strategy:' strategy=EJinjaExpressionAndString)? &
	('serial:' serial_list=EListPassed)? &
	('order:' order=EJinjaExpressionAndString)? &
	('throttle:' throttle=ENumberPassed)? &
	('run_once:' run_once=EBooleanPassed)?
	)
;

EExecutionExeSettings:
	(
	('throttle:' throttle=ENumberPassed)? &
	('run_once:' run_once=EBooleanPassed)?
	)
;

EErrorHandling:
	EBlockErrorHandling | EPlayErrorHandling | ETaskHandlerErrorHandling
;

EBlockErrorHandling:
	(
	('any_errors_fatal:' any_errors_fatal=EBooleanPassed)? &
	('ignore_errors:' ignore_errors=EBooleanPassed)? &
	('ignore_unreachable:' ignore_unreachable=EBooleanPassed)?
	)
;

EPlayErrorHandling:
	(
	('max_fail_percentage:' max_fail_percentage=ENumberPassed)? &
	('any_errors_fatal:' any_errors_fatal=EBooleanPassed)? &
	('ignore_errors:' ignore_errors=EBooleanPassed)? &
	('ignore_unreachable:' ignore_unreachable=EBooleanPassed)?
	)
;

ETaskHandlerErrorHandling:
	(
	('changed_when:' changed_when=EJinjaExpressionEvaluationWithoutBrackets)? &
	('failed_when:' failed_when=EJinjaExpressionEvaluationWithoutBrackets)? &
	('any_errors_fatal:' any_errors_fatal=EBooleanPassed)? &
	('ignore_errors:' ignore_errors=EBooleanPassed)? &
	('ignore_unreachable:' ignore_unreachable=EBooleanPassed)?
	)
;

EFactsSettings:
	(
	('gather_facts:' gather_facts=EBooleanPassed)? &
	('gather_subset:' gather_subset=EListPassed)? &
	('gather_timeout:'gather_timeout=ENumberPassed)? &
	('fact_path:' fact_path=EJinjaExpressionAndString)?
	)
;

EDelegation:
	(
	('delegate_to:' delegate_to=EJinjaExpressionAndString)? &
	('delegate_facts:' delegate_facts=EBooleanPassed)?
	)
;

EAsynchronousSettings:
	(
	('async:' async=ENumberPassed)? &
	('poll:' poll=ENumberPassed)?
	)
;

ENotifiable:
	ENotifiedHandler | ENotifiedTopic
;

ENotifiedHandler:
	name=[EHandler|STRING]
;

ENotifiedTopic:
	'topic:' name=STRING
;

EJinjaExpressionOrString:
	EJinjaExpressionEvaluation | string=STRING
;

EJinjaExpressionAndString:
	(jinja_expression_and_string+=EJinjaExpressionOrString)+
;

EValuePassed:
	EJinjaExpressionAndString | EValueWithoutString
;

EValuePassedToJinjaExpression:
	EValue | ESpecialVariable | EItem | EVariableReference | EFunctionCall
;

EComposedValue:
	EDictionary | EList
;

EValue:
	EComposedValue | ESimpleValue
;

EValueWithoutString:
	EComposedValue | ESimpleValueWithoutString
;

ESimpleValueWithoutString:
	simple_value=BOOLEAN | simple_value=NULL | simple_value=NUMBER | simple_value=NONE
;
ESimpleValue:
	simple_value_string=STRING | simple_value_without_string=ESimpleValueWithoutString
;

EItem:
	{EItem}
	'item'  //TODO: maybe this should be included in ESpecialVariable, thus it shouldn't exist as a rule?
;

EJinjaExpressionEvaluation:
	'{{' jinja_expression=EJinjaExpressionEvaluationWithoutBrackets '}}'
;

EJinjaExpressionEvaluationWithoutBrackets:
	EFilteredExpression | EIfExpression
;

EFunctionCall:
	name=ID ('(' parameters+=EFilteredExpression (',' parameters+=EFilteredExpression)* ')' | '(' ')') //TODO maybe it's better to call it "function_name" instead of "name"
;

EFilteredExpression:
	to_filter=EOrExpression ('|' filter=EFilteredExpression)?
;

EOrExpression:
	left_or=EAndExpression ('or' right_or=EOrExpression)?
;

EAndExpression:
	left_and=ETruthExpression ('and' right_and=EAndExpression)?
;

ETruthExpression:
	left_value=EOperation (equality_sign=('==' | '!=' | '<' | '>' | '<=' | '>=') right_value=ETruthExpression)?
;

EOperation:
	left_operand=EIsExpression (operator=('+' | '-' | '/' | '//' | '%' | '*' | '**') right_operand=EOperation)?
;

EIsExpression:
	parenthesised_expression=EParenthesisedExpression ('is' (is_not='not')? status=EIsExpression | (is_not='not')? 'in' container_expression=EIsExpression)?
;

EParenthesisedExpression:
	(basic_value=EValuePassedToJinjaExpression | '(' parenthesised_term=EFilteredExpression ')') ('[' index=NUMBER ']')? ('.' tail+=ETailElement)*
;

EIfExpression:
	'return' if_expression=EFilteredExpression 'if' if_condition=EFilteredExpression ('else' else_expression=EFilteredExpression)?
;

EDictionaryPairReference:
	name=[EDictionaryPair|ID] ('[' index=NUMBER ']')?
;

EVariableDeclarationVariableReference:
	variable_declaration_variable_reference=[EVariableDeclaration|ID]
;

ERegisterVariableReference:
	'registered_variable:' register_variable_reference=[ERegisterVariable|ID]
;

EVariableDeclaration:
	name=ID ':' value_passed=EValuePassed
;

EIndexOrLoopVariable:
	name=ID
;

EIndexOrLoopVariableReference:
	'index_or_loop_var:' name=[EIndexOrLoopVariable|ID]
;

ERegisterVariable:
	'register:' name=ID
;

EInputOperationVariableReference:
	'operation_input:' name=[rm::EParameterDefinition|STRING]
;

EInputInterfaceVariableReference:
	'interface_input:' name=[rm::EPropertyDefinition|STRING]
;

EVariableReference:
	EVariableDeclarationVariableReference | ERegisterVariableReference | EInputOperationVariableReference | EInputInterfaceVariableReference | EIndexOrLoopVariableReference
;

ESpecialVariable: //https://docs.ansible.com/ansible/latest/reference_appendices/special_variables.html
	{ESpecialVariable}
	'special_variable:' name=ID
;

ETailElement:
	(identifier_ID=ID | function_call=EFunctionCall) ('[' index=NUMBER ']')?
;

EDictionary:
	'{' dictionary_pairs+=EDictionaryPair (',' dictionary_pairs+=EDictionaryPair)* '}'
;

EDictionaryPair:
	name=ID ':' value=EValuePassed
;

EList:
	'[' elements+=EValuePassed (',' elements+=EValuePassed)* ']'
;

EDictionaryPassed:
	EJinjaExpressionEvaluation | EDictionary
;

EListPassed:
	EJinjaExpressionEvaluation | EList
;

ENumberPassed:
	EJinjaExpressionEvaluation | number_passed=NUMBER | number_passed=NULL
;

EBooleanPassed:
	EJinjaExpressionEvaluation | boolean_passed=BOOLEAN | boolean_passed=NULL
;

terminal BOOLEAN:
	'True' |'False'
;

terminal NULL:
	'Null'
;

terminal NONE:
	'None'
;

terminal NUMBER:
	(('1'..'9')('0'..'9')* | '0') ('.'('0'..'9')+)?
;














