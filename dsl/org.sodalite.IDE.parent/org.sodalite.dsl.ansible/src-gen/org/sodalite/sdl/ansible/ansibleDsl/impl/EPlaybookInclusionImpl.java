/**
 * generated by Xtext 2.23.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.ECondition;
import org.sodalite.sdl.ansible.ansibleDsl.EPlaybookInclusion;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EPlaybook Inclusion</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EPlaybookInclusionImpl#getPlaybook_file_name <em>Playbook file name</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EPlaybookInclusionImpl#getWhen_expression <em>When expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EPlaybookInclusionImpl extends MinimalEObjectImpl.Container implements EPlaybookInclusion
{
  /**
   * The default value of the '{@link #getPlaybook_file_name() <em>Playbook file name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPlaybook_file_name()
   * @generated
   * @ordered
   */
  protected static final String PLAYBOOK_FILE_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPlaybook_file_name() <em>Playbook file name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPlaybook_file_name()
   * @generated
   * @ordered
   */
  protected String playbook_file_name = PLAYBOOK_FILE_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getWhen_expression() <em>When expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWhen_expression()
   * @generated
   * @ordered
   */
  protected ECondition when_expression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EPlaybookInclusionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnsibleDslPackage.Literals.EPLAYBOOK_INCLUSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPlaybook_file_name()
  {
    return playbook_file_name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPlaybook_file_name(String newPlaybook_file_name)
  {
    String oldPlaybook_file_name = playbook_file_name;
    playbook_file_name = newPlaybook_file_name;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EPLAYBOOK_INCLUSION__PLAYBOOK_FILE_NAME, oldPlaybook_file_name, playbook_file_name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ECondition getWhen_expression()
  {
    return when_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWhen_expression(ECondition newWhen_expression, NotificationChain msgs)
  {
    ECondition oldWhen_expression = when_expression;
    when_expression = newWhen_expression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EPLAYBOOK_INCLUSION__WHEN_EXPRESSION, oldWhen_expression, newWhen_expression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWhen_expression(ECondition newWhen_expression)
  {
    if (newWhen_expression != when_expression)
    {
      NotificationChain msgs = null;
      if (when_expression != null)
        msgs = ((InternalEObject)when_expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EPLAYBOOK_INCLUSION__WHEN_EXPRESSION, null, msgs);
      if (newWhen_expression != null)
        msgs = ((InternalEObject)newWhen_expression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EPLAYBOOK_INCLUSION__WHEN_EXPRESSION, null, msgs);
      msgs = basicSetWhen_expression(newWhen_expression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EPLAYBOOK_INCLUSION__WHEN_EXPRESSION, newWhen_expression, newWhen_expression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EPLAYBOOK_INCLUSION__WHEN_EXPRESSION:
        return basicSetWhen_expression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EPLAYBOOK_INCLUSION__PLAYBOOK_FILE_NAME:
        return getPlaybook_file_name();
      case AnsibleDslPackage.EPLAYBOOK_INCLUSION__WHEN_EXPRESSION:
        return getWhen_expression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EPLAYBOOK_INCLUSION__PLAYBOOK_FILE_NAME:
        setPlaybook_file_name((String)newValue);
        return;
      case AnsibleDslPackage.EPLAYBOOK_INCLUSION__WHEN_EXPRESSION:
        setWhen_expression((ECondition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EPLAYBOOK_INCLUSION__PLAYBOOK_FILE_NAME:
        setPlaybook_file_name(PLAYBOOK_FILE_NAME_EDEFAULT);
        return;
      case AnsibleDslPackage.EPLAYBOOK_INCLUSION__WHEN_EXPRESSION:
        setWhen_expression((ECondition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EPLAYBOOK_INCLUSION__PLAYBOOK_FILE_NAME:
        return PLAYBOOK_FILE_NAME_EDEFAULT == null ? playbook_file_name != null : !PLAYBOOK_FILE_NAME_EDEFAULT.equals(playbook_file_name);
      case AnsibleDslPackage.EPLAYBOOK_INCLUSION__WHEN_EXPRESSION:
        return when_expression != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (playbook_file_name: ");
    result.append(playbook_file_name);
    result.append(')');
    return result.toString();
  }

} //EPlaybookInclusionImpl
