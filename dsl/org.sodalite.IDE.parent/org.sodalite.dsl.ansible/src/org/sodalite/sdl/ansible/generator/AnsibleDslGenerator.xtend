/*
 * generated by Xtext 2.23.0
 */
package org.sodalite.sdl.ansible.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.sodalite.sdl.ansible.ansibleDsl.EPlaybook
import org.sodalite.sdl.ansible.ansibleDsl.EPlay
import org.sodalite.sdl.ansible.ansibleDsl.EDictionary
import org.sodalite.sdl.ansible.ansibleDsl.EValue
import org.sodalite.sdl.ansible.ansibleDsl.EList
import java.util.ArrayList
import org.sodalite.sdl.ansible.ansibleDsl.EPlayExeSettings
import org.sodalite.sdl.ansible.ansibleDsl.EPlayErrorHandling
import org.sodalite.sdl.ansible.ansibleDsl.EFactsSettings
import org.sodalite.sdl.ansible.ansibleDsl.EBlockTask
import org.sodalite.sdl.ansible.ansibleDsl.ETaskHandler
import org.sodalite.sdl.ansible.ansibleDsl.EBlock
import org.sodalite.sdl.ansible.ansibleDsl.ETask
import org.sodalite.sdl.ansible.ansibleDsl.EHandler
import org.sodalite.sdl.ansible.ansibleDsl.EValuePassed
import org.sodalite.sdl.ansible.ansibleDsl.ENotifiedTopic
import org.sodalite.sdl.ansible.ansibleDsl.ENotifiedHandler
import org.sodalite.sdl.ansible.ansibleDsl.ELoopOverList
import org.sodalite.sdl.ansible.ansibleDsl.EUntil
import org.sodalite.sdl.ansible.ansibleDsl.ERoleInclusion
import org.sodalite.sdl.ansible.ansibleDsl.ESimpleValue
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaExpressionEvaluationWithoutBrackets
import org.sodalite.sdl.ansible.ansibleDsl.EFilteredExpression
import org.sodalite.sdl.ansible.ansibleDsl.EOrExpression
import org.sodalite.sdl.ansible.ansibleDsl.EFunctionCall
import org.sodalite.sdl.ansible.ansibleDsl.EIfExpression
import org.sodalite.sdl.ansible.ansibleDsl.EAndExpression
import org.sodalite.sdl.ansible.ansibleDsl.ETruthExpression
import org.sodalite.sdl.ansible.ansibleDsl.EOperation
import org.sodalite.sdl.ansible.ansibleDsl.EIsExpression
import org.sodalite.sdl.ansible.ansibleDsl.EParenthesisedExpression
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaExpressionAndString
import org.sodalite.sdl.ansible.ansibleDsl.EValueWithoutString
import org.sodalite.sdl.ansible.ansibleDsl.EValuePassedToJinjaExpression
import org.sodalite.sdl.ansible.ansibleDsl.EComposedValue
import org.sodalite.sdl.ansible.ansibleDsl.ESimpleValueWithoutString
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaExpressionOrString
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaExpressionEvaluation
import org.sodalite.sdl.ansible.ansibleDsl.EVariableDeclarationVariableReference
import org.sodalite.sdl.ansible.ansibleDsl.ERegisterVariableReference
import org.sodalite.sdl.ansible.ansibleDsl.ESpecialVariable
import org.sodalite.sdl.ansible.ansibleDsl.EInputOperationVariableReference
import org.sodalite.sdl.ansible.ansibleDsl.EInputInterfaceVariableReference
import org.sodalite.sdl.ansible.ansibleDsl.EListPassed
import org.sodalite.sdl.ansible.ansibleDsl.EDictionaryPassed
import org.sodalite.sdl.ansible.ansibleDsl.ENumberPassed
import org.sodalite.sdl.ansible.ansibleDsl.EBooleanPassed
import org.sodalite.sdl.ansible.ansibleDsl.EIndexOrLoopVariableReference
import org.sodalite.sdl.ansible.ansibleDsl.ETailElement
import org.sodalite.sdl.ansible.ansibleDsl.EBase
import org.sodalite.sdl.ansible.ansibleDsl.EExecution
import org.sodalite.sdl.ansible.ansibleDsl.EPlaybookInclusion
import org.sodalite.sdl.ansible.ansibleDsl.ESetFactVariableReference
import org.sodalite.sdl.ansible.ansibleDsl.EEmptyCurlyBraces
import org.sodalite.sdl.ansible.ansibleDsl.EBlockAndRoleErrorHandling
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaStatement
import org.sodalite.sdl.ansible.ansibleDsl.EIfStatement
import org.sodalite.sdl.ansible.ansibleDsl.EForStatement
import org.sodalite.sdl.ansible.ansibleDsl.EWithLookup
import org.sodalite.sdl.ansible.ansibleDsl.ESquareBracketElement

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class AnsibleDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (e : resource.allContents.toIterable.filter(EPlaybook)){
			fsa.generateFile(e.name + '.yaml', compilePlays(e))
		}
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
	}
	
	def compilePlays(EPlaybook playbook) '''
		«FOR play : playbook.plays»
			«compilePlay(play, '  ')»
			
		«ENDFOR»
	'''
	
	def compilePlay(EPlay play, String space) '''
		«IF play.name !== null»
			- name: «play.name.compileJinjaExpressionAndString»
			«IF play.hosts !== null»
				«space»hosts: «play.hosts.compileJinjaExpressionAndString»
			«ENDIF»
			«IF play.playbook_inclusion !== null»
				«compilePlaybookInclusion(play.playbook_inclusion, space, false)»
			«ENDIF»
		«ELSE»
			«IF play.hosts !== null»
				- hosts: «play.hosts.compileJinjaExpressionAndString»
				«IF play.playbook_inclusion !== null»
					«compilePlaybookInclusion(play.playbook_inclusion, space, false)»
				«ENDIF»
			«ELSE»
				«IF play.playbook_inclusion !== null»
					«compilePlaybookInclusion(play.playbook_inclusion, space, true)»
				«ENDIF»
			«ENDIF»
		«ENDIF»
		«compileBaseAttributes(play, space)»
		«IF play.play_exe_settings !== null»
			«compilePlayExeSettings(play.play_exe_settings, space)»
		«ENDIF»
		«IF play.error_handling !== null»
			«compilePlayErrorHandling(play.error_handling, space)»
		«ENDIF»
		«IF play.facts_settings !== null»
			«compileFactsSettings(play.facts_settings, space)»
		«ENDIF»
		«IF play.vars_files !== null»
			«space»vars_files: «play.vars_files.compileListPassed»
		«ENDIF»
		«IF play.vars_prompt !== null»
			«space»vars_prompt: «play.vars_prompt.compileListPassed»
		«ENDIF»
		«IF play.force_handlers !== null»
			«space»force_handlers: «play.force_handlers.compileBooleanPassed»
		«ENDIF»
		«IF play.roles_inclusions !== null»
			«space»roles:
			«FOR role: play.roles_inclusions.roles»
				«compileRoleInclusion(role, space.concat('  '))»
			«ENDFOR»
		«ENDIF»
		«IF play.pre_tasks_list.size !== 0»
			
			«space»pre_tasks:
			«FOR blockTask: play.pre_tasks_list»
				
				«compileBlockTask(blockTask, space.concat('  '))»
			«ENDFOR»
		«ENDIF»
		«IF play.tasks_list.size !== 0»
			
			«space»tasks:
			«FOR blockTask: play.tasks_list»
				
				«compileBlockTask(blockTask, space.concat('  '))»
			«ENDFOR»
		«ENDIF»
		«IF play.post_tasks_list.size !== 0»
			
			«space»post_tasks:
			«FOR blockTask: play.post_tasks_list»
				
				«compileBlockTask(blockTask, space.concat('  '))»
			«ENDFOR»
		«ENDIF»
		«IF play.handlers.size !== 0»
			
			«space»handlers:
			«FOR handler: play.handlers»
				
				«compileTaskHandler(handler, space.concat('  '))»
			«ENDFOR»
		«ENDIF»
	'''
	
	//isFirstElementOfPlay is true if both play.name and play.hosts are null, so if import_playbook needs the '- ' before it 
	def compilePlaybookInclusion(EPlaybookInclusion playbookInclusion, String space, boolean isFirstElementOfPlay)'''
		«IF playbookInclusion !== null»
			«IF playbookInclusion.playbook_file_name !== null && !isFirstElementOfPlay»
				«space»import_playbook: «playbookInclusion.playbook_file_name»
			«ELSEIF playbookInclusion.playbook_file_name !== null && isFirstElementOfPlay»
				- import_playbook: «playbookInclusion.playbook_file_name»
			«ENDIF»			
			«IF playbookInclusion.when_expression !== null»
				«space»when: «playbookInclusion.when_expression.compileJinjaExpressionEvaluationWithoutBrackets»
			«ENDIF»
		«ENDIF»
	'''
	
	def compileRoleInclusion(ERoleInclusion roleInclusion, String space)'''
		«space»- role: «roleInclusion.name.compileJinjaExpressionAndString»
		«compileBaseAttributes(roleInclusion, space.concat('  '))»
		«compileExecutionAttributes(roleInclusion, space.concat('  '))»
		«IF roleInclusion.error_handling !== null»
			«compileBlockAndRoleErrorHandling(roleInclusion.error_handling, space.concat('  '))»
		«ENDIF»
	'''
	
	def compileBaseAttributes(EBase base, String space) '''
		«IF base.privilege_escalation !== null»
			«IF base.privilege_escalation.become !== null»
				«space»become: «base.privilege_escalation.become.compileBooleanPassed»
			«ENDIF»
			«IF base.privilege_escalation.become_exe !== null»
				«space»become_exe: «base.privilege_escalation.become_exe.compileJinjaExpressionAndString»
			«ENDIF»
			«IF base.privilege_escalation.become_flags !== null»
				«space»become_flags: «base.privilege_escalation.become_flags.compileJinjaExpressionAndString»
			«ENDIF»
			«IF base.privilege_escalation.become_method !== null»
				«space»become_method: «base.privilege_escalation.become_method.compileJinjaExpressionAndString»
			«ENDIF»
			«IF base.privilege_escalation.become_user !== null»
				«space»become_user: «base.privilege_escalation.become_user.compileJinjaExpressionAndString»
			«ENDIF»
		«ENDIF»
		«IF base.validation_mode !== null»
			«IF base.validation_mode.check_mode !== null»
				«space»check_moode: «base.validation_mode.check_mode.compileBooleanPassed»
			«ENDIF»
			«IF base.validation_mode.diff !== null»
				«space»diff: «base.validation_mode.diff.compileBooleanPassed»
			«ENDIF»
		«ENDIF»
		«IF base.connection !== null»
			«IF base.connection.connection !== null»
				«space»connection: «base.connection.connection.compileJinjaExpressionAndString»
			«ENDIF»
			«IF base.connection.port !== null»
				«space»port: «base.connection.port.compileNumberPassed»
			«ENDIF»
			«IF base.connection.remote_user !== null»
				«space»remote_user: «base.connection.remote_user.compileJinjaExpressionAndString»
			«ENDIF»
		«ENDIF»
		«IF base.no_log !== null»
			«space»no_log: «base.no_log.compileBooleanPassed»
		«ENDIF»
		«IF base.debugger !== null»
			«space»debugger: «base.debugger.compileJinjaExpressionAndString»
		«ENDIF»
		«IF base.module_defaults !== null»
			«space»module_defaults: «base.module_defaults.compileListPassed»
		«ENDIF»
		«IF base.environment !== null»
			«space»environment: «base.environment.compileListPassed»
		«ENDIF»
		«IF base.collections !== null»
			«space»collections: «base.collections.compileListPassed»
		«ENDIF»
		«IF base.tags !== null»
			«space»tags: «base.tags.compileListPassed»
		«ENDIF»
		«IF base.variable_declarations.size !== 0»
			«space»vars:
			«FOR variable_declaration: base.variable_declarations»
				«space.concat('  ')»«variable_declaration.name»: «compileValuePassed(variable_declaration.value_passed).toString()»
			«ENDFOR»
		«ENDIF»
	'''
	
	def compilePlayExeSettings(EPlayExeSettings playExeSettings, String space) '''
		«IF playExeSettings.strategy !== null»
			«space»strategy: «playExeSettings.strategy.compileJinjaExpressionAndString»
		«ENDIF»
		«IF playExeSettings.serial_list !== null»
			«space»serial: «playExeSettings.serial_list.compileListPassed»
		«ENDIF»
		«IF playExeSettings.order !== null»
			«space»order: «playExeSettings.order.compileJinjaExpressionAndString»
		«ENDIF»
		«IF playExeSettings.throttle !== null»
			«space»throttle: «playExeSettings.throttle.compileNumberPassed»
		«ENDIF»
		«IF playExeSettings.run_once !== null»
			«space»run_once: «playExeSettings.run_once.compileBooleanPassed»
		«ENDIF»
	'''
	
	def compilePlayErrorHandling(EPlayErrorHandling playErrorHandling, String space) '''
		«IF playErrorHandling.max_fail_percentage !== null»
			«space»max_fail_percentage: «playErrorHandling.max_fail_percentage.compileNumberPassed»
		«ENDIF»
		«IF playErrorHandling.any_errors_fatal !== null»
			«space»any_errors_fatal: «playErrorHandling.any_errors_fatal.compileBooleanPassed»
		«ENDIF»
		«IF playErrorHandling.ignore_errors !== null»
			«space»ignore_errors: «playErrorHandling.ignore_errors.compileBooleanPassed»
		«ENDIF»
		«IF playErrorHandling.ignore_unreachable !== null»
			«space»ignore_unreachable: «playErrorHandling.ignore_unreachable.compileBooleanPassed»
		«ENDIF»
	'''
	
	def compileFactsSettings(EFactsSettings factsSettings, String space) '''
		«IF factsSettings.gather_facts !== null»
			«space»gather_facts: «factsSettings.gather_facts.compileBooleanPassed»
		«ENDIF»
		«IF factsSettings.gather_subset !== null»
			«space»gather_subset: «factsSettings.gather_subset.compileListPassed»
		«ENDIF»
		«IF factsSettings.gather_timeout !== null»
			«space»gather_timeout: «factsSettings.gather_timeout.compileNumberPassed»
		«ENDIF»
		«IF factsSettings.fact_path !== null»
			«space»fact_path: «factsSettings.fact_path.compileJinjaExpressionAndString»
		«ENDIF»
	'''
	
	def compileBlockTask(EBlockTask blockTask, String space) '''
		«IF blockTask instanceof EBlock»
			«compileBlock(blockTask, space)»
		«ENDIF»
		«IF blockTask instanceof ETask»
			«compileTaskHandler(blockTask, space)»
		«ENDIF»
	'''
	
	def compileBlock(EBlock block, String space) '''
		«IF block.name !== null»
			«space»- name: «block.name.compileJinjaExpressionAndString»
			«space.concat('  ')»block:
		«ELSE»
			«space»- block:
		«ENDIF»
		«IF block.tasks.size !== 0»
			«FOR task: block.tasks»
				«compileTaskHandler(task, space.concat('  ').concat('  '))»
			«ENDFOR»
		«ENDIF»
		«IF block.rescue_tasks.size !== 0»
			«space.concat('  ')»rescue: 
			«FOR task: block.rescue_tasks»
				«compileTaskHandler(task, space.concat('  ').concat('  '))»
			«ENDFOR»
		«ENDIF»
		«IF block.always_tasks.size !== 0»
			«space.concat('  ')»always: 
			«FOR task: block.always_tasks»
				«compileTaskHandler(task, space.concat('  ').concat('  '))»
			«ENDFOR»
		«ENDIF»
		«compileBaseAttributes(block, space.concat('  '))»
		«compileExecutionAttributes(block, space.concat('  '))»
		«IF block.error_handling !== null»
			«compileBlockAndRoleErrorHandling(block.error_handling, space.concat('  '))»
		«ENDIF»
	'''
	
	def compileBlockAndRoleErrorHandling(EBlockAndRoleErrorHandling blockAndRoleErrorHandling, String space)'''
		«IF blockAndRoleErrorHandling !== null»
			«IF blockAndRoleErrorHandling.any_errors_fatal !== null»
				«space»any_errors_fatal: «blockAndRoleErrorHandling.any_errors_fatal.compileBooleanPassed»
			«ENDIF»
			«IF blockAndRoleErrorHandling.ignore_errors !== null»
				«space»ignore_errors: «blockAndRoleErrorHandling.ignore_errors.compileBooleanPassed»
			«ENDIF»
			«IF blockAndRoleErrorHandling.ignore_unreachable !== null»
				«space»ignore_unreachable: «blockAndRoleErrorHandling.ignore_unreachable.compileBooleanPassed»
			«ENDIF»
		«ENDIF»	
	'''
	
	def compileExecutionAttributes(EExecution execution, String space) '''
		«IF execution.exe_settings !== null»
			«IF execution.exe_settings.throttle != 0»
				«space»throttle: «execution.exe_settings.throttle.compileNumberPassed»
			«ENDIF»
			«IF execution.exe_settings.run_once !== null»
				«space»run_once: «execution.exe_settings.run_once.compileBooleanPassed»
			«ENDIF»
		«ENDIF»
		«IF execution.delegation !== null»
			«IF execution.delegation.delegate_to !== null»
				«space»delegate_to: «execution.delegation.delegate_to.compileJinjaExpressionAndString»
			«ENDIF»
			«IF execution.delegation.delegate_facts !== null»
				«space»delegate_facts: «execution.delegation.delegate_facts.compileBooleanPassed»
			«ENDIF»
		«ENDIF»
		«IF execution.when_expression !== null»
			«space»when: «execution.when_expression.compileJinjaExpressionEvaluationWithoutBrackets»
		«ENDIF»
	'''
	
	//the name of the handler is a simple string because otherwise the scoping doesn't work, so this function is needed
	//to distinguish between the 2 different cases and get the name of task/handler
	def taskHandlerName(ETaskHandler taskHandler){
		if (taskHandler instanceof ETask){
			//this check is necessary in order to not pass null to compileJinjaExpressionAndString
			if (taskHandler.name !== null) return taskHandler.name.compileJinjaExpressionAndString
			else return null
		} 
		else if (taskHandler instanceof EHandler) return taskHandler.name
	}
	
	//if the task/handler has a name, indent it correctly. the name of the module used is the first thing to show
	def compileTaskHandler(ETaskHandler taskHandler, String space) '''
		«IF taskHandlerName(taskHandler) !== null»
			«space»- name: «taskHandlerName(taskHandler)»
			«IF taskHandler.module !== null»
				«space.concat('  ')»«taskHandler.module.name»:«IF taskHandler.module.direct_parameter !== null» «taskHandler.module.direct_parameter.compileValuePassed»«ENDIF»
				«FOR parameter: taskHandler.module.parameters»
					«space.concat('  ').concat('  ')»«parameter.name»: «parameter.value_passed.compileValuePassed»
				«ENDFOR»
			«ENDIF»
		«ELSE»
			«IF taskHandler.module !== null»
				«space»- «taskHandler.module.name»:«IF taskHandler.module.direct_parameter !== null» «taskHandler.module.direct_parameter.compileValuePassed»«ENDIF»
				«FOR parameter: taskHandler.module.parameters»
					«space.concat('  ').concat('  ')»«parameter.name»: «parameter.value_passed.compileValuePassed»
				«ENDFOR»
			«ENDIF»
		«ENDIF»
		«compileBaseAttributes(taskHandler, space.concat('  '))»
		«compileExecutionAttributes(taskHandler, space.concat('  '))»
		«compileTaskHandlerAttributes(taskHandler, space.concat('  '))»
		«IF taskHandler instanceof EHandler»
			«IF taskHandler.listen_to !== null»
				«space.concat('  ')»listen: «compileNotifiedTopics(taskHandler)»
			«ENDIF»
		«ENDIF»
	'''
	
	//the assumption is that the module used was already generated by the compileTaskHandler function
	def compileTaskHandlerAttributes(ETaskHandler taskHandler, String space) '''
		«IF taskHandler.error_handling !== null»
			«IF taskHandler.error_handling.changed_when !== null»
				«space»change_when: «taskHandler.error_handling.changed_when.compileJinjaExpressionEvaluationWithoutBrackets»
			«ENDIF»
			«IF taskHandler.error_handling.failed_when !== null»
				«space»failed_when: «taskHandler.error_handling.failed_when.compileJinjaExpressionEvaluationWithoutBrackets»
			«ENDIF»
			«IF taskHandler.error_handling.any_errors_fatal !== null»
				«space»any_errors_fatal: «taskHandler.error_handling.any_errors_fatal.compileBooleanPassed»
			«ENDIF»
			«IF taskHandler.error_handling.ignore_errors !== null»
				«space»ignore_errors: «taskHandler.error_handling.ignore_errors.compileBooleanPassed»
			«ENDIF»
			«IF taskHandler.error_handling.ignore_unreachable !== null»
				«space»ignore_unreachable: «taskHandler.error_handling.ignore_unreachable.compileBooleanPassed»
			«ENDIF»
		«ENDIF»
		«IF taskHandler.action !== null»
			«space»action: «taskHandler.action.compileJinjaExpressionAndString»
		«ENDIF»
		«IF taskHandler.asynchronous_settings !== null»
			«IF taskHandler.asynchronous_settings.async !== null»
				«space»async: «taskHandler.asynchronous_settings.async.compileNumberPassed»
			«ENDIF»
			«IF taskHandler.asynchronous_settings.poll !== null»
				«space»poll: «taskHandler.asynchronous_settings.poll.compileNumberPassed»
			«ENDIF»
		«ENDIF»
		«IF taskHandler.args !== null»
			«space»args: «taskHandler.args.compileDictionaryPassed»
		«ENDIF»
		«IF taskHandler.notifiables.size !== 0»
			«space»notify: «compileNotifiables(taskHandler)»
		«ENDIF»
		«IF taskHandler.loop !== null»
			«IF taskHandler.loop instanceof ELoopOverList»
				«space»loop: «compileLoopList((taskHandler.loop as ELoopOverList).loop_list)»
				«IF (taskHandler.loop as ELoopOverList).loop_control !== null»
					«IF (taskHandler.loop as ELoopOverList).loop_control.label !== null»
						«space»label: «(taskHandler.loop as ELoopOverList).loop_control.label.compileValuePassed»
					«ENDIF»
					«IF (taskHandler.loop as ELoopOverList).loop_control.pause !== null»
						«space»pause: «(taskHandler.loop as ELoopOverList).loop_control.pause.compileNumberPassed»
					«ENDIF»
					«IF (taskHandler.loop as ELoopOverList).loop_control.index_var !== null»
						«space»index_var: «(taskHandler.loop as ELoopOverList).loop_control.index_var.name»
					«ENDIF»
					«IF (taskHandler.loop as ELoopOverList).loop_control.loop_var !== null»
						«space»loop_var: «(taskHandler.loop as ELoopOverList).loop_control.loop_var.name»
					«ENDIF»
					«IF (taskHandler.loop as ELoopOverList).loop_control.extended !== null»
						«space»extended: «(taskHandler.loop as ELoopOverList).loop_control.extended.compileBooleanPassed»
					«ENDIF»
				«ENDIF»
			«ENDIF»
			«IF taskHandler.loop instanceof EUntil»
				«IF (taskHandler.loop as EUntil).until !== null»
					«space»until: «(taskHandler.loop as EUntil).until.compileJinjaExpressionEvaluationWithoutBrackets»
				«ENDIF»
				«IF (taskHandler.loop as EUntil).retries !== null»
					«space»retries: «(taskHandler.loop as EUntil).retries.compileNumberPassed»
				«ENDIF»
				«IF (taskHandler.loop as EUntil).delay !== null»
					«space»delay: «(taskHandler.loop as EUntil).delay.compileNumberPassed»
				«ENDIF»
			«ENDIF»
			«IF taskHandler.loop instanceof EWithLookup»
				«IF (taskHandler.loop as EWithLookup).lookup !== null && (taskHandler.loop as EWithLookup).with_list !== null»
					«space»with_«(taskHandler.loop as EWithLookup).lookup»: «(taskHandler.loop as EWithLookup).with_list.compileValuePassed.toString()»
				«ENDIF»
			«ENDIF»
		«ENDIF»
		«IF taskHandler.register !== null»
			«space»register: «taskHandler.register.name»
		«ENDIF»
	'''
	
	def compileNotifiables(ETaskHandler taskHandler){
		var newList = new ArrayList()
		for (notifiable : taskHandler.notifiables){
			if (notifiable instanceof ENotifiedTopic){
				newList.add("\"".concat(notifiable.name).concat("\""))	
			}
			else if (notifiable instanceof ENotifiedHandler){
				newList.add(notifiable.name.name)
			}
		}
		return newList
	}
	
	def compileNotifiedTopics(EHandler handler){
		var newList = new ArrayList()
		for (listenedTopic : handler.listen_to){
			newList.add("\"".concat(listenedTopic.name).concat("\""))
		}
		return newList
	}
	
	def compileDictionaryPassed(EDictionaryPassed dictionaryPassed){
		if (dictionaryPassed instanceof EDictionary) return dictionaryPassed.compileDictionary
		else if (dictionaryPassed instanceof EJinjaExpressionEvaluation) return "\"".concat(dictionaryPassed.compileJinjaExpressionEvaluation).concat("\"")
	}
	
	def compileListPassed(EListPassed listPassed){
		if (listPassed instanceof EList) return listPassed.compileList
		else if (listPassed instanceof EJinjaExpressionEvaluation) return "\"".concat(listPassed.compileJinjaExpressionEvaluation).concat("\"")
	}
	
	def compileNumberPassed(ENumberPassed numberPassed){
		if (numberPassed instanceof EJinjaExpressionEvaluation) return "\"".concat(numberPassed.compileJinjaExpressionEvaluation).concat("\"")
		else if (numberPassed.number_passed !== null) return numberPassed.number_passed
	}
	
	def compileBooleanPassed(EBooleanPassed booleanPassed){
		if (booleanPassed instanceof EJinjaExpressionEvaluation) return "\"".concat(booleanPassed.compileJinjaExpressionEvaluation).concat("\"")
		else if (booleanPassed.boolean_passed !== null) return booleanPassed.boolean_passed
	}
	
	def compileTailElement(ETailElement tailElement){
		var tailElementString = ""
		if (tailElement.function_call !== null) tailElementString = tailElementString.concat(tailElement.function_call.compileFunctionCall)
		for (squareBracketElement : tailElement.square_bracket_elements){
			tailElementString = tailElementString.concat(squareBracketElement.compileSquareBracketElement)
		}
		return tailElementString
	}
	
	def compileSquareBracketElement(ESquareBracketElement squareBracketElement){
		var stringToReturn = ""
		if (squareBracketElement.index !== null) stringToReturn = stringToReturn.concat("[").concat(squareBracketElement.index).concat("]")
		else if (squareBracketElement.field !== null) stringToReturn = stringToReturn.concat("['").concat(squareBracketElement.field).concat("']")
		return stringToReturn
	}
	
	def compileJinjaExpressionEvaluationWithoutBrackets(EJinjaExpressionEvaluationWithoutBrackets jinja){
		if (jinja instanceof EFilteredExpression){
			return jinja.compileFilteredExpression
		}
		else if (jinja instanceof EIfExpression){
			return jinja.compileIfExpression
		}
	}

	def compileFunctionCall(EFunctionCall functionCall){
		var stringToReturn = functionCall.name
		if (functionCall.parameters.size !== 0){
			stringToReturn = stringToReturn.concat("(")
			for (var index = 0; index < functionCall.parameters.size; index++){	
				//the first parameter shouldn't have a comma before it, the others yes
				if (index == 0){
					stringToReturn = stringToReturn.concat(functionCall.parameters.get(index).compileFilteredExpression.toString())
				}
				else {
					stringToReturn = stringToReturn.concat(", ").concat(functionCall.parameters.get(index).compileFilteredExpression.toString())
				}
			}
			stringToReturn = stringToReturn.concat(")")	
		}
		else if (functionCall.empty_brackets !== null){
			stringToReturn = stringToReturn.concat("()")
		}
		return stringToReturn
	}
	
	def compileIfExpression(EIfExpression ifExpression){
		var stringToReturn = ifExpression.if_expression.compileFilteredExpression
		stringToReturn = stringToReturn.concat(" if ").concat(ifExpression.if_condition.compileFilteredExpression)
		if (ifExpression.else_expression !== null){
			stringToReturn = stringToReturn.concat(" else ").concat(ifExpression.else_expression.compileFilteredExpression)
		}
		return stringToReturn
	}
	
	def compileFilteredExpression(EFilteredExpression filteredExpression){
		var stringToReturn = filteredExpression.to_filter.compileOrExpression.toString()
		if (filteredExpression.filter !== null){
			stringToReturn = stringToReturn.concat(" | ").concat(filteredExpression.filter.compileJinjaExpressionEvaluationWithoutBrackets.toString())
		}
		return stringToReturn
	}
	
	def compileOrExpression(EOrExpression orExpression){
		var stringToReturn = orExpression.left_or.compileAndExpression.toString()
		if (orExpression.right_or !== null){
			stringToReturn = stringToReturn.concat(" or ").concat(orExpression.right_or.compileOrExpression.toString())
		}
		return stringToReturn
	}
	
	def compileAndExpression(EAndExpression andExpression){
		var stringToReturn = andExpression.left_and.compileTruthExpression.toString()
		if (andExpression.right_and !== null){
			stringToReturn = stringToReturn.concat(" and ").concat(andExpression.right_and.compileAndExpression.toString())
		}
		return stringToReturn
	}
	
	def compileTruthExpression(ETruthExpression truthExpression){
		var stringToReturn = truthExpression.left_value.compileOperation.toString()
		if (truthExpression.equality_sign !== null && truthExpression.right_value !== null){
			stringToReturn = stringToReturn.concat(" ").concat(truthExpression.equality_sign).concat(" ").concat(truthExpression.right_value.compileTruthExpression.toString())
		}
		return stringToReturn
	}
	
	def compileOperation(EOperation operation){
		var stringToReturn = operation.left_operand.compileIsExpression.toString()
		if (operation.operator !== null && operation.right_operand !== null){
			stringToReturn = stringToReturn.concat(" ").concat(operation.operator).concat(" ").concat(operation.right_operand.compileOperation.toString())
		}
		return stringToReturn
	}
	
	def compileIsExpression(EIsExpression isExpression){
		var stringToReturn = ""
		if (isExpression.not !== null) stringToReturn = stringToReturn.concat("not ")
		stringToReturn = stringToReturn.concat(isExpression.parenthesised_expression.compileParenthesisedExpression.toString())
		if (isExpression.status !== null){
			stringToReturn = stringToReturn.concat(" is ").concat(isExpression.status.compileIsExpression.toString())	
		}
		else if (isExpression.container_expression !== null){
			if (isExpression.not_in !== null){
				stringToReturn = stringToReturn.concat(" not in ").concat(isExpression.container_expression.compileIsExpression.toString())
			}
			else {
				stringToReturn = stringToReturn.concat(" in ").concat(isExpression.container_expression.compileIsExpression.toString())
			}
		}
		return stringToReturn
	}
	
	def compileParenthesisedExpression(EParenthesisedExpression parenthesisedExpression){
		var stringToReturn = ""
		if (parenthesisedExpression.basic_value !== null) stringToReturn = stringToReturn.concat(parenthesisedExpression.basic_value.compileValuePassedToJinjaExpression)
		else if (parenthesisedExpression.parenthesised_term !== null) stringToReturn = stringToReturn.concat("(").concat(parenthesisedExpression.parenthesised_term.compileFilteredExpression.toString()).concat(")")
		for (squareBracketElement : parenthesisedExpression.square_bracket_elements){
			stringToReturn = stringToReturn.concat(squareBracketElement.compileSquareBracketElement)
		}
		for (tailElement : parenthesisedExpression.tail){
			stringToReturn = stringToReturn.concat(".").concat(tailElement.compileTailElement)
		}
		return stringToReturn
	}
	
	def compileList(EList list){
		var newList = new ArrayList()
		for (element: list.elements){
			newList.add(element.compileValuePassed)
		}
		return newList
	}
	
	def compileValuePassed(EValuePassed valuePassed){
		if (valuePassed instanceof EJinjaExpressionAndString){
			return valuePassed.compileJinjaExpressionAndString
		}
		else if (valuePassed instanceof EValueWithoutString){
			return valuePassed.compileValueWithoutString
		}
	}
	
	//this is because it's used by the AnsibleDslProposalProvider. The "cascade" of functions called by this function
	//are made as a consequence
	def compileJinjaExpressionAndString(EJinjaExpressionAndString jinja){
		var stringToReturn = "\""
		for (jinjaOr : jinja.jinja_expression_and_string){
			stringToReturn = stringToReturn.concat(jinjaOr.compileJinjaExpressionOrString.toString())
		}
		stringToReturn = stringToReturn.concat("\"")
		return stringToReturn
	}
	
	def compileJinjaExpressionOrString(EJinjaExpressionOrString jinja){
		if (jinja.string !== null){
			return jinja.string
		}
		else if (jinja instanceof EJinjaExpressionEvaluation){
			return jinja.compileJinjaExpressionEvaluation
		}
		else if (jinja instanceof EJinjaStatement){
			return jinja.compileJinjaStatement
		}
	}
	
	def compileJinjaExpressionEvaluation(EJinjaExpressionEvaluation jinja){
		return "{{ ".concat(jinja.jinja_expression.compileJinjaExpressionEvaluationWithoutBrackets.toString()).concat(" }}")
	}
	
	def compileJinjaStatement(EJinjaStatement jinjaStatement){
		if (jinjaStatement instanceof EIfStatement){
			var stringToReturn = "{%"
			if (jinjaStatement.if_block_sign !== null) stringToReturn = stringToReturn.concat(jinjaStatement.if_block_sign)
			stringToReturn = stringToReturn.concat(" if ").concat(jinjaStatement.if_condition.compileFilteredExpression).concat(" %}")
			stringToReturn = stringToReturn.concat(" ").concat(jinjaStatement.if_body.compileValuePassed.toString())
			//the elif blocks, if present
			for (elif : jinjaStatement.elif_blocks){
				stringToReturn = stringToReturn.concat(" {%")
				if (elif.elif_block_sign !== null) stringToReturn = stringToReturn.concat(elif.elif_block_sign)
				stringToReturn = stringToReturn.concat(" elif ").concat(elif.elif_condition.compileFilteredExpression).concat(" %}")
				stringToReturn = stringToReturn.concat(" ").concat(elif.elif_body.compileValuePassed.toString())
			}
			//the else block, if present
			if (jinjaStatement.else_body !== null){
				stringToReturn = stringToReturn.concat(" {%")
				if (jinjaStatement.else_block_sign !== null) stringToReturn = stringToReturn.concat(jinjaStatement.else_block_sign)
				stringToReturn = stringToReturn.concat(" else %}")
				stringToReturn = stringToReturn.concat(" ").concat(jinjaStatement.else_body.compileValuePassed.toString())
			}
			//the endif part
			stringToReturn = stringToReturn.concat(" {%")
			if (jinjaStatement.endif_block_sign !== null) stringToReturn = stringToReturn.concat(jinjaStatement.endif_block_sign)
			stringToReturn = stringToReturn.concat(" endif %}")
			return stringToReturn
		}
		else if (jinjaStatement instanceof EForStatement){
			var stringToReturn = "{%"
			if (jinjaStatement.for_block_sign !== null) stringToReturn = stringToReturn.concat(jinjaStatement.for_block_sign)
			//the identifiers written after the "for"
			for (var index = 0; index < jinjaStatement.identifiers.size ; index++){
				//the first identifier shouldn't have a comma before it, the others yes
				if (index == 0){
					stringToReturn = stringToReturn.concat(" for ").concat(jinjaStatement.identifiers.get(index))
				}
				else {
					stringToReturn = stringToReturn.concat(", ").concat(jinjaStatement.identifiers.get(index))
				}
			}
			//the list of items to iterate after the "in"
			stringToReturn = stringToReturn.concat(" in ").concat(jinjaStatement.list.compileFilteredExpression)
			//the filter, if present
			if (jinjaStatement.condition !== null) stringToReturn = stringToReturn.concat(" if ").concat(jinjaStatement.condition.compileFilteredExpression)
			//the recursive keywork, if present
			if (jinjaStatement.recursive !== null) stringToReturn = stringToReturn.concat(" recursive")
			stringToReturn = stringToReturn.concat(" %}")
			//body of the for
			stringToReturn = stringToReturn.concat(" ").concat(jinjaStatement.for_body.compileValuePassed.toString())
			//the else block, if present
			if (jinjaStatement.else_body !== null){
				stringToReturn = stringToReturn.concat(" {%")
				if (jinjaStatement.else_block_sign !== null) stringToReturn = stringToReturn.concat(jinjaStatement.else_block_sign)
				stringToReturn = stringToReturn.concat(" else %}")
				stringToReturn = stringToReturn.concat(" ").concat(jinjaStatement.else_body.compileValuePassed.toString())
			}
			//the endfor part
			stringToReturn = stringToReturn.concat(" {%")
			if (jinjaStatement.endfor_block_sign !== null) stringToReturn = stringToReturn.concat(jinjaStatement.endfor_block_sign)
			stringToReturn = stringToReturn.concat(" endfor %}")
			return stringToReturn
		}
	}
	
	def compileValuePassedToJinjaExpression(EValuePassedToJinjaExpression valuePassedToJinjaExpression){
		if (valuePassedToJinjaExpression instanceof EValue) return compileValue(valuePassedToJinjaExpression).toString()
		else if (valuePassedToJinjaExpression instanceof ESpecialVariable){
			var specialVariableString = valuePassedToJinjaExpression.name
			return specialVariableString
		}
		else if (valuePassedToJinjaExpression instanceof EVariableDeclarationVariableReference){
			var declaredVariableString = ""
			declaredVariableString = declaredVariableString.concat(valuePassedToJinjaExpression.variable_declaration_variable_reference.name)
			return declaredVariableString
		}
		else if (valuePassedToJinjaExpression instanceof ERegisterVariableReference){
			var registerVariableString = ""
			registerVariableString = registerVariableString.concat(valuePassedToJinjaExpression.register_variable_reference.name)
			return registerVariableString
		}
		else if (valuePassedToJinjaExpression instanceof EInputOperationVariableReference){
			var inputOperationVariableString = ""
			inputOperationVariableString = inputOperationVariableString.concat(valuePassedToJinjaExpression.name.name)
			return inputOperationVariableString
		}
		else if (valuePassedToJinjaExpression instanceof EInputInterfaceVariableReference){
			var inputInterfaceVariableString = ""
			inputInterfaceVariableString = inputInterfaceVariableString.concat(valuePassedToJinjaExpression.name.name)
			return inputInterfaceVariableString
		}
		else if (valuePassedToJinjaExpression instanceof EIndexOrLoopVariableReference){
			var indexOrLoopVariableString = ""
			indexOrLoopVariableString = indexOrLoopVariableString.concat(valuePassedToJinjaExpression.name.name)
			return indexOrLoopVariableString
		}
		else if (valuePassedToJinjaExpression instanceof ESetFactVariableReference){
			var setFactVariableReferenceString = ""
			setFactVariableReferenceString = setFactVariableReferenceString.concat(valuePassedToJinjaExpression.name.name)
		}
		else if (valuePassedToJinjaExpression instanceof EFunctionCall){
			return valuePassedToJinjaExpression.compileFunctionCall
		}
		else if (valuePassedToJinjaExpression instanceof EEmptyCurlyBraces){
			return "{}"
		}
	}
	
	def compileLoopList(EValuePassed loopList){
		if (loopList instanceof EJinjaExpressionAndString || loopList instanceof EList) return compileValuePassed(loopList)
		else return "[".concat(loopList.compileValuePassed.toString()).concat("]")
	}
	
	
	def compileValue(EValue value){
		if (value instanceof EComposedValue) value.compileComposedValue
		else if (value instanceof ESimpleValue) value.compileSimpleValue
	}
	
	def compileValueWithoutString(EValueWithoutString valueWithoutString){
		if (valueWithoutString instanceof EComposedValue) valueWithoutString.compileComposedValue
		else if (valueWithoutString instanceof ESimpleValueWithoutString) valueWithoutString.compileSimpleValueWithoutString
	}
	
	def compileComposedValue(EComposedValue composedValue){
		if (composedValue instanceof EList) return composedValue.compileList
		else if (composedValue instanceof EDictionary) return composedValue.compileDictionary
	}
	
	def compileDictionary(EDictionary dictionary){
		var dictionaryString = '{'
		for (dictionary_pair : dictionary.dictionary_pairs){
			dictionaryString = dictionaryString.concat(dictionary_pair.name).concat(': ').concat(compileValuePassed(dictionary_pair.value).toString()).concat(', ')
		}
		dictionaryString = dictionaryString.substring(0, dictionaryString.length() - 2)
		dictionaryString = dictionaryString.concat('}')
		return dictionaryString
	}
	
	def compileSimpleValue(ESimpleValue simpleValue){
		if (simpleValue.simple_value_without_string !== null) return compileSimpleValueWithoutString(simpleValue.simple_value_without_string)
		else return "\'".concat(simpleValue.simple_value_string).concat("\'")
	}
	
	def compileSimpleValueWithoutString(ESimpleValueWithoutString simpleValueWithoutString){
		return simpleValueWithoutString.simple_value
	}

}
