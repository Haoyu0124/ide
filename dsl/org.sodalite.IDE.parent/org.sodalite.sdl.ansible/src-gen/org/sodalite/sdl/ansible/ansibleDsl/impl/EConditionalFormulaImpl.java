/**
 * generated by Xtext 2.23.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.EConditionalExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EConditionalFormula;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EConditional Formula</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EConditionalFormulaImpl#getLeft_expression <em>Left expression</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EConditionalFormulaImpl#getAnd_or <em>And or</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EConditionalFormulaImpl#getRight_expression <em>Right expression</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EConditionalFormulaImpl#getNegated_expression <em>Negated expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EConditionalFormulaImpl extends MinimalEObjectImpl.Container implements EConditionalFormula
{
  /**
   * The cached value of the '{@link #getLeft_expression() <em>Left expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft_expression()
   * @generated
   * @ordered
   */
  protected EConditionalExpression left_expression;

  /**
   * The default value of the '{@link #getAnd_or() <em>And or</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnd_or()
   * @generated
   * @ordered
   */
  protected static final String AND_OR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAnd_or() <em>And or</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnd_or()
   * @generated
   * @ordered
   */
  protected String and_or = AND_OR_EDEFAULT;

  /**
   * The cached value of the '{@link #getRight_expression() <em>Right expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight_expression()
   * @generated
   * @ordered
   */
  protected EConditionalExpression right_expression;

  /**
   * The cached value of the '{@link #getNegated_expression() <em>Negated expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNegated_expression()
   * @generated
   * @ordered
   */
  protected EConditionalExpression negated_expression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EConditionalFormulaImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnsibleDslPackage.Literals.ECONDITIONAL_FORMULA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EConditionalExpression getLeft_expression()
  {
    return left_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeft_expression(EConditionalExpression newLeft_expression, NotificationChain msgs)
  {
    EConditionalExpression oldLeft_expression = left_expression;
    left_expression = newLeft_expression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ECONDITIONAL_FORMULA__LEFT_EXPRESSION, oldLeft_expression, newLeft_expression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLeft_expression(EConditionalExpression newLeft_expression)
  {
    if (newLeft_expression != left_expression)
    {
      NotificationChain msgs = null;
      if (left_expression != null)
        msgs = ((InternalEObject)left_expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ECONDITIONAL_FORMULA__LEFT_EXPRESSION, null, msgs);
      if (newLeft_expression != null)
        msgs = ((InternalEObject)newLeft_expression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ECONDITIONAL_FORMULA__LEFT_EXPRESSION, null, msgs);
      msgs = basicSetLeft_expression(newLeft_expression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ECONDITIONAL_FORMULA__LEFT_EXPRESSION, newLeft_expression, newLeft_expression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAnd_or()
  {
    return and_or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAnd_or(String newAnd_or)
  {
    String oldAnd_or = and_or;
    and_or = newAnd_or;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ECONDITIONAL_FORMULA__AND_OR, oldAnd_or, and_or));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EConditionalExpression getRight_expression()
  {
    return right_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRight_expression(EConditionalExpression newRight_expression, NotificationChain msgs)
  {
    EConditionalExpression oldRight_expression = right_expression;
    right_expression = newRight_expression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ECONDITIONAL_FORMULA__RIGHT_EXPRESSION, oldRight_expression, newRight_expression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRight_expression(EConditionalExpression newRight_expression)
  {
    if (newRight_expression != right_expression)
    {
      NotificationChain msgs = null;
      if (right_expression != null)
        msgs = ((InternalEObject)right_expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ECONDITIONAL_FORMULA__RIGHT_EXPRESSION, null, msgs);
      if (newRight_expression != null)
        msgs = ((InternalEObject)newRight_expression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ECONDITIONAL_FORMULA__RIGHT_EXPRESSION, null, msgs);
      msgs = basicSetRight_expression(newRight_expression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ECONDITIONAL_FORMULA__RIGHT_EXPRESSION, newRight_expression, newRight_expression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EConditionalExpression getNegated_expression()
  {
    return negated_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNegated_expression(EConditionalExpression newNegated_expression, NotificationChain msgs)
  {
    EConditionalExpression oldNegated_expression = negated_expression;
    negated_expression = newNegated_expression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ECONDITIONAL_FORMULA__NEGATED_EXPRESSION, oldNegated_expression, newNegated_expression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNegated_expression(EConditionalExpression newNegated_expression)
  {
    if (newNegated_expression != negated_expression)
    {
      NotificationChain msgs = null;
      if (negated_expression != null)
        msgs = ((InternalEObject)negated_expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ECONDITIONAL_FORMULA__NEGATED_EXPRESSION, null, msgs);
      if (newNegated_expression != null)
        msgs = ((InternalEObject)newNegated_expression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ECONDITIONAL_FORMULA__NEGATED_EXPRESSION, null, msgs);
      msgs = basicSetNegated_expression(newNegated_expression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ECONDITIONAL_FORMULA__NEGATED_EXPRESSION, newNegated_expression, newNegated_expression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ECONDITIONAL_FORMULA__LEFT_EXPRESSION:
        return basicSetLeft_expression(null, msgs);
      case AnsibleDslPackage.ECONDITIONAL_FORMULA__RIGHT_EXPRESSION:
        return basicSetRight_expression(null, msgs);
      case AnsibleDslPackage.ECONDITIONAL_FORMULA__NEGATED_EXPRESSION:
        return basicSetNegated_expression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ECONDITIONAL_FORMULA__LEFT_EXPRESSION:
        return getLeft_expression();
      case AnsibleDslPackage.ECONDITIONAL_FORMULA__AND_OR:
        return getAnd_or();
      case AnsibleDslPackage.ECONDITIONAL_FORMULA__RIGHT_EXPRESSION:
        return getRight_expression();
      case AnsibleDslPackage.ECONDITIONAL_FORMULA__NEGATED_EXPRESSION:
        return getNegated_expression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ECONDITIONAL_FORMULA__LEFT_EXPRESSION:
        setLeft_expression((EConditionalExpression)newValue);
        return;
      case AnsibleDslPackage.ECONDITIONAL_FORMULA__AND_OR:
        setAnd_or((String)newValue);
        return;
      case AnsibleDslPackage.ECONDITIONAL_FORMULA__RIGHT_EXPRESSION:
        setRight_expression((EConditionalExpression)newValue);
        return;
      case AnsibleDslPackage.ECONDITIONAL_FORMULA__NEGATED_EXPRESSION:
        setNegated_expression((EConditionalExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ECONDITIONAL_FORMULA__LEFT_EXPRESSION:
        setLeft_expression((EConditionalExpression)null);
        return;
      case AnsibleDslPackage.ECONDITIONAL_FORMULA__AND_OR:
        setAnd_or(AND_OR_EDEFAULT);
        return;
      case AnsibleDslPackage.ECONDITIONAL_FORMULA__RIGHT_EXPRESSION:
        setRight_expression((EConditionalExpression)null);
        return;
      case AnsibleDslPackage.ECONDITIONAL_FORMULA__NEGATED_EXPRESSION:
        setNegated_expression((EConditionalExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ECONDITIONAL_FORMULA__LEFT_EXPRESSION:
        return left_expression != null;
      case AnsibleDslPackage.ECONDITIONAL_FORMULA__AND_OR:
        return AND_OR_EDEFAULT == null ? and_or != null : !AND_OR_EDEFAULT.equals(and_or);
      case AnsibleDslPackage.ECONDITIONAL_FORMULA__RIGHT_EXPRESSION:
        return right_expression != null;
      case AnsibleDslPackage.ECONDITIONAL_FORMULA__NEGATED_EXPRESSION:
        return negated_expression != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (and_or: ");
    result.append(and_or);
    result.append(')');
    return result.toString();
  }

} //EConditionalFormulaImpl
