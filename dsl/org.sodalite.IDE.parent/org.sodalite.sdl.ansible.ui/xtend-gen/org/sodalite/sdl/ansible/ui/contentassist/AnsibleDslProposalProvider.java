/**
 * generated by Xtext 2.23.0
 */
package org.sodalite.sdl.ansible.ui.contentassist;

import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.sodalite.sdl.ansible.ansibleDsl.ERole;
import org.sodalite.sdl.ansible.ansibleDsl.impl.EDeclaredVariableImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.EPlayImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.ERoleCallsImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.ERoleImpl;
import org.sodalite.sdl.ansible.ui.contentassist.AbstractAnsibleDslProposalProvider;

/**
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist
 * on how to customize the content assistant.
 */
@SuppressWarnings("all")
public class AnsibleDslProposalProvider extends AbstractAnsibleDslProposalProvider {
  @Override
  public void complete_BOOLEAN(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    acceptor.accept(this.createCompletionProposal("no", context));
    acceptor.accept(this.createCompletionProposal("yes", context));
  }
  
  @Override
  public void complete_NULL(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    acceptor.accept(this.createCompletionProposal("Null", context));
  }
  
  @Override
  public void completeEFilteredVariable_Variable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    final EPlayImpl rootPlay = EcoreUtil2.<EPlayImpl>getContainerOfType(model, EPlayImpl.class);
    if ((rootPlay != null)) {
      final List<EDeclaredVariableImpl> candidates = EcoreUtil2.<EDeclaredVariableImpl>getAllContentsOfType(rootPlay, EDeclaredVariableImpl.class);
      final List<ERoleCallsImpl> roleCalls = EcoreUtil2.<ERoleCallsImpl>getAllContentsOfType(rootPlay, ERoleCallsImpl.class);
      for (final ERoleCallsImpl roleCall : roleCalls) {
        EList<ERole> _roles = roleCall.getRoles();
        for (final ERole role : _roles) {
          {
            final List<EDeclaredVariableImpl> candidatesRole = EcoreUtil2.<EDeclaredVariableImpl>getAllContentsOfType(role, EDeclaredVariableImpl.class);
            for (final EDeclaredVariableImpl candidateRole : candidatesRole) {
              candidates.add(candidateRole);
            }
          }
        }
      }
      for (final EDeclaredVariableImpl candidate : candidates) {
        acceptor.accept(this.createCompletionProposal(candidate.getName(), context));
      }
    } else {
      final ERoleImpl rootRole = EcoreUtil2.<ERoleImpl>getContainerOfType(model, ERoleImpl.class);
      final List<EDeclaredVariableImpl> candidates_1 = EcoreUtil2.<EDeclaredVariableImpl>getAllContentsOfType(rootRole, EDeclaredVariableImpl.class);
      for (final EDeclaredVariableImpl candidate_1 : candidates_1) {
        acceptor.accept(this.createCompletionProposal(candidate_1.getName(), context));
      }
    }
  }
}
