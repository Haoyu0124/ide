/**
 * generated by Xtext 2.23.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.ETaskHandler;
import org.sodalite.sdl.ansible.ansibleDsl.ETaskHandlerCommonKeywords;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>ETask Handler</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ETaskHandlerImpl#getTask_handler_common_keywords <em>Task handler common keywords</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ETaskHandlerImpl extends EExecutionImpl implements ETaskHandler
{
  /**
   * The cached value of the '{@link #getTask_handler_common_keywords() <em>Task handler common keywords</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTask_handler_common_keywords()
   * @generated
   * @ordered
   */
  protected ETaskHandlerCommonKeywords task_handler_common_keywords;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ETaskHandlerImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnsibleDslPackage.Literals.ETASK_HANDLER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ETaskHandlerCommonKeywords getTask_handler_common_keywords()
  {
    return task_handler_common_keywords;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTask_handler_common_keywords(ETaskHandlerCommonKeywords newTask_handler_common_keywords, NotificationChain msgs)
  {
    ETaskHandlerCommonKeywords oldTask_handler_common_keywords = task_handler_common_keywords;
    task_handler_common_keywords = newTask_handler_common_keywords;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK_HANDLER__TASK_HANDLER_COMMON_KEYWORDS, oldTask_handler_common_keywords, newTask_handler_common_keywords);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTask_handler_common_keywords(ETaskHandlerCommonKeywords newTask_handler_common_keywords)
  {
    if (newTask_handler_common_keywords != task_handler_common_keywords)
    {
      NotificationChain msgs = null;
      if (task_handler_common_keywords != null)
        msgs = ((InternalEObject)task_handler_common_keywords).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK_HANDLER__TASK_HANDLER_COMMON_KEYWORDS, null, msgs);
      if (newTask_handler_common_keywords != null)
        msgs = ((InternalEObject)newTask_handler_common_keywords).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ETASK_HANDLER__TASK_HANDLER_COMMON_KEYWORDS, null, msgs);
      msgs = basicSetTask_handler_common_keywords(newTask_handler_common_keywords, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ETASK_HANDLER__TASK_HANDLER_COMMON_KEYWORDS, newTask_handler_common_keywords, newTask_handler_common_keywords));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ETASK_HANDLER__TASK_HANDLER_COMMON_KEYWORDS:
        return basicSetTask_handler_common_keywords(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ETASK_HANDLER__TASK_HANDLER_COMMON_KEYWORDS:
        return getTask_handler_common_keywords();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ETASK_HANDLER__TASK_HANDLER_COMMON_KEYWORDS:
        setTask_handler_common_keywords((ETaskHandlerCommonKeywords)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ETASK_HANDLER__TASK_HANDLER_COMMON_KEYWORDS:
        setTask_handler_common_keywords((ETaskHandlerCommonKeywords)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ETASK_HANDLER__TASK_HANDLER_COMMON_KEYWORDS:
        return task_handler_common_keywords != null;
    }
    return super.eIsSet(featureID);
  }

} //ETaskHandlerImpl
