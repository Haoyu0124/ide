/**
 * generated by Xtext 2.17.1
 */
package org.sodalite.dsl.rM.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.sodalite.dsl.rM.ECapabilityType;
import org.sodalite.dsl.rM.ENodeType;
import org.sodalite.dsl.rM.ERelationshipType;
import org.sodalite.dsl.rM.ERequirementDefinition;
import org.sodalite.dsl.rM.RMPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>ERequirement Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.dsl.rM.impl.ERequirementDefinitionImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.sodalite.dsl.rM.impl.ERequirementDefinitionImpl#getCapability <em>Capability</em>}</li>
 *   <li>{@link org.sodalite.dsl.rM.impl.ERequirementDefinitionImpl#getNode <em>Node</em>}</li>
 *   <li>{@link org.sodalite.dsl.rM.impl.ERequirementDefinitionImpl#getRelationship <em>Relationship</em>}</li>
 *   <li>{@link org.sodalite.dsl.rM.impl.ERequirementDefinitionImpl#getStart <em>Start</em>}</li>
 *   <li>{@link org.sodalite.dsl.rM.impl.ERequirementDefinitionImpl#getEnd <em>End</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ERequirementDefinitionImpl extends MinimalEObjectImpl.Container implements ERequirementDefinition
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getCapability() <em>Capability</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCapability()
   * @generated
   * @ordered
   */
  protected ECapabilityType capability;

  /**
   * The cached value of the '{@link #getNode() <em>Node</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNode()
   * @generated
   * @ordered
   */
  protected ENodeType node;

  /**
   * The cached value of the '{@link #getRelationship() <em>Relationship</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRelationship()
   * @generated
   * @ordered
   */
  protected ERelationshipType relationship;

  /**
   * The default value of the '{@link #getStart() <em>Start</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStart()
   * @generated
   * @ordered
   */
  protected static final String START_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getStart() <em>Start</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStart()
   * @generated
   * @ordered
   */
  protected String start = START_EDEFAULT;

  /**
   * The default value of the '{@link #getEnd() <em>End</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnd()
   * @generated
   * @ordered
   */
  protected static final String END_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEnd() <em>End</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnd()
   * @generated
   * @ordered
   */
  protected String end = END_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ERequirementDefinitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RMPackage.Literals.EREQUIREMENT_DEFINITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RMPackage.EREQUIREMENT_DEFINITION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ECapabilityType getCapability()
  {
    if (capability != null && capability.eIsProxy())
    {
      InternalEObject oldCapability = (InternalEObject)capability;
      capability = (ECapabilityType)eResolveProxy(oldCapability);
      if (capability != oldCapability)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RMPackage.EREQUIREMENT_DEFINITION__CAPABILITY, oldCapability, capability));
      }
    }
    return capability;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ECapabilityType basicGetCapability()
  {
    return capability;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCapability(ECapabilityType newCapability)
  {
    ECapabilityType oldCapability = capability;
    capability = newCapability;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RMPackage.EREQUIREMENT_DEFINITION__CAPABILITY, oldCapability, capability));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ENodeType getNode()
  {
    if (node != null && node.eIsProxy())
    {
      InternalEObject oldNode = (InternalEObject)node;
      node = (ENodeType)eResolveProxy(oldNode);
      if (node != oldNode)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RMPackage.EREQUIREMENT_DEFINITION__NODE, oldNode, node));
      }
    }
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ENodeType basicGetNode()
  {
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNode(ENodeType newNode)
  {
    ENodeType oldNode = node;
    node = newNode;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RMPackage.EREQUIREMENT_DEFINITION__NODE, oldNode, node));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ERelationshipType getRelationship()
  {
    if (relationship != null && relationship.eIsProxy())
    {
      InternalEObject oldRelationship = (InternalEObject)relationship;
      relationship = (ERelationshipType)eResolveProxy(oldRelationship);
      if (relationship != oldRelationship)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RMPackage.EREQUIREMENT_DEFINITION__RELATIONSHIP, oldRelationship, relationship));
      }
    }
    return relationship;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ERelationshipType basicGetRelationship()
  {
    return relationship;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRelationship(ERelationshipType newRelationship)
  {
    ERelationshipType oldRelationship = relationship;
    relationship = newRelationship;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RMPackage.EREQUIREMENT_DEFINITION__RELATIONSHIP, oldRelationship, relationship));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getStart()
  {
    return start;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStart(String newStart)
  {
    String oldStart = start;
    start = newStart;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RMPackage.EREQUIREMENT_DEFINITION__START, oldStart, start));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getEnd()
  {
    return end;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEnd(String newEnd)
  {
    String oldEnd = end;
    end = newEnd;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RMPackage.EREQUIREMENT_DEFINITION__END, oldEnd, end));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RMPackage.EREQUIREMENT_DEFINITION__NAME:
        return getName();
      case RMPackage.EREQUIREMENT_DEFINITION__CAPABILITY:
        if (resolve) return getCapability();
        return basicGetCapability();
      case RMPackage.EREQUIREMENT_DEFINITION__NODE:
        if (resolve) return getNode();
        return basicGetNode();
      case RMPackage.EREQUIREMENT_DEFINITION__RELATIONSHIP:
        if (resolve) return getRelationship();
        return basicGetRelationship();
      case RMPackage.EREQUIREMENT_DEFINITION__START:
        return getStart();
      case RMPackage.EREQUIREMENT_DEFINITION__END:
        return getEnd();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RMPackage.EREQUIREMENT_DEFINITION__NAME:
        setName((String)newValue);
        return;
      case RMPackage.EREQUIREMENT_DEFINITION__CAPABILITY:
        setCapability((ECapabilityType)newValue);
        return;
      case RMPackage.EREQUIREMENT_DEFINITION__NODE:
        setNode((ENodeType)newValue);
        return;
      case RMPackage.EREQUIREMENT_DEFINITION__RELATIONSHIP:
        setRelationship((ERelationshipType)newValue);
        return;
      case RMPackage.EREQUIREMENT_DEFINITION__START:
        setStart((String)newValue);
        return;
      case RMPackage.EREQUIREMENT_DEFINITION__END:
        setEnd((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RMPackage.EREQUIREMENT_DEFINITION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case RMPackage.EREQUIREMENT_DEFINITION__CAPABILITY:
        setCapability((ECapabilityType)null);
        return;
      case RMPackage.EREQUIREMENT_DEFINITION__NODE:
        setNode((ENodeType)null);
        return;
      case RMPackage.EREQUIREMENT_DEFINITION__RELATIONSHIP:
        setRelationship((ERelationshipType)null);
        return;
      case RMPackage.EREQUIREMENT_DEFINITION__START:
        setStart(START_EDEFAULT);
        return;
      case RMPackage.EREQUIREMENT_DEFINITION__END:
        setEnd(END_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RMPackage.EREQUIREMENT_DEFINITION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case RMPackage.EREQUIREMENT_DEFINITION__CAPABILITY:
        return capability != null;
      case RMPackage.EREQUIREMENT_DEFINITION__NODE:
        return node != null;
      case RMPackage.EREQUIREMENT_DEFINITION__RELATIONSHIP:
        return relationship != null;
      case RMPackage.EREQUIREMENT_DEFINITION__START:
        return START_EDEFAULT == null ? start != null : !START_EDEFAULT.equals(start);
      case RMPackage.EREQUIREMENT_DEFINITION__END:
        return END_EDEFAULT == null ? end != null : !END_EDEFAULT.equals(end);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", start: ");
    result.append(start);
    result.append(", end: ");
    result.append(end);
    result.append(')');
    return result.toString();
  }

} //ERequirementDefinitionImpl
