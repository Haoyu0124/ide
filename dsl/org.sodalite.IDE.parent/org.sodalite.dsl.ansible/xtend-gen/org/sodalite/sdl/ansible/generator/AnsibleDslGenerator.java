/**
 * generated by Xtext 2.23.0
 */
package org.sodalite.sdl.ansible.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.ArrayList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.sodalite.sdl.ansible.ansibleDsl.EAndExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EAsynchronousSettings;
import org.sodalite.sdl.ansible.ansibleDsl.EBase;
import org.sodalite.sdl.ansible.ansibleDsl.EBlock;
import org.sodalite.sdl.ansible.ansibleDsl.EBlockErrorHandling;
import org.sodalite.sdl.ansible.ansibleDsl.EBlockTask;
import org.sodalite.sdl.ansible.ansibleDsl.EComposedValue;
import org.sodalite.sdl.ansible.ansibleDsl.EConnection;
import org.sodalite.sdl.ansible.ansibleDsl.EDelegation;
import org.sodalite.sdl.ansible.ansibleDsl.EDictionary;
import org.sodalite.sdl.ansible.ansibleDsl.EDictionaryPair;
import org.sodalite.sdl.ansible.ansibleDsl.EDictionaryPairReference;
import org.sodalite.sdl.ansible.ansibleDsl.EExecution;
import org.sodalite.sdl.ansible.ansibleDsl.EExecutionExeSettings;
import org.sodalite.sdl.ansible.ansibleDsl.EFactGathered;
import org.sodalite.sdl.ansible.ansibleDsl.EFactsSettings;
import org.sodalite.sdl.ansible.ansibleDsl.EFilteredExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EFunctionCall;
import org.sodalite.sdl.ansible.ansibleDsl.EHandler;
import org.sodalite.sdl.ansible.ansibleDsl.EIfExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EInputVariableReference;
import org.sodalite.sdl.ansible.ansibleDsl.EIsExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EItem;
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaExpressionAndString;
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaExpressionEvaluation;
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaExpressionEvaluationWithoutBrackets;
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaExpressionOrString;
import org.sodalite.sdl.ansible.ansibleDsl.ELoop;
import org.sodalite.sdl.ansible.ansibleDsl.ELoopControl;
import org.sodalite.sdl.ansible.ansibleDsl.ELoopOverList;
import org.sodalite.sdl.ansible.ansibleDsl.EModuleCall;
import org.sodalite.sdl.ansible.ansibleDsl.ENotifiable;
import org.sodalite.sdl.ansible.ansibleDsl.ENotifiedHandler;
import org.sodalite.sdl.ansible.ansibleDsl.ENotifiedTopic;
import org.sodalite.sdl.ansible.ansibleDsl.EOperation;
import org.sodalite.sdl.ansible.ansibleDsl.EOrExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EParameter;
import org.sodalite.sdl.ansible.ansibleDsl.EParenthesisedExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EPlay;
import org.sodalite.sdl.ansible.ansibleDsl.EPlayErrorHandling;
import org.sodalite.sdl.ansible.ansibleDsl.EPlayExeSettings;
import org.sodalite.sdl.ansible.ansibleDsl.EPlaybook;
import org.sodalite.sdl.ansible.ansibleDsl.EPrivilageEscalation;
import org.sodalite.sdl.ansible.ansibleDsl.ERegisterVariable;
import org.sodalite.sdl.ansible.ansibleDsl.ERegisterVariableReference;
import org.sodalite.sdl.ansible.ansibleDsl.ERoleInclusion;
import org.sodalite.sdl.ansible.ansibleDsl.ERoleInclusions;
import org.sodalite.sdl.ansible.ansibleDsl.ESimpleValue;
import org.sodalite.sdl.ansible.ansibleDsl.ESimpleValueWithoutString;
import org.sodalite.sdl.ansible.ansibleDsl.ETask;
import org.sodalite.sdl.ansible.ansibleDsl.ETaskHandler;
import org.sodalite.sdl.ansible.ansibleDsl.ETaskHandlerErrorHandling;
import org.sodalite.sdl.ansible.ansibleDsl.ETruthExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EUntil;
import org.sodalite.sdl.ansible.ansibleDsl.EValidationMode;
import org.sodalite.sdl.ansible.ansibleDsl.EValue;
import org.sodalite.sdl.ansible.ansibleDsl.EValuePassed;
import org.sodalite.sdl.ansible.ansibleDsl.EValuePassedToJinjaExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EValueWithoutString;
import org.sodalite.sdl.ansible.ansibleDsl.EVariableDeclaration;
import org.sodalite.sdl.ansible.ansibleDsl.EVariableDeclarationVariableReference;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class AnsibleDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<EPlaybook> _filter = Iterables.<EPlaybook>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), EPlaybook.class);
    for (final EPlaybook e : _filter) {
      String _name = e.getName();
      String _plus = (_name + ".yaml");
      fsa.generateFile(_plus, this.compilePlays(e));
    }
  }
  
  public CharSequence compilePlays(final EPlaybook playbook) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<EPlay> _plays = playbook.getPlays();
      for(final EPlay play : _plays) {
        CharSequence _compilePlay = this.compilePlay(play, "  ");
        _builder.append(_compilePlay);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compilePlay(final EPlay play, final String space) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _name = play.getName();
      boolean _tripleNotEquals = (_name != null);
      if (_tripleNotEquals) {
        _builder.append("- name: ");
        String _name_1 = play.getName();
        _builder.append(_name_1);
        _builder.newLineIfNotEmpty();
        _builder.append(space);
        _builder.append("hosts: all");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("- hosts: all");
        _builder.newLine();
      }
    }
    CharSequence _compileBaseCommonKeywords = this.compileBaseCommonKeywords(play, space);
    _builder.append(_compileBaseCommonKeywords);
    _builder.newLineIfNotEmpty();
    {
      EPlayExeSettings _play_exe_settings = play.getPlay_exe_settings();
      boolean _tripleNotEquals_1 = (_play_exe_settings != null);
      if (_tripleNotEquals_1) {
        CharSequence _compilePlayExeSettings = this.compilePlayExeSettings(play.getPlay_exe_settings(), space);
        _builder.append(_compilePlayExeSettings);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EPlayErrorHandling _error_handling = play.getError_handling();
      boolean _tripleNotEquals_2 = (_error_handling != null);
      if (_tripleNotEquals_2) {
        CharSequence _compilePlayErrorHandling = this.compilePlayErrorHandling(play.getError_handling(), space);
        _builder.append(_compilePlayErrorHandling);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EFactsSettings _facts_settings = play.getFacts_settings();
      boolean _tripleNotEquals_3 = (_facts_settings != null);
      if (_tripleNotEquals_3) {
        CharSequence _compileFactsSettings = this.compileFactsSettings(play.getFacts_settings(), space);
        _builder.append(_compileFactsSettings);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      org.sodalite.sdl.ansible.ansibleDsl.EList _vars_files = play.getVars_files();
      boolean _tripleNotEquals_4 = (_vars_files != null);
      if (_tripleNotEquals_4) {
        _builder.append(space);
        _builder.append("vars_files: ");
        ArrayList<Object> _compileList = this.compileList(play.getVars_files());
        _builder.append(_compileList);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      org.sodalite.sdl.ansible.ansibleDsl.EList _vars_prompt = play.getVars_prompt();
      boolean _tripleNotEquals_5 = (_vars_prompt != null);
      if (_tripleNotEquals_5) {
        _builder.append(space);
        _builder.append("vars_prompt: ");
        ArrayList<Object> _compileList_1 = this.compileList(play.getVars_prompt());
        _builder.append(_compileList_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _force_handlers = play.getForce_handlers();
      boolean _tripleNotEquals_6 = (_force_handlers != null);
      if (_tripleNotEquals_6) {
        _builder.append(space);
        _builder.append("force_handlers: ");
        String _force_handlers_1 = play.getForce_handlers();
        _builder.append(_force_handlers_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      ERoleInclusions _roles_inclusions = play.getRoles_inclusions();
      boolean _tripleNotEquals_7 = (_roles_inclusions != null);
      if (_tripleNotEquals_7) {
        _builder.append(space);
        _builder.append("roles:");
        _builder.newLineIfNotEmpty();
        {
          EList<ERoleInclusion> _roles = play.getRoles_inclusions().getRoles();
          for(final ERoleInclusion role : _roles) {
            CharSequence _compileRoleInclusion = this.compileRoleInclusion(role, space.concat("  "));
            _builder.append(_compileRoleInclusion);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      int _size = play.getPre_tasks_list().size();
      boolean _tripleNotEquals_8 = (_size != 0);
      if (_tripleNotEquals_8) {
        _builder.newLine();
        _builder.append(space);
        _builder.append("pre_tasks:");
        _builder.newLineIfNotEmpty();
        {
          EList<EBlockTask> _pre_tasks_list = play.getPre_tasks_list();
          for(final EBlockTask blockTask : _pre_tasks_list) {
            _builder.newLine();
            CharSequence _compileBlockTask = this.compileBlockTask(blockTask, space.concat("  "));
            _builder.append(_compileBlockTask);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      int _size_1 = play.getTasks_list().size();
      boolean _tripleNotEquals_9 = (_size_1 != 0);
      if (_tripleNotEquals_9) {
        _builder.newLine();
        _builder.append(space);
        _builder.append("tasks:");
        _builder.newLineIfNotEmpty();
        {
          EList<EBlockTask> _tasks_list = play.getTasks_list();
          for(final EBlockTask blockTask_1 : _tasks_list) {
            _builder.newLine();
            CharSequence _compileBlockTask_1 = this.compileBlockTask(blockTask_1, space.concat("  "));
            _builder.append(_compileBlockTask_1);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      int _size_2 = play.getPost_tasks_list().size();
      boolean _tripleNotEquals_10 = (_size_2 != 0);
      if (_tripleNotEquals_10) {
        _builder.newLine();
        _builder.append(space);
        _builder.append("post_tasks:");
        _builder.newLineIfNotEmpty();
        {
          EList<EBlockTask> _post_tasks_list = play.getPost_tasks_list();
          for(final EBlockTask blockTask_2 : _post_tasks_list) {
            _builder.newLine();
            CharSequence _compileBlockTask_2 = this.compileBlockTask(blockTask_2, space.concat("  "));
            _builder.append(_compileBlockTask_2);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      int _size_3 = play.getHandlers().size();
      boolean _tripleNotEquals_11 = (_size_3 != 0);
      if (_tripleNotEquals_11) {
        _builder.newLine();
        _builder.append(space);
        _builder.append("handlers:");
        _builder.newLineIfNotEmpty();
        {
          EList<EHandler> _handlers = play.getHandlers();
          for(final EHandler handler : _handlers) {
            _builder.newLine();
            CharSequence _compileTaskHandler = this.compileTaskHandler(handler, space.concat("  "));
            _builder.append(_compileTaskHandler);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compileExecution(final EExecution execution, final String space) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((execution instanceof EBlock)) {
        CharSequence _compileBlock = this.compileBlock(((EBlock)execution), space);
        _builder.append(_compileBlock);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((execution instanceof ETaskHandler)) {
        CharSequence _compileTaskHandler = this.compileTaskHandler(((ETaskHandler)execution), space);
        _builder.append(_compileTaskHandler);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((execution instanceof ERoleInclusion)) {
        CharSequence _compileRoleInclusion = this.compileRoleInclusion(((ERoleInclusion)execution), space);
        _builder.append(_compileRoleInclusion);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileRoleInclusion(final ERoleInclusion roleInclusion, final String space) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(space);
    _builder.append("- role: ");
    String _name = roleInclusion.getName();
    _builder.append(_name);
    _builder.newLineIfNotEmpty();
    CharSequence _compileBaseCommonKeywords = this.compileBaseCommonKeywords(roleInclusion, space.concat("  "));
    _builder.append(_compileBaseCommonKeywords);
    _builder.newLineIfNotEmpty();
    CharSequence _compileExecutionCommonKeywords = this.compileExecutionCommonKeywords(roleInclusion, space.concat("  "));
    _builder.append(_compileExecutionCommonKeywords);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileBaseCommonKeywords(final EBase base, final String space) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EPrivilageEscalation _privilage_escalation = base.getPrivilage_escalation();
      boolean _tripleNotEquals = (_privilage_escalation != null);
      if (_tripleNotEquals) {
        {
          String _become = base.getPrivilage_escalation().getBecome();
          boolean _tripleNotEquals_1 = (_become != null);
          if (_tripleNotEquals_1) {
            _builder.append(space);
            _builder.append("become: ");
            String _become_1 = base.getPrivilage_escalation().getBecome();
            _builder.append(_become_1);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _become_exe = base.getPrivilage_escalation().getBecome_exe();
          boolean _tripleNotEquals_2 = (_become_exe != null);
          if (_tripleNotEquals_2) {
            _builder.append(space);
            _builder.append("become_exe: ");
            String _become_exe_1 = base.getPrivilage_escalation().getBecome_exe();
            _builder.append(_become_exe_1);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _become_flags = base.getPrivilage_escalation().getBecome_flags();
          boolean _tripleNotEquals_3 = (_become_flags != null);
          if (_tripleNotEquals_3) {
            _builder.append(space);
            _builder.append("become_flags: ");
            String _become_flags_1 = base.getPrivilage_escalation().getBecome_flags();
            _builder.append(_become_flags_1);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _become_method = base.getPrivilage_escalation().getBecome_method();
          boolean _tripleNotEquals_4 = (_become_method != null);
          if (_tripleNotEquals_4) {
            _builder.append(space);
            _builder.append("become_method: ");
            String _become_method_1 = base.getPrivilage_escalation().getBecome_method();
            _builder.append(_become_method_1);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _become_user = base.getPrivilage_escalation().getBecome_user();
          boolean _tripleNotEquals_5 = (_become_user != null);
          if (_tripleNotEquals_5) {
            _builder.append(space);
            _builder.append("become_user: ");
            String _become_user_1 = base.getPrivilage_escalation().getBecome_user();
            _builder.append(_become_user_1);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EValidationMode _validation_mode = base.getValidation_mode();
      boolean _tripleNotEquals_6 = (_validation_mode != null);
      if (_tripleNotEquals_6) {
        {
          String _check_mode = base.getValidation_mode().getCheck_mode();
          boolean _tripleNotEquals_7 = (_check_mode != null);
          if (_tripleNotEquals_7) {
            _builder.append(space);
            _builder.append("check_moode: ");
            String _check_mode_1 = base.getValidation_mode().getCheck_mode();
            _builder.append(_check_mode_1);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _diff = base.getValidation_mode().getDiff();
          boolean _tripleNotEquals_8 = (_diff != null);
          if (_tripleNotEquals_8) {
            _builder.append(space);
            _builder.append("diff: ");
            String _diff_1 = base.getValidation_mode().getDiff();
            _builder.append(_diff_1);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EConnection _connection = base.getConnection();
      boolean _tripleNotEquals_9 = (_connection != null);
      if (_tripleNotEquals_9) {
        {
          String _connection_1 = base.getConnection().getConnection();
          boolean _tripleNotEquals_10 = (_connection_1 != null);
          if (_tripleNotEquals_10) {
            _builder.append(space);
            _builder.append("connection: ");
            String _connection_2 = base.getConnection().getConnection();
            _builder.append(_connection_2);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _string = base.getConnection().getPort().toString();
          boolean _tripleNotEquals_11 = (_string != null);
          if (_tripleNotEquals_11) {
            _builder.append(space);
            _builder.append("port: ");
            String _port = base.getConnection().getPort();
            _builder.append(_port);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _remote_user = base.getConnection().getRemote_user();
          boolean _tripleNotEquals_12 = (_remote_user != null);
          if (_tripleNotEquals_12) {
            _builder.append(space);
            _builder.append("remote_user: ");
            String _remote_user_1 = base.getConnection().getRemote_user();
            _builder.append(_remote_user_1);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      String _no_log = base.getNo_log();
      boolean _tripleNotEquals_13 = (_no_log != null);
      if (_tripleNotEquals_13) {
        _builder.append(space);
        _builder.append("no_log: ");
        String _no_log_1 = base.getNo_log();
        _builder.append(_no_log_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _debugger = base.getDebugger();
      boolean _tripleNotEquals_14 = (_debugger != null);
      if (_tripleNotEquals_14) {
        _builder.append(space);
        _builder.append("debugger: ");
        String _debugger_1 = base.getDebugger();
        _builder.append(_debugger_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      org.sodalite.sdl.ansible.ansibleDsl.EList _module_defaults = base.getModule_defaults();
      boolean _tripleNotEquals_15 = (_module_defaults != null);
      if (_tripleNotEquals_15) {
        _builder.append(space);
        _builder.append("module_defaults: ");
        ArrayList<Object> _compileList = this.compileList(base.getModule_defaults());
        _builder.append(_compileList);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      org.sodalite.sdl.ansible.ansibleDsl.EList _environment = base.getEnvironment();
      boolean _tripleNotEquals_16 = (_environment != null);
      if (_tripleNotEquals_16) {
        _builder.append(space);
        _builder.append("environment: ");
        ArrayList<Object> _compileList_1 = this.compileList(base.getEnvironment());
        _builder.append(_compileList_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      org.sodalite.sdl.ansible.ansibleDsl.EList _collections = base.getCollections();
      boolean _tripleNotEquals_17 = (_collections != null);
      if (_tripleNotEquals_17) {
        _builder.append(space);
        _builder.append("collections: ");
        ArrayList<Object> _compileList_2 = this.compileList(base.getCollections());
        _builder.append(_compileList_2);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      org.sodalite.sdl.ansible.ansibleDsl.EList _tags = base.getTags();
      boolean _tripleNotEquals_18 = (_tags != null);
      if (_tripleNotEquals_18) {
        _builder.append(space);
        _builder.append("tags: ");
        ArrayList<Object> _compileList_3 = this.compileList(base.getTags());
        _builder.append(_compileList_3);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      int _size = base.getVariable_declarations().size();
      boolean _tripleNotEquals_19 = (_size != 0);
      if (_tripleNotEquals_19) {
        _builder.append(space);
        _builder.append("vars: ");
        String _compileVariableDeclarations = this.compileVariableDeclarations(base);
        _builder.append(_compileVariableDeclarations);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compilePlayExeSettings(final EPlayExeSettings playExeSettings, final String space) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _strategy = playExeSettings.getStrategy();
      boolean _tripleNotEquals = (_strategy != null);
      if (_tripleNotEquals) {
        _builder.append(space);
        _builder.append("strategy: ");
        String _strategy_1 = playExeSettings.getStrategy();
        _builder.append(_strategy_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      org.sodalite.sdl.ansible.ansibleDsl.EList _serial_list = playExeSettings.getSerial_list();
      boolean _tripleNotEquals_1 = (_serial_list != null);
      if (_tripleNotEquals_1) {
        _builder.append(space);
        _builder.append("serial: ");
        ArrayList<Object> _compileList = this.compileList(playExeSettings.getSerial_list());
        _builder.append(_compileList);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _order = playExeSettings.getOrder();
      boolean _tripleNotEquals_2 = (_order != null);
      if (_tripleNotEquals_2) {
        _builder.append(space);
        _builder.append("order: ");
        String _order_1 = playExeSettings.getOrder();
        _builder.append(_order_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _throttle = playExeSettings.getThrottle();
      boolean _tripleNotEquals_3 = (_throttle != null);
      if (_tripleNotEquals_3) {
        _builder.append(space);
        _builder.append("throttle: ");
        String _throttle_1 = playExeSettings.getThrottle();
        _builder.append(_throttle_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _run_once = playExeSettings.getRun_once();
      boolean _tripleNotEquals_4 = (_run_once != null);
      if (_tripleNotEquals_4) {
        _builder.append(space);
        _builder.append("run_once: ");
        String _run_once_1 = playExeSettings.getRun_once();
        _builder.append(_run_once_1);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compilePlayErrorHandling(final EPlayErrorHandling playErrorHandling, final String space) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _max_fail_percentage = playErrorHandling.getMax_fail_percentage();
      boolean _tripleNotEquals = (_max_fail_percentage != null);
      if (_tripleNotEquals) {
        _builder.append(space);
        _builder.append("max_fail_percentage: ");
        String _max_fail_percentage_1 = playErrorHandling.getMax_fail_percentage();
        _builder.append(_max_fail_percentage_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _any_errors_fatal = playErrorHandling.getAny_errors_fatal();
      boolean _tripleNotEquals_1 = (_any_errors_fatal != null);
      if (_tripleNotEquals_1) {
        _builder.append(space);
        _builder.append("any_errors_fatal: ");
        String _any_errors_fatal_1 = playErrorHandling.getAny_errors_fatal();
        _builder.append(_any_errors_fatal_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _ignore_errors = playErrorHandling.getIgnore_errors();
      boolean _tripleNotEquals_2 = (_ignore_errors != null);
      if (_tripleNotEquals_2) {
        _builder.append(space);
        _builder.append("ignore_errors: ");
        String _ignore_errors_1 = playErrorHandling.getIgnore_errors();
        _builder.append(_ignore_errors_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _ignore_unreachable = playErrorHandling.getIgnore_unreachable();
      boolean _tripleNotEquals_3 = (_ignore_unreachable != null);
      if (_tripleNotEquals_3) {
        _builder.append(space);
        _builder.append("ignore_unreachable: ");
        String _ignore_unreachable_1 = playErrorHandling.getIgnore_unreachable();
        _builder.append(_ignore_unreachable_1);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileFactsSettings(final EFactsSettings factsSettings, final String space) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _gather_facts = factsSettings.getGather_facts();
      boolean _tripleNotEquals = (_gather_facts != null);
      if (_tripleNotEquals) {
        _builder.append(space);
        _builder.append("gather_facts: ");
        String _gather_facts_1 = factsSettings.getGather_facts();
        _builder.append(_gather_facts_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      org.sodalite.sdl.ansible.ansibleDsl.EList _gather_subset = factsSettings.getGather_subset();
      boolean _tripleNotEquals_1 = (_gather_subset != null);
      if (_tripleNotEquals_1) {
        _builder.append(space);
        _builder.append("gather_subset: ");
        ArrayList<Object> _compileList = this.compileList(factsSettings.getGather_subset());
        _builder.append(_compileList);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _gather_timeout = factsSettings.getGather_timeout();
      boolean _tripleNotEquals_2 = (_gather_timeout != null);
      if (_tripleNotEquals_2) {
        _builder.append(space);
        _builder.append("gather_timeout: ");
        String _gather_timeout_1 = factsSettings.getGather_timeout();
        _builder.append(_gather_timeout_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _fact_path = factsSettings.getFact_path();
      boolean _tripleNotEquals_3 = (_fact_path != null);
      if (_tripleNotEquals_3) {
        _builder.append(space);
        _builder.append("fact_path: ");
        String _fact_path_1 = factsSettings.getFact_path();
        _builder.append(_fact_path_1);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileBlockTask(final EBlockTask blockTask, final String space) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((blockTask instanceof EBlock)) {
        CharSequence _compileBlock = this.compileBlock(((EBlock)blockTask), space);
        _builder.append(_compileBlock);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((blockTask instanceof ETask)) {
        CharSequence _compileTaskHandler = this.compileTaskHandler(((ETaskHandler)blockTask), space);
        _builder.append(_compileTaskHandler);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileBlock(final EBlock block, final String space) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _name = block.getName();
      boolean _tripleNotEquals = (_name != null);
      if (_tripleNotEquals) {
        _builder.append(space);
        _builder.append("- name: ");
        String _name_1 = block.getName();
        _builder.append(_name_1);
        _builder.newLineIfNotEmpty();
        String _concat = space.concat("  ");
        _builder.append(_concat);
        _builder.append("block:");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append(space);
        _builder.append("- block:");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      int _size = block.getTasks().size();
      boolean _tripleNotEquals_1 = (_size != 0);
      if (_tripleNotEquals_1) {
        {
          EList<ETask> _tasks = block.getTasks();
          for(final ETask task : _tasks) {
            CharSequence _compileTaskHandler = this.compileTaskHandler(task, space.concat("  ").concat("  "));
            _builder.append(_compileTaskHandler);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      int _size_1 = block.getRescue_tasks().size();
      boolean _tripleNotEquals_2 = (_size_1 != 0);
      if (_tripleNotEquals_2) {
        String _concat_1 = space.concat("  ");
        _builder.append(_concat_1);
        _builder.append("rescue: ");
        _builder.newLineIfNotEmpty();
        {
          EList<ETask> _rescue_tasks = block.getRescue_tasks();
          for(final ETask task_1 : _rescue_tasks) {
            CharSequence _compileTaskHandler_1 = this.compileTaskHandler(task_1, space.concat("  ").concat("  "));
            _builder.append(_compileTaskHandler_1);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      int _size_2 = block.getAlways_tasks().size();
      boolean _tripleNotEquals_3 = (_size_2 != 0);
      if (_tripleNotEquals_3) {
        String _concat_2 = space.concat("  ");
        _builder.append(_concat_2);
        _builder.append("always: ");
        _builder.newLineIfNotEmpty();
        {
          EList<ETask> _always_tasks = block.getAlways_tasks();
          for(final ETask task_2 : _always_tasks) {
            CharSequence _compileTaskHandler_2 = this.compileTaskHandler(task_2, space.concat("  ").concat("  "));
            _builder.append(_compileTaskHandler_2);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    CharSequence _compileBaseCommonKeywords = this.compileBaseCommonKeywords(block, space.concat("  "));
    _builder.append(_compileBaseCommonKeywords);
    _builder.newLineIfNotEmpty();
    CharSequence _compileExecutionCommonKeywords = this.compileExecutionCommonKeywords(block, space.concat("  "));
    _builder.append(_compileExecutionCommonKeywords);
    _builder.newLineIfNotEmpty();
    {
      EBlockErrorHandling _error_handling = block.getError_handling();
      boolean _tripleNotEquals_4 = (_error_handling != null);
      if (_tripleNotEquals_4) {
        {
          String _any_errors_fatal = block.getError_handling().getAny_errors_fatal();
          boolean _tripleNotEquals_5 = (_any_errors_fatal != null);
          if (_tripleNotEquals_5) {
            String _concat_3 = space.concat("  ");
            _builder.append(_concat_3);
            _builder.append("any_errors_fatal: ");
            String _any_errors_fatal_1 = block.getError_handling().getAny_errors_fatal();
            _builder.append(_any_errors_fatal_1);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _ignore_errors = block.getError_handling().getIgnore_errors();
          boolean _tripleNotEquals_6 = (_ignore_errors != null);
          if (_tripleNotEquals_6) {
            String _concat_4 = space.concat("  ");
            _builder.append(_concat_4);
            _builder.append("ignore_errors: ");
            String _ignore_errors_1 = block.getError_handling().getIgnore_errors();
            _builder.append(_ignore_errors_1);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _ignore_unreachable = block.getError_handling().getIgnore_unreachable();
          boolean _tripleNotEquals_7 = (_ignore_unreachable != null);
          if (_tripleNotEquals_7) {
            String _concat_5 = space.concat("  ");
            _builder.append(_concat_5);
            _builder.append("ignore_unreachable: ");
            String _ignore_unreachable_1 = block.getError_handling().getIgnore_unreachable();
            _builder.append(_ignore_unreachable_1);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compileExecutionCommonKeywords(final EExecution execution, final String space) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EExecutionExeSettings _exe_settings = execution.getExe_settings();
      boolean _tripleNotEquals = (_exe_settings != null);
      if (_tripleNotEquals) {
        {
          String _throttle = execution.getExe_settings().getThrottle();
          boolean _notEquals = (!Objects.equal(_throttle, Integer.valueOf(0)));
          if (_notEquals) {
            _builder.append(space);
            _builder.append("throttle: ");
            String _throttle_1 = execution.getExe_settings().getThrottle();
            _builder.append(_throttle_1);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _run_once = execution.getExe_settings().getRun_once();
          boolean _tripleNotEquals_1 = (_run_once != null);
          if (_tripleNotEquals_1) {
            _builder.append(space);
            _builder.append("run_once: ");
            String _run_once_1 = execution.getExe_settings().getRun_once();
            _builder.append(_run_once_1);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EDelegation _delegation = execution.getDelegation();
      boolean _tripleNotEquals_2 = (_delegation != null);
      if (_tripleNotEquals_2) {
        {
          String _delegate_to = execution.getDelegation().getDelegate_to();
          boolean _tripleNotEquals_3 = (_delegate_to != null);
          if (_tripleNotEquals_3) {
            _builder.append(space);
            _builder.append("delegate_to: ");
            String _delegate_to_1 = execution.getDelegation().getDelegate_to();
            _builder.append(_delegate_to_1);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _delegate_facts = execution.getDelegation().getDelegate_facts();
          boolean _tripleNotEquals_4 = (_delegate_facts != null);
          if (_tripleNotEquals_4) {
            _builder.append(space);
            _builder.append("delegate_facts: ");
            String _delegate_facts_1 = execution.getDelegation().getDelegate_facts();
            _builder.append(_delegate_facts_1);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EJinjaExpressionEvaluationWithoutBrackets _when_expression = execution.getWhen_expression();
      boolean _tripleNotEquals_5 = (_when_expression != null);
      if (_tripleNotEquals_5) {
        _builder.append(space);
        _builder.append("when: ");
        String _compileJinjaExpressionEvaluationWithoutBrackets = this.compileJinjaExpressionEvaluationWithoutBrackets(execution.getWhen_expression());
        _builder.append(_compileJinjaExpressionEvaluationWithoutBrackets);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileTaskHandler(final ETaskHandler taskHandler, final String space) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _name = taskHandler.getName();
      boolean _tripleNotEquals = (_name != null);
      if (_tripleNotEquals) {
        _builder.append(space);
        _builder.append("- name: ");
        String _name_1 = taskHandler.getName();
        _builder.append(_name_1);
        _builder.newLineIfNotEmpty();
        {
          EModuleCall _module = taskHandler.getModule();
          boolean _tripleNotEquals_1 = (_module != null);
          if (_tripleNotEquals_1) {
            String _concat = space.concat("  ");
            _builder.append(_concat);
            String _name_2 = taskHandler.getModule().getName();
            _builder.append(_name_2);
            _builder.append(":");
            _builder.newLineIfNotEmpty();
            {
              EList<EParameter> _parameters = taskHandler.getModule().getParameters();
              for(final EParameter parameter : _parameters) {
                String _concat_1 = space.concat("  ").concat("  ");
                _builder.append(_concat_1);
                String _name_3 = parameter.getName();
                _builder.append(_name_3);
                _builder.append(": ");
                Object _compileValuePassed = this.compileValuePassed(parameter.getValue_passed());
                _builder.append(_compileValuePassed);
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      } else {
        {
          EModuleCall _module_1 = taskHandler.getModule();
          boolean _tripleNotEquals_2 = (_module_1 != null);
          if (_tripleNotEquals_2) {
            _builder.append(space);
            _builder.append("- ");
            String _name_4 = taskHandler.getModule().getName();
            _builder.append(_name_4);
            _builder.append(":");
            _builder.newLineIfNotEmpty();
            {
              EList<EParameter> _parameters_1 = taskHandler.getModule().getParameters();
              for(final EParameter parameter_1 : _parameters_1) {
                String _concat_2 = space.concat("  ").concat("  ");
                _builder.append(_concat_2);
                String _name_5 = parameter_1.getName();
                _builder.append(_name_5);
                _builder.append(": ");
                Object _compileValuePassed_1 = this.compileValuePassed(parameter_1.getValue_passed());
                _builder.append(_compileValuePassed_1);
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    CharSequence _compileBaseCommonKeywords = this.compileBaseCommonKeywords(taskHandler, space.concat("  "));
    _builder.append(_compileBaseCommonKeywords);
    _builder.newLineIfNotEmpty();
    CharSequence _compileExecutionCommonKeywords = this.compileExecutionCommonKeywords(taskHandler, space.concat("  "));
    _builder.append(_compileExecutionCommonKeywords);
    _builder.newLineIfNotEmpty();
    CharSequence _compileTaskHandlerCommonKeywords = this.compileTaskHandlerCommonKeywords(taskHandler, space.concat("  "));
    _builder.append(_compileTaskHandlerCommonKeywords);
    _builder.newLineIfNotEmpty();
    {
      if ((taskHandler instanceof EHandler)) {
        {
          EList<ENotifiedTopic> _listen_to = ((EHandler)taskHandler).getListen_to();
          boolean _tripleNotEquals_3 = (_listen_to != null);
          if (_tripleNotEquals_3) {
            String _concat_3 = space.concat("  ");
            _builder.append(_concat_3);
            _builder.append("listen: ");
            ArrayList<String> _compileNotifiedTopics = this.compileNotifiedTopics(((EHandler)taskHandler));
            _builder.append(_compileNotifiedTopics);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compileTaskHandlerCommonKeywords(final ETaskHandler taskHandler, final String space) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ETaskHandlerErrorHandling _error_handling = taskHandler.getError_handling();
      boolean _tripleNotEquals = (_error_handling != null);
      if (_tripleNotEquals) {
        {
          EJinjaExpressionEvaluationWithoutBrackets _changed_when = taskHandler.getError_handling().getChanged_when();
          boolean _tripleNotEquals_1 = (_changed_when != null);
          if (_tripleNotEquals_1) {
            _builder.append(space);
            _builder.append("change_when: ");
            String _compileJinjaExpressionEvaluationWithoutBrackets = this.compileJinjaExpressionEvaluationWithoutBrackets(taskHandler.getError_handling().getChanged_when());
            _builder.append(_compileJinjaExpressionEvaluationWithoutBrackets);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EJinjaExpressionEvaluationWithoutBrackets _failed_when = taskHandler.getError_handling().getFailed_when();
          boolean _tripleNotEquals_2 = (_failed_when != null);
          if (_tripleNotEquals_2) {
            _builder.append(space);
            _builder.append("failed_when: ");
            String _compileJinjaExpressionEvaluationWithoutBrackets_1 = this.compileJinjaExpressionEvaluationWithoutBrackets(taskHandler.getError_handling().getFailed_when());
            _builder.append(_compileJinjaExpressionEvaluationWithoutBrackets_1);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _any_errors_fatal = taskHandler.getError_handling().getAny_errors_fatal();
          boolean _tripleNotEquals_3 = (_any_errors_fatal != null);
          if (_tripleNotEquals_3) {
            _builder.append(space);
            _builder.append("any_errors_fatal: ");
            String _any_errors_fatal_1 = taskHandler.getError_handling().getAny_errors_fatal();
            _builder.append(_any_errors_fatal_1);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _ignore_errors = taskHandler.getError_handling().getIgnore_errors();
          boolean _tripleNotEquals_4 = (_ignore_errors != null);
          if (_tripleNotEquals_4) {
            _builder.append(space);
            _builder.append("ignore_errors: ");
            String _ignore_errors_1 = taskHandler.getError_handling().getIgnore_errors();
            _builder.append(_ignore_errors_1);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _ignore_unreachable = taskHandler.getError_handling().getIgnore_unreachable();
          boolean _tripleNotEquals_5 = (_ignore_unreachable != null);
          if (_tripleNotEquals_5) {
            _builder.append(space);
            _builder.append("ignore_unreachable: ");
            String _ignore_unreachable_1 = taskHandler.getError_handling().getIgnore_unreachable();
            _builder.append(_ignore_unreachable_1);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      String _action = taskHandler.getAction();
      boolean _tripleNotEquals_6 = (_action != null);
      if (_tripleNotEquals_6) {
        _builder.append(space);
        _builder.append("action: ");
        String _action_1 = taskHandler.getAction();
        _builder.append(_action_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EAsynchronousSettings _asynchronous_settings = taskHandler.getAsynchronous_settings();
      boolean _tripleNotEquals_7 = (_asynchronous_settings != null);
      if (_tripleNotEquals_7) {
        {
          String _async = taskHandler.getAsynchronous_settings().getAsync();
          boolean _tripleNotEquals_8 = (_async != null);
          if (_tripleNotEquals_8) {
            _builder.append(space);
            _builder.append("async: ");
            String _async_1 = taskHandler.getAsynchronous_settings().getAsync();
            _builder.append(_async_1);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _poll = taskHandler.getAsynchronous_settings().getPoll();
          boolean _tripleNotEquals_9 = (_poll != null);
          if (_tripleNotEquals_9) {
            _builder.append(space);
            _builder.append("poll: ");
            String _poll_1 = taskHandler.getAsynchronous_settings().getPoll();
            _builder.append(_poll_1);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EDictionary _args = taskHandler.getArgs();
      boolean _tripleNotEquals_10 = (_args != null);
      if (_tripleNotEquals_10) {
        _builder.append(space);
        _builder.append("args: ");
        Object _compileValue = this.compileValue(taskHandler.getArgs());
        _builder.append(_compileValue);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      int _size = taskHandler.getNotifiables().size();
      boolean _tripleNotEquals_11 = (_size != 0);
      if (_tripleNotEquals_11) {
        _builder.append(space);
        _builder.append("notify: ");
        ArrayList<String> _compileNotifiables = this.compileNotifiables(taskHandler);
        _builder.append(_compileNotifiables);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      ELoop _loop = taskHandler.getLoop();
      boolean _tripleNotEquals_12 = (_loop != null);
      if (_tripleNotEquals_12) {
        {
          ELoop _loop_1 = taskHandler.getLoop();
          if ((_loop_1 instanceof ELoopOverList)) {
            _builder.append(space);
            _builder.append("loop: ");
            ELoop _loop_2 = taskHandler.getLoop();
            Object _compileLoopList = this.compileLoopList(((ELoopOverList) _loop_2).getLoop_list());
            _builder.append(_compileLoopList);
            _builder.newLineIfNotEmpty();
            {
              ELoop _loop_3 = taskHandler.getLoop();
              ELoopControl _loop_control = ((ELoopOverList) _loop_3).getLoop_control();
              boolean _tripleNotEquals_13 = (_loop_control != null);
              if (_tripleNotEquals_13) {
                {
                  ELoop _loop_4 = taskHandler.getLoop();
                  EValuePassed _label = ((ELoopOverList) _loop_4).getLoop_control().getLabel();
                  boolean _tripleNotEquals_14 = (_label != null);
                  if (_tripleNotEquals_14) {
                    _builder.append(space);
                    _builder.append("label: ");
                    ELoop _loop_5 = taskHandler.getLoop();
                    Object _compileValuePassed = this.compileValuePassed(((ELoopOverList) _loop_5).getLoop_control().getLabel());
                    _builder.append(_compileValuePassed);
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  ELoop _loop_6 = taskHandler.getLoop();
                  String _pause = ((ELoopOverList) _loop_6).getLoop_control().getPause();
                  boolean _tripleNotEquals_15 = (_pause != null);
                  if (_tripleNotEquals_15) {
                    _builder.append(space);
                    _builder.append("pause: ");
                    ELoop _loop_7 = taskHandler.getLoop();
                    String _pause_1 = ((ELoopOverList) _loop_7).getLoop_control().getPause();
                    _builder.append(_pause_1);
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  ELoop _loop_8 = taskHandler.getLoop();
                  String _index_var = ((ELoopOverList) _loop_8).getLoop_control().getIndex_var();
                  boolean _tripleNotEquals_16 = (_index_var != null);
                  if (_tripleNotEquals_16) {
                    _builder.append(space);
                    _builder.append("index_var: ");
                    ELoop _loop_9 = taskHandler.getLoop();
                    String _index_var_1 = ((ELoopOverList) _loop_9).getLoop_control().getIndex_var();
                    _builder.append(_index_var_1);
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  ELoop _loop_10 = taskHandler.getLoop();
                  String _loop_var = ((ELoopOverList) _loop_10).getLoop_control().getLoop_var();
                  boolean _tripleNotEquals_17 = (_loop_var != null);
                  if (_tripleNotEquals_17) {
                    _builder.append(space);
                    _builder.append("loop_var: ");
                    ELoop _loop_11 = taskHandler.getLoop();
                    String _loop_var_1 = ((ELoopOverList) _loop_11).getLoop_control().getLoop_var();
                    _builder.append(_loop_var_1);
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  ELoop _loop_12 = taskHandler.getLoop();
                  String _extended = ((ELoopOverList) _loop_12).getLoop_control().getExtended();
                  boolean _tripleNotEquals_18 = (_extended != null);
                  if (_tripleNotEquals_18) {
                    _builder.append(space);
                    _builder.append("extended: ");
                    ELoop _loop_13 = taskHandler.getLoop();
                    String _extended_1 = ((ELoopOverList) _loop_13).getLoop_control().getExtended();
                    _builder.append(_extended_1);
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
        {
          ELoop _loop_14 = taskHandler.getLoop();
          if ((_loop_14 instanceof EUntil)) {
            {
              ELoop _loop_15 = taskHandler.getLoop();
              EJinjaExpressionEvaluationWithoutBrackets _until = ((EUntil) _loop_15).getUntil();
              boolean _tripleNotEquals_19 = (_until != null);
              if (_tripleNotEquals_19) {
                _builder.append(space);
                _builder.append("until: ");
                ELoop _loop_16 = taskHandler.getLoop();
                String _compileJinjaExpressionEvaluationWithoutBrackets_2 = this.compileJinjaExpressionEvaluationWithoutBrackets(((EUntil) _loop_16).getUntil());
                _builder.append(_compileJinjaExpressionEvaluationWithoutBrackets_2);
                _builder.newLineIfNotEmpty();
              }
            }
            {
              ELoop _loop_17 = taskHandler.getLoop();
              String _retries = ((EUntil) _loop_17).getRetries();
              boolean _tripleNotEquals_20 = (_retries != null);
              if (_tripleNotEquals_20) {
                _builder.append(space);
                _builder.append("retries: ");
                ELoop _loop_18 = taskHandler.getLoop();
                String _retries_1 = ((EUntil) _loop_18).getRetries();
                _builder.append(_retries_1);
                _builder.newLineIfNotEmpty();
              }
            }
            {
              ELoop _loop_19 = taskHandler.getLoop();
              String _delay = ((EUntil) _loop_19).getDelay();
              boolean _tripleNotEquals_21 = (_delay != null);
              if (_tripleNotEquals_21) {
                _builder.append(space);
                _builder.append("delay: ");
                ELoop _loop_20 = taskHandler.getLoop();
                String _delay_1 = ((EUntil) _loop_20).getDelay();
                _builder.append(_delay_1);
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    {
      ERegisterVariable _register = taskHandler.getRegister();
      boolean _tripleNotEquals_22 = (_register != null);
      if (_tripleNotEquals_22) {
        _builder.append(space);
        _builder.append("register: ");
        String _name = taskHandler.getRegister().getName();
        _builder.append(_name);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public ArrayList<String> compileNotifiables(final ETaskHandler taskHandler) {
    ArrayList<String> newList = new ArrayList<String>();
    EList<ENotifiable> _notifiables = taskHandler.getNotifiables();
    for (final ENotifiable notifiable : _notifiables) {
      if ((notifiable instanceof ENotifiedTopic)) {
        newList.add("\"".concat(((ENotifiedTopic)notifiable).getName()).concat("\""));
      } else {
        if ((notifiable instanceof ENotifiedHandler)) {
          newList.add(((ENotifiedHandler)notifiable).getName().getName());
        }
      }
    }
    return newList;
  }
  
  public ArrayList<String> compileNotifiedTopics(final EHandler handler) {
    ArrayList<String> newList = new ArrayList<String>();
    EList<ENotifiedTopic> _listen_to = handler.getListen_to();
    for (final ENotifiedTopic listenedTopic : _listen_to) {
      newList.add("\"".concat(listenedTopic.getName()).concat("\""));
    }
    return newList;
  }
  
  public String compileJinjaExpressionEvaluationWithoutBrackets(final EJinjaExpressionEvaluationWithoutBrackets jinja) {
    if ((jinja instanceof EFilteredExpression)) {
      return this.compileFilteredExpression(((EFilteredExpression)jinja));
    } else {
      if ((jinja instanceof EIfExpression)) {
        return this.compileIfExpression(((EIfExpression)jinja));
      }
    }
    return null;
  }
  
  public String compileFunctionCall(final EFunctionCall functionCall) {
    String stringToReturn = functionCall.getName();
    stringToReturn = stringToReturn.concat("(");
    for (int index = 0; (index < functionCall.getParameters().size()); index++) {
      if ((index == 0)) {
        stringToReturn = stringToReturn.concat(this.compileFilteredExpression(functionCall.getParameters().get(index)).toString());
      } else {
        stringToReturn = stringToReturn.concat(", ").concat(this.compileFilteredExpression(functionCall.getParameters().get(index)).toString());
      }
    }
    stringToReturn = stringToReturn.concat(")");
    return stringToReturn;
  }
  
  public String compileIfExpression(final EIfExpression ifExpression) {
    String stringToReturn = this.compileFilteredExpression(ifExpression.getIf_expression());
    stringToReturn = stringToReturn.concat(" if ").concat(this.compileFilteredExpression(ifExpression.getIf_condition()));
    EFilteredExpression _else_expression = ifExpression.getElse_expression();
    boolean _tripleNotEquals = (_else_expression != null);
    if (_tripleNotEquals) {
      stringToReturn = stringToReturn.concat(" else ").concat(this.compileFilteredExpression(ifExpression.getElse_expression()));
    }
    return stringToReturn;
  }
  
  public String compileFilteredExpression(final EFilteredExpression filteredExpression) {
    String stringToReturn = this.compileOrExpression(filteredExpression.getTo_filter()).toString();
    EList<EFunctionCall> _tail = filteredExpression.getTail();
    for (final EFunctionCall functionCall : _tail) {
      stringToReturn = stringToReturn.concat(".").concat(this.compileFunctionCall(functionCall));
    }
    EFilteredExpression _filter = filteredExpression.getFilter();
    boolean _tripleNotEquals = (_filter != null);
    if (_tripleNotEquals) {
      stringToReturn = stringToReturn.concat(" | ").concat(this.compileJinjaExpressionEvaluationWithoutBrackets(filteredExpression.getFilter()).toString());
    }
    return stringToReturn;
  }
  
  public String compileOrExpression(final EOrExpression orExpression) {
    String stringToReturn = this.compileAndExpression(orExpression.getLeft_or()).toString();
    EOrExpression _right_or = orExpression.getRight_or();
    boolean _tripleNotEquals = (_right_or != null);
    if (_tripleNotEquals) {
      stringToReturn = stringToReturn.concat(" or ").concat(this.compileOrExpression(orExpression.getRight_or()).toString());
    }
    return stringToReturn;
  }
  
  public String compileAndExpression(final EAndExpression andExpression) {
    String stringToReturn = this.compileTruthExpression(andExpression.getLeft_and()).toString();
    EAndExpression _right_and = andExpression.getRight_and();
    boolean _tripleNotEquals = (_right_and != null);
    if (_tripleNotEquals) {
      stringToReturn = stringToReturn.concat(" and ").concat(this.compileAndExpression(andExpression.getRight_and()).toString());
    }
    return stringToReturn;
  }
  
  public String compileTruthExpression(final ETruthExpression truthExpression) {
    String stringToReturn = this.compileOperation(truthExpression.getLeft_value()).toString();
    if (((truthExpression.getEquality_sign() != null) && (truthExpression.getRight_value() != null))) {
      stringToReturn = stringToReturn.concat(" ").concat(truthExpression.getEquality_sign()).concat(" ").concat(this.compileTruthExpression(truthExpression.getRight_value()).toString());
    }
    return stringToReturn;
  }
  
  public String compileOperation(final EOperation operation) {
    String stringToReturn = this.compileIsExpression(operation.getLeft_operand()).toString();
    if (((operation.getOperator() != null) && (operation.getRight_operand() != null))) {
      stringToReturn = stringToReturn.concat(" ").concat(operation.getOperator()).concat(" ").concat(this.compileOperation(operation.getRight_operand()).toString());
    }
    return stringToReturn;
  }
  
  public String compileIsExpression(final EIsExpression isExpression) {
    String stringToReturn = this.compileParenthesisedExpression(isExpression.getParenthesised_expression()).toString();
    EIsExpression _status = isExpression.getStatus();
    boolean _tripleNotEquals = (_status != null);
    if (_tripleNotEquals) {
      String _is_not = isExpression.getIs_not();
      boolean _tripleNotEquals_1 = (_is_not != null);
      if (_tripleNotEquals_1) {
        stringToReturn = stringToReturn.concat(" is not ").concat(this.compileIsExpression(isExpression.getStatus()).toString());
      } else {
        stringToReturn = stringToReturn.concat(" is ").concat(this.compileIsExpression(isExpression.getStatus()).toString());
      }
    } else {
      EIsExpression _container_expression = isExpression.getContainer_expression();
      boolean _tripleNotEquals_2 = (_container_expression != null);
      if (_tripleNotEquals_2) {
        String _is_not_1 = isExpression.getIs_not();
        boolean _tripleNotEquals_3 = (_is_not_1 != null);
        if (_tripleNotEquals_3) {
          stringToReturn = stringToReturn.concat(" not in ").concat(this.compileIsExpression(isExpression.getContainer_expression()).toString());
        } else {
          stringToReturn = stringToReturn.concat(" in ").concat(this.compileIsExpression(isExpression.getContainer_expression()).toString());
        }
      }
    }
    return stringToReturn;
  }
  
  public String compileParenthesisedExpression(final EParenthesisedExpression parenthesisedExpression) {
    EValuePassedToJinjaExpression _basic_value = parenthesisedExpression.getBasic_value();
    boolean _tripleNotEquals = (_basic_value != null);
    if (_tripleNotEquals) {
      return this.compileValuePassedToJinjaExpression(parenthesisedExpression.getBasic_value());
    } else {
      EOrExpression _parenthesised_term = parenthesisedExpression.getParenthesised_term();
      boolean _tripleNotEquals_1 = (_parenthesised_term != null);
      if (_tripleNotEquals_1) {
        return "(".concat(this.compileOrExpression(parenthesisedExpression.getParenthesised_term()).toString()).concat(")");
      }
    }
    return null;
  }
  
  public ArrayList<Object> compileList(final org.sodalite.sdl.ansible.ansibleDsl.EList list) {
    ArrayList<Object> newList = new ArrayList<Object>();
    EList<EValue> _elements = list.getElements();
    for (final EValue element : _elements) {
      newList.add(this.compileValue(element));
    }
    return newList;
  }
  
  public Object compileValuePassed(final EValuePassed valuePassed) {
    if ((valuePassed instanceof EJinjaExpressionAndString)) {
      return this.compileJinjaExpressionAndString(((EJinjaExpressionAndString)valuePassed));
    } else {
      if ((valuePassed instanceof EValueWithoutString)) {
        return this.compileValueWithoutString(((EValueWithoutString)valuePassed));
      }
    }
    return null;
  }
  
  public String compileJinjaExpressionAndString(final EJinjaExpressionAndString jinja) {
    String stringToReturn = "\"";
    EList<EJinjaExpressionOrString> _jinja_expression_and_string = jinja.getJinja_expression_and_string();
    for (final EJinjaExpressionOrString jinjaOr : _jinja_expression_and_string) {
      stringToReturn = stringToReturn.concat(this.compileJinjaExpressionOrString(jinjaOr));
    }
    stringToReturn = stringToReturn.concat("\"");
    return stringToReturn;
  }
  
  public String compileJinjaExpressionOrString(final EJinjaExpressionOrString jinja) {
    String _string = jinja.getString();
    boolean _tripleNotEquals = (_string != null);
    if (_tripleNotEquals) {
      return jinja.getString();
    } else {
      if ((jinja instanceof EJinjaExpressionEvaluation)) {
        return this.compileJinjaExpressionEvaluation(((EJinjaExpressionEvaluation)jinja));
      }
    }
    return null;
  }
  
  public String compileJinjaExpressionEvaluation(final EJinjaExpressionEvaluation jinja) {
    return "{{ ".concat(this.compileJinjaExpressionEvaluationWithoutBrackets(jinja.getJinja_expression())).concat(" }}");
  }
  
  public String compileValuePassedToJinjaExpression(final EValuePassedToJinjaExpression valuePassedToJinjaExpression) {
    if ((valuePassedToJinjaExpression instanceof EValue)) {
      return this.compileValue(((EValue)valuePassedToJinjaExpression)).toString();
    } else {
      if ((valuePassedToJinjaExpression instanceof EFactGathered)) {
        String factString = "ansible_facts";
        EList<String> _tail = ((EFactGathered)valuePassedToJinjaExpression).getTail();
        for (final String field : _tail) {
          factString = factString.concat(".").concat(field);
        }
        return factString;
      } else {
        if ((valuePassedToJinjaExpression instanceof EItem)) {
          String itemString = "item";
          EList<String> _tail_1 = ((EItem)valuePassedToJinjaExpression).getTail();
          for (final String tailElement : _tail_1) {
            itemString = itemString.concat(".").concat(tailElement);
          }
          return itemString;
        } else {
          if ((valuePassedToJinjaExpression instanceof EVariableDeclarationVariableReference)) {
            String declaredVariableString = "";
            declaredVariableString = declaredVariableString.concat(((EVariableDeclarationVariableReference)valuePassedToJinjaExpression).getVariable_declaration_variable_reference().getName());
            String _index = ((EVariableDeclarationVariableReference)valuePassedToJinjaExpression).getIndex();
            boolean _tripleNotEquals = (_index != null);
            if (_tripleNotEquals) {
              declaredVariableString = declaredVariableString.concat("[").concat(((EVariableDeclarationVariableReference)valuePassedToJinjaExpression).getIndex()).concat("]");
            }
            EList<EDictionaryPairReference> _tail_2 = ((EVariableDeclarationVariableReference)valuePassedToJinjaExpression).getTail();
            for (final EDictionaryPairReference dictionaryPairReference : _tail_2) {
              {
                declaredVariableString = declaredVariableString.concat(".").concat(dictionaryPairReference.getName().getName());
                String _index_1 = dictionaryPairReference.getIndex();
                boolean _tripleNotEquals_1 = (_index_1 != null);
                if (_tripleNotEquals_1) {
                  declaredVariableString = declaredVariableString.concat("[").concat(dictionaryPairReference.getIndex()).concat("]");
                }
              }
            }
            return declaredVariableString;
          } else {
            if ((valuePassedToJinjaExpression instanceof ERegisterVariableReference)) {
              String registerVariableString = "";
              registerVariableString = registerVariableString.concat(((ERegisterVariableReference)valuePassedToJinjaExpression).getRegister_variable_reference().getName());
              String _index_1 = ((ERegisterVariableReference)valuePassedToJinjaExpression).getIndex();
              boolean _tripleNotEquals_1 = (_index_1 != null);
              if (_tripleNotEquals_1) {
                registerVariableString = registerVariableString.concat("[").concat(((ERegisterVariableReference)valuePassedToJinjaExpression).getIndex()).concat("]");
              }
              EList<String> _tail_3 = ((ERegisterVariableReference)valuePassedToJinjaExpression).getTail();
              for (final String tailElement_1 : _tail_3) {
                registerVariableString = registerVariableString.concat(".").concat(tailElement_1);
              }
              return registerVariableString;
            } else {
              if ((valuePassedToJinjaExpression instanceof EInputVariableReference)) {
                String inputVariableString = "";
                inputVariableString = inputVariableString.concat(((EInputVariableReference)valuePassedToJinjaExpression).getName().getName());
                String _index_2 = ((EInputVariableReference)valuePassedToJinjaExpression).getIndex();
                boolean _tripleNotEquals_2 = (_index_2 != null);
                if (_tripleNotEquals_2) {
                  inputVariableString = inputVariableString.concat("[").concat(((EInputVariableReference)valuePassedToJinjaExpression).getIndex()).concat("]");
                }
                EList<String> _tail_4 = ((EInputVariableReference)valuePassedToJinjaExpression).getTail();
                for (final String tailElement_2 : _tail_4) {
                  inputVariableString = inputVariableString.concat(".").concat(tailElement_2);
                }
                return inputVariableString;
              } else {
                if ((valuePassedToJinjaExpression instanceof EFunctionCall)) {
                  return this.compileFunctionCall(((EFunctionCall)valuePassedToJinjaExpression));
                }
              }
            }
          }
        }
      }
    }
    return null;
  }
  
  public Object compileLoopList(final EValuePassed loopList) {
    if (((loopList instanceof EJinjaExpressionAndString) || (loopList instanceof org.sodalite.sdl.ansible.ansibleDsl.EList))) {
      return this.compileValuePassed(loopList);
    } else {
      return "[".concat(this.compileValuePassed(loopList).toString()).concat("]");
    }
  }
  
  public Object compileValue(final EValue value) {
    Object _xifexpression = null;
    if ((value instanceof EComposedValue)) {
      _xifexpression = this.compileComposedValue(((EComposedValue)value));
    } else {
      String _xifexpression_1 = null;
      if ((value instanceof ESimpleValue)) {
        _xifexpression_1 = this.compileSimpleValue(((ESimpleValue)value));
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public Object compileValueWithoutString(final EValueWithoutString valueWithoutString) {
    Object _xifexpression = null;
    if ((valueWithoutString instanceof EComposedValue)) {
      _xifexpression = this.compileComposedValue(((EComposedValue)valueWithoutString));
    } else {
      String _xifexpression_1 = null;
      if ((valueWithoutString instanceof ESimpleValueWithoutString)) {
        _xifexpression_1 = this.compileSimpleValueWithoutString(((ESimpleValueWithoutString)valueWithoutString));
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public Object compileComposedValue(final EComposedValue composedValue) {
    if ((composedValue instanceof org.sodalite.sdl.ansible.ansibleDsl.EList)) {
      return this.compileList(((org.sodalite.sdl.ansible.ansibleDsl.EList)composedValue));
    } else {
      if ((composedValue instanceof EDictionary)) {
        String dictionaryString = "{";
        EList<EDictionaryPair> _dictionary_pairs = ((EDictionary)composedValue).getDictionary_pairs();
        for (final EDictionaryPair dictionary_pair : _dictionary_pairs) {
          dictionaryString = dictionaryString.concat(dictionary_pair.getName()).concat(": ").concat(this.compileValue(dictionary_pair.getValue()).toString()).concat(", ");
        }
        int _length = dictionaryString.length();
        int _minus = (_length - 2);
        dictionaryString = dictionaryString.substring(0, _minus);
        dictionaryString = dictionaryString.concat("}");
        return dictionaryString;
      }
    }
    return null;
  }
  
  public String compileSimpleValue(final ESimpleValue simpleValue) {
    ESimpleValueWithoutString _simple_value_without_string = simpleValue.getSimple_value_without_string();
    boolean _tripleNotEquals = (_simple_value_without_string != null);
    if (_tripleNotEquals) {
      return this.compileSimpleValueWithoutString(simpleValue.getSimple_value_without_string());
    } else {
      return "\'".concat(simpleValue.getSimple_value_string()).concat("\'");
    }
  }
  
  public String compileSimpleValueWithoutString(final ESimpleValueWithoutString simpleValueWithoutString) {
    return simpleValueWithoutString.getSimple_value();
  }
  
  public String compileVariableDeclarations(final EBase base) {
    String variableDeclarationsString = "{";
    EList<EVariableDeclaration> _variable_declarations = base.getVariable_declarations();
    for (final EVariableDeclaration variable_declaration : _variable_declarations) {
      variableDeclarationsString = variableDeclarationsString.concat(variable_declaration.getName()).concat(": ").concat(this.compileValue(variable_declaration.getValue_passed()).toString()).concat(", ");
    }
    int _length = variableDeclarationsString.length();
    int _minus = (_length - 2);
    variableDeclarationsString = variableDeclarationsString.substring(0, _minus);
    variableDeclarationsString = variableDeclarationsString.concat("}");
    return variableDeclarationsString;
  }
}
