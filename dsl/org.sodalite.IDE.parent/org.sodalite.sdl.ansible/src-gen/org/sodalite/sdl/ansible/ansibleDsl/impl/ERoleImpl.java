/**
 * generated by Xtext 2.23.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.EHandler;
import org.sodalite.sdl.ansible.ansibleDsl.ERole;
import org.sodalite.sdl.ansible.ansibleDsl.ERoleMetadata;
import org.sodalite.sdl.ansible.ansibleDsl.EVariableDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>ERole</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ERoleImpl#getTasks_list <em>Tasks list</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ERoleImpl#getHandlers <em>Handlers</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ERoleImpl#getVariable_declarations <em>Variable declarations</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ERoleImpl#getFiles_names_list <em>Files names list</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ERoleImpl#getTemplates_names_list <em>Templates names list</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ERoleImpl#getMetadata <em>Metadata</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ERoleImpl extends ModelImpl implements ERole
{
  /**
   * The cached value of the '{@link #getTasks_list() <em>Tasks list</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTasks_list()
   * @generated
   * @ordered
   */
  protected EList<EObject> tasks_list;

  /**
   * The cached value of the '{@link #getHandlers() <em>Handlers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHandlers()
   * @generated
   * @ordered
   */
  protected EList<EHandler> handlers;

  /**
   * The cached value of the '{@link #getVariable_declarations() <em>Variable declarations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable_declarations()
   * @generated
   * @ordered
   */
  protected EList<EVariableDeclaration> variable_declarations;

  /**
   * The cached value of the '{@link #getFiles_names_list() <em>Files names list</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFiles_names_list()
   * @generated
   * @ordered
   */
  protected org.sodalite.sdl.ansible.ansibleDsl.EList files_names_list;

  /**
   * The cached value of the '{@link #getTemplates_names_list() <em>Templates names list</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTemplates_names_list()
   * @generated
   * @ordered
   */
  protected org.sodalite.sdl.ansible.ansibleDsl.EList templates_names_list;

  /**
   * The cached value of the '{@link #getMetadata() <em>Metadata</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMetadata()
   * @generated
   * @ordered
   */
  protected ERoleMetadata metadata;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ERoleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnsibleDslPackage.Literals.EROLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EObject> getTasks_list()
  {
    if (tasks_list == null)
    {
      tasks_list = new EObjectContainmentEList<EObject>(EObject.class, this, AnsibleDslPackage.EROLE__TASKS_LIST);
    }
    return tasks_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EHandler> getHandlers()
  {
    if (handlers == null)
    {
      handlers = new EObjectContainmentEList<EHandler>(EHandler.class, this, AnsibleDslPackage.EROLE__HANDLERS);
    }
    return handlers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EVariableDeclaration> getVariable_declarations()
  {
    if (variable_declarations == null)
    {
      variable_declarations = new EObjectContainmentEList<EVariableDeclaration>(EVariableDeclaration.class, this, AnsibleDslPackage.EROLE__VARIABLE_DECLARATIONS);
    }
    return variable_declarations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.sodalite.sdl.ansible.ansibleDsl.EList getFiles_names_list()
  {
    return files_names_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFiles_names_list(org.sodalite.sdl.ansible.ansibleDsl.EList newFiles_names_list, NotificationChain msgs)
  {
    org.sodalite.sdl.ansible.ansibleDsl.EList oldFiles_names_list = files_names_list;
    files_names_list = newFiles_names_list;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EROLE__FILES_NAMES_LIST, oldFiles_names_list, newFiles_names_list);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFiles_names_list(org.sodalite.sdl.ansible.ansibleDsl.EList newFiles_names_list)
  {
    if (newFiles_names_list != files_names_list)
    {
      NotificationChain msgs = null;
      if (files_names_list != null)
        msgs = ((InternalEObject)files_names_list).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EROLE__FILES_NAMES_LIST, null, msgs);
      if (newFiles_names_list != null)
        msgs = ((InternalEObject)newFiles_names_list).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EROLE__FILES_NAMES_LIST, null, msgs);
      msgs = basicSetFiles_names_list(newFiles_names_list, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EROLE__FILES_NAMES_LIST, newFiles_names_list, newFiles_names_list));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.sodalite.sdl.ansible.ansibleDsl.EList getTemplates_names_list()
  {
    return templates_names_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTemplates_names_list(org.sodalite.sdl.ansible.ansibleDsl.EList newTemplates_names_list, NotificationChain msgs)
  {
    org.sodalite.sdl.ansible.ansibleDsl.EList oldTemplates_names_list = templates_names_list;
    templates_names_list = newTemplates_names_list;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EROLE__TEMPLATES_NAMES_LIST, oldTemplates_names_list, newTemplates_names_list);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTemplates_names_list(org.sodalite.sdl.ansible.ansibleDsl.EList newTemplates_names_list)
  {
    if (newTemplates_names_list != templates_names_list)
    {
      NotificationChain msgs = null;
      if (templates_names_list != null)
        msgs = ((InternalEObject)templates_names_list).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EROLE__TEMPLATES_NAMES_LIST, null, msgs);
      if (newTemplates_names_list != null)
        msgs = ((InternalEObject)newTemplates_names_list).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EROLE__TEMPLATES_NAMES_LIST, null, msgs);
      msgs = basicSetTemplates_names_list(newTemplates_names_list, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EROLE__TEMPLATES_NAMES_LIST, newTemplates_names_list, newTemplates_names_list));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ERoleMetadata getMetadata()
  {
    return metadata;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMetadata(ERoleMetadata newMetadata, NotificationChain msgs)
  {
    ERoleMetadata oldMetadata = metadata;
    metadata = newMetadata;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EROLE__METADATA, oldMetadata, newMetadata);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMetadata(ERoleMetadata newMetadata)
  {
    if (newMetadata != metadata)
    {
      NotificationChain msgs = null;
      if (metadata != null)
        msgs = ((InternalEObject)metadata).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EROLE__METADATA, null, msgs);
      if (newMetadata != null)
        msgs = ((InternalEObject)newMetadata).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.EROLE__METADATA, null, msgs);
      msgs = basicSetMetadata(newMetadata, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EROLE__METADATA, newMetadata, newMetadata));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EROLE__TASKS_LIST:
        return ((InternalEList<?>)getTasks_list()).basicRemove(otherEnd, msgs);
      case AnsibleDslPackage.EROLE__HANDLERS:
        return ((InternalEList<?>)getHandlers()).basicRemove(otherEnd, msgs);
      case AnsibleDslPackage.EROLE__VARIABLE_DECLARATIONS:
        return ((InternalEList<?>)getVariable_declarations()).basicRemove(otherEnd, msgs);
      case AnsibleDslPackage.EROLE__FILES_NAMES_LIST:
        return basicSetFiles_names_list(null, msgs);
      case AnsibleDslPackage.EROLE__TEMPLATES_NAMES_LIST:
        return basicSetTemplates_names_list(null, msgs);
      case AnsibleDslPackage.EROLE__METADATA:
        return basicSetMetadata(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EROLE__TASKS_LIST:
        return getTasks_list();
      case AnsibleDslPackage.EROLE__HANDLERS:
        return getHandlers();
      case AnsibleDslPackage.EROLE__VARIABLE_DECLARATIONS:
        return getVariable_declarations();
      case AnsibleDslPackage.EROLE__FILES_NAMES_LIST:
        return getFiles_names_list();
      case AnsibleDslPackage.EROLE__TEMPLATES_NAMES_LIST:
        return getTemplates_names_list();
      case AnsibleDslPackage.EROLE__METADATA:
        return getMetadata();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EROLE__TASKS_LIST:
        getTasks_list().clear();
        getTasks_list().addAll((Collection<? extends EObject>)newValue);
        return;
      case AnsibleDslPackage.EROLE__HANDLERS:
        getHandlers().clear();
        getHandlers().addAll((Collection<? extends EHandler>)newValue);
        return;
      case AnsibleDslPackage.EROLE__VARIABLE_DECLARATIONS:
        getVariable_declarations().clear();
        getVariable_declarations().addAll((Collection<? extends EVariableDeclaration>)newValue);
        return;
      case AnsibleDslPackage.EROLE__FILES_NAMES_LIST:
        setFiles_names_list((org.sodalite.sdl.ansible.ansibleDsl.EList)newValue);
        return;
      case AnsibleDslPackage.EROLE__TEMPLATES_NAMES_LIST:
        setTemplates_names_list((org.sodalite.sdl.ansible.ansibleDsl.EList)newValue);
        return;
      case AnsibleDslPackage.EROLE__METADATA:
        setMetadata((ERoleMetadata)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EROLE__TASKS_LIST:
        getTasks_list().clear();
        return;
      case AnsibleDslPackage.EROLE__HANDLERS:
        getHandlers().clear();
        return;
      case AnsibleDslPackage.EROLE__VARIABLE_DECLARATIONS:
        getVariable_declarations().clear();
        return;
      case AnsibleDslPackage.EROLE__FILES_NAMES_LIST:
        setFiles_names_list((org.sodalite.sdl.ansible.ansibleDsl.EList)null);
        return;
      case AnsibleDslPackage.EROLE__TEMPLATES_NAMES_LIST:
        setTemplates_names_list((org.sodalite.sdl.ansible.ansibleDsl.EList)null);
        return;
      case AnsibleDslPackage.EROLE__METADATA:
        setMetadata((ERoleMetadata)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EROLE__TASKS_LIST:
        return tasks_list != null && !tasks_list.isEmpty();
      case AnsibleDslPackage.EROLE__HANDLERS:
        return handlers != null && !handlers.isEmpty();
      case AnsibleDslPackage.EROLE__VARIABLE_DECLARATIONS:
        return variable_declarations != null && !variable_declarations.isEmpty();
      case AnsibleDslPackage.EROLE__FILES_NAMES_LIST:
        return files_names_list != null;
      case AnsibleDslPackage.EROLE__TEMPLATES_NAMES_LIST:
        return templates_names_list != null;
      case AnsibleDslPackage.EROLE__METADATA:
        return metadata != null;
    }
    return super.eIsSet(featureID);
  }

} //ERoleImpl
