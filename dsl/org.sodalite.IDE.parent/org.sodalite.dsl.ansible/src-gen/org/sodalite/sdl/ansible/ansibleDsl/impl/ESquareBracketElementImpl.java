/**
 * generated by Xtext 2.23.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.EFunctionCallOrVariable;
import org.sodalite.sdl.ansible.ansibleDsl.ENumber;
import org.sodalite.sdl.ansible.ansibleDsl.ESliceNotation;
import org.sodalite.sdl.ansible.ansibleDsl.ESquareBracketElement;
import org.sodalite.sdl.ansible.ansibleDsl.EVariableReference;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>ESquare Bracket Element</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ESquareBracketElementImpl#getIndex <em>Index</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ESquareBracketElementImpl#getSlice_notation <em>Slice notation</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ESquareBracketElementImpl#getField <em>Field</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ESquareBracketElementImpl#getVariable_reference <em>Variable reference</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.ESquareBracketElementImpl#getVariable_or_function <em>Variable or function</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ESquareBracketElementImpl extends MinimalEObjectImpl.Container implements ESquareBracketElement
{
  /**
   * The cached value of the '{@link #getIndex() <em>Index</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndex()
   * @generated
   * @ordered
   */
  protected ENumber index;

  /**
   * The cached value of the '{@link #getSlice_notation() <em>Slice notation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSlice_notation()
   * @generated
   * @ordered
   */
  protected ESliceNotation slice_notation;

  /**
   * The default value of the '{@link #getField() <em>Field</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getField()
   * @generated
   * @ordered
   */
  protected static final String FIELD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getField() <em>Field</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getField()
   * @generated
   * @ordered
   */
  protected String field = FIELD_EDEFAULT;

  /**
   * The cached value of the '{@link #getVariable_reference() <em>Variable reference</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable_reference()
   * @generated
   * @ordered
   */
  protected EVariableReference variable_reference;

  /**
   * The cached value of the '{@link #getVariable_or_function() <em>Variable or function</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable_or_function()
   * @generated
   * @ordered
   */
  protected EFunctionCallOrVariable variable_or_function;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ESquareBracketElementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnsibleDslPackage.Literals.ESQUARE_BRACKET_ELEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ENumber getIndex()
  {
    return index;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIndex(ENumber newIndex, NotificationChain msgs)
  {
    ENumber oldIndex = index;
    index = newIndex;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__INDEX, oldIndex, newIndex);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIndex(ENumber newIndex)
  {
    if (newIndex != index)
    {
      NotificationChain msgs = null;
      if (index != null)
        msgs = ((InternalEObject)index).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__INDEX, null, msgs);
      if (newIndex != null)
        msgs = ((InternalEObject)newIndex).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__INDEX, null, msgs);
      msgs = basicSetIndex(newIndex, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__INDEX, newIndex, newIndex));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ESliceNotation getSlice_notation()
  {
    return slice_notation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSlice_notation(ESliceNotation newSlice_notation, NotificationChain msgs)
  {
    ESliceNotation oldSlice_notation = slice_notation;
    slice_notation = newSlice_notation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__SLICE_NOTATION, oldSlice_notation, newSlice_notation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSlice_notation(ESliceNotation newSlice_notation)
  {
    if (newSlice_notation != slice_notation)
    {
      NotificationChain msgs = null;
      if (slice_notation != null)
        msgs = ((InternalEObject)slice_notation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__SLICE_NOTATION, null, msgs);
      if (newSlice_notation != null)
        msgs = ((InternalEObject)newSlice_notation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__SLICE_NOTATION, null, msgs);
      msgs = basicSetSlice_notation(newSlice_notation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__SLICE_NOTATION, newSlice_notation, newSlice_notation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getField()
  {
    return field;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setField(String newField)
  {
    String oldField = field;
    field = newField;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__FIELD, oldField, field));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EVariableReference getVariable_reference()
  {
    return variable_reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariable_reference(EVariableReference newVariable_reference, NotificationChain msgs)
  {
    EVariableReference oldVariable_reference = variable_reference;
    variable_reference = newVariable_reference;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__VARIABLE_REFERENCE, oldVariable_reference, newVariable_reference);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariable_reference(EVariableReference newVariable_reference)
  {
    if (newVariable_reference != variable_reference)
    {
      NotificationChain msgs = null;
      if (variable_reference != null)
        msgs = ((InternalEObject)variable_reference).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__VARIABLE_REFERENCE, null, msgs);
      if (newVariable_reference != null)
        msgs = ((InternalEObject)newVariable_reference).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__VARIABLE_REFERENCE, null, msgs);
      msgs = basicSetVariable_reference(newVariable_reference, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__VARIABLE_REFERENCE, newVariable_reference, newVariable_reference));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EFunctionCallOrVariable getVariable_or_function()
  {
    return variable_or_function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariable_or_function(EFunctionCallOrVariable newVariable_or_function, NotificationChain msgs)
  {
    EFunctionCallOrVariable oldVariable_or_function = variable_or_function;
    variable_or_function = newVariable_or_function;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__VARIABLE_OR_FUNCTION, oldVariable_or_function, newVariable_or_function);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariable_or_function(EFunctionCallOrVariable newVariable_or_function)
  {
    if (newVariable_or_function != variable_or_function)
    {
      NotificationChain msgs = null;
      if (variable_or_function != null)
        msgs = ((InternalEObject)variable_or_function).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__VARIABLE_OR_FUNCTION, null, msgs);
      if (newVariable_or_function != null)
        msgs = ((InternalEObject)newVariable_or_function).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__VARIABLE_OR_FUNCTION, null, msgs);
      msgs = basicSetVariable_or_function(newVariable_or_function, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__VARIABLE_OR_FUNCTION, newVariable_or_function, newVariable_or_function));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__INDEX:
        return basicSetIndex(null, msgs);
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__SLICE_NOTATION:
        return basicSetSlice_notation(null, msgs);
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__VARIABLE_REFERENCE:
        return basicSetVariable_reference(null, msgs);
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__VARIABLE_OR_FUNCTION:
        return basicSetVariable_or_function(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__INDEX:
        return getIndex();
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__SLICE_NOTATION:
        return getSlice_notation();
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__FIELD:
        return getField();
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__VARIABLE_REFERENCE:
        return getVariable_reference();
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__VARIABLE_OR_FUNCTION:
        return getVariable_or_function();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__INDEX:
        setIndex((ENumber)newValue);
        return;
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__SLICE_NOTATION:
        setSlice_notation((ESliceNotation)newValue);
        return;
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__FIELD:
        setField((String)newValue);
        return;
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__VARIABLE_REFERENCE:
        setVariable_reference((EVariableReference)newValue);
        return;
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__VARIABLE_OR_FUNCTION:
        setVariable_or_function((EFunctionCallOrVariable)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__INDEX:
        setIndex((ENumber)null);
        return;
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__SLICE_NOTATION:
        setSlice_notation((ESliceNotation)null);
        return;
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__FIELD:
        setField(FIELD_EDEFAULT);
        return;
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__VARIABLE_REFERENCE:
        setVariable_reference((EVariableReference)null);
        return;
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__VARIABLE_OR_FUNCTION:
        setVariable_or_function((EFunctionCallOrVariable)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__INDEX:
        return index != null;
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__SLICE_NOTATION:
        return slice_notation != null;
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__FIELD:
        return FIELD_EDEFAULT == null ? field != null : !FIELD_EDEFAULT.equals(field);
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__VARIABLE_REFERENCE:
        return variable_reference != null;
      case AnsibleDslPackage.ESQUARE_BRACKET_ELEMENT__VARIABLE_OR_FUNCTION:
        return variable_or_function != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (field: ");
    result.append(field);
    result.append(')');
    return result.toString();
  }

} //ESquareBracketElementImpl
