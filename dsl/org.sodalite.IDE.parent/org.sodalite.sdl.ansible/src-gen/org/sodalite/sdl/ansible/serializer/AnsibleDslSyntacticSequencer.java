/*
 * generated by Xtext 2.23.0
 */
package org.sodalite.sdl.ansible.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.sodalite.sdl.ansible.services.AnsibleDslGrammarAccess;

@SuppressWarnings("all")
public class AnsibleDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected AnsibleDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_EPlay___RightCurlyBracketKeyword_6_2_Pre_tasksKeyword_6_0__q;
	protected AbstractElementAlias match_EPlay___RightCurlyBracketKeyword_8_2_Tasks_listKeyword_8_0__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (AnsibleDslGrammarAccess) access;
		match_EPlay___RightCurlyBracketKeyword_6_2_Pre_tasksKeyword_6_0__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getEPlayAccess().getRightCurlyBracketKeyword_6_2()), new TokenAlias(false, false, grammarAccess.getEPlayAccess().getPre_tasksKeyword_6_0()));
		match_EPlay___RightCurlyBracketKeyword_8_2_Tasks_listKeyword_8_0__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getEPlayAccess().getRightCurlyBracketKeyword_8_2()), new TokenAlias(false, false, grammarAccess.getEPlayAccess().getTasks_listKeyword_8_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_EPlay___RightCurlyBracketKeyword_6_2_Pre_tasksKeyword_6_0__q.equals(syntax))
				emit_EPlay___RightCurlyBracketKeyword_6_2_Pre_tasksKeyword_6_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EPlay___RightCurlyBracketKeyword_8_2_Tasks_listKeyword_8_0__q.equals(syntax))
				emit_EPlay___RightCurlyBracketKeyword_8_2_Tasks_listKeyword_8_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('}' 'pre_tasks{')?
	 *
	 * This ambiguous syntax occurs at:
	 *     pre_tasks_list+=EBlockTask (ambiguity) pre_tasks_list+=EBlockTask
	 */
	protected void emit_EPlay___RightCurlyBracketKeyword_6_2_Pre_tasksKeyword_6_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('}' 'tasks_list{')?
	 *
	 * This ambiguous syntax occurs at:
	 *     tasks_list+=EBlockTask (ambiguity) tasks_list+=EBlockTask
	 */
	protected void emit_EPlay___RightCurlyBracketKeyword_8_2_Tasks_listKeyword_8_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
