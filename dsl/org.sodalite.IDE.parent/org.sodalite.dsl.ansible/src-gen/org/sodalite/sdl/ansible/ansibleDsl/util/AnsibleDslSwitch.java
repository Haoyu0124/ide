/**
 * generated by Xtext 2.23.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.sodalite.sdl.ansible.ansibleDsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage
 * @generated
 */
public class AnsibleDslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AnsibleDslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AnsibleDslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = AnsibleDslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case AnsibleDslPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EPLAYBOOK:
      {
        EPlaybook ePlaybook = (EPlaybook)theEObject;
        T result = caseEPlaybook(ePlaybook);
        if (result == null) result = caseModel(ePlaybook);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EBASE:
      {
        EBase eBase = (EBase)theEObject;
        T result = caseEBase(eBase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EEXECUTION:
      {
        EExecution eExecution = (EExecution)theEObject;
        T result = caseEExecution(eExecution);
        if (result == null) result = caseEBase(eExecution);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EBLOCK_TASK:
      {
        EBlockTask eBlockTask = (EBlockTask)theEObject;
        T result = caseEBlockTask(eBlockTask);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.ETASK_HANDLER:
      {
        ETaskHandler eTaskHandler = (ETaskHandler)theEObject;
        T result = caseETaskHandler(eTaskHandler);
        if (result == null) result = caseEExecution(eTaskHandler);
        if (result == null) result = caseEBase(eTaskHandler);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EBASE_ATTRIBUTES:
      {
        EBaseAttributes eBaseAttributes = (EBaseAttributes)theEObject;
        T result = caseEBaseAttributes(eBaseAttributes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EEXECUTION_ATTRIBUTES:
      {
        EExecutionAttributes eExecutionAttributes = (EExecutionAttributes)theEObject;
        T result = caseEExecutionAttributes(eExecutionAttributes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.ETASK_HANDLER_ATTRIBUTES:
      {
        ETaskHandlerAttributes eTaskHandlerAttributes = (ETaskHandlerAttributes)theEObject;
        T result = caseETaskHandlerAttributes(eTaskHandlerAttributes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EPLAY:
      {
        EPlay ePlay = (EPlay)theEObject;
        T result = caseEPlay(ePlay);
        if (result == null) result = caseEBase(ePlay);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EBLOCK:
      {
        EBlock eBlock = (EBlock)theEObject;
        T result = caseEBlock(eBlock);
        if (result == null) result = caseEExecution(eBlock);
        if (result == null) result = caseEBlockTask(eBlock);
        if (result == null) result = caseEBase(eBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.ETASK:
      {
        ETask eTask = (ETask)theEObject;
        T result = caseETask(eTask);
        if (result == null) result = caseEBlockTask(eTask);
        if (result == null) result = caseETaskHandler(eTask);
        if (result == null) result = caseEExecution(eTask);
        if (result == null) result = caseEBase(eTask);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EHANDLER:
      {
        EHandler eHandler = (EHandler)theEObject;
        T result = caseEHandler(eHandler);
        if (result == null) result = caseETaskHandler(eHandler);
        if (result == null) result = caseEExecution(eHandler);
        if (result == null) result = caseEBase(eHandler);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EMODULE_CALL:
      {
        EModuleCall eModuleCall = (EModuleCall)theEObject;
        T result = caseEModuleCall(eModuleCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EPARAMETER:
      {
        EParameter eParameter = (EParameter)theEObject;
        T result = caseEParameter(eParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EROLE_INCLUSION:
      {
        ERoleInclusion eRoleInclusion = (ERoleInclusion)theEObject;
        T result = caseERoleInclusion(eRoleInclusion);
        if (result == null) result = caseEExecution(eRoleInclusion);
        if (result == null) result = caseEBase(eRoleInclusion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EROLE_INCLUSIONS:
      {
        ERoleInclusions eRoleInclusions = (ERoleInclusions)theEObject;
        T result = caseERoleInclusions(eRoleInclusions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.ELOOP:
      {
        ELoop eLoop = (ELoop)theEObject;
        T result = caseELoop(eLoop);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.ELOOP_OVER_LIST:
      {
        ELoopOverList eLoopOverList = (ELoopOverList)theEObject;
        T result = caseELoopOverList(eLoopOverList);
        if (result == null) result = caseELoop(eLoopOverList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.ELOOP_CONTROL:
      {
        ELoopControl eLoopControl = (ELoopControl)theEObject;
        T result = caseELoopControl(eLoopControl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EUNTIL:
      {
        EUntil eUntil = (EUntil)theEObject;
        T result = caseEUntil(eUntil);
        if (result == null) result = caseELoop(eUntil);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EPRIVILAGE_ESCALATION:
      {
        EPrivilageEscalation ePrivilageEscalation = (EPrivilageEscalation)theEObject;
        T result = caseEPrivilageEscalation(ePrivilageEscalation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EVALIDATION_MODE:
      {
        EValidationMode eValidationMode = (EValidationMode)theEObject;
        T result = caseEValidationMode(eValidationMode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.ECONNECTION:
      {
        EConnection eConnection = (EConnection)theEObject;
        T result = caseEConnection(eConnection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EEXE_SETTINGS:
      {
        EExeSettings eExeSettings = (EExeSettings)theEObject;
        T result = caseEExeSettings(eExeSettings);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EPLAY_EXE_SETTINGS:
      {
        EPlayExeSettings ePlayExeSettings = (EPlayExeSettings)theEObject;
        T result = caseEPlayExeSettings(ePlayExeSettings);
        if (result == null) result = caseEExeSettings(ePlayExeSettings);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EEXECUTION_EXE_SETTINGS:
      {
        EExecutionExeSettings eExecutionExeSettings = (EExecutionExeSettings)theEObject;
        T result = caseEExecutionExeSettings(eExecutionExeSettings);
        if (result == null) result = caseEExeSettings(eExecutionExeSettings);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EERROR_HANDLING:
      {
        EErrorHandling eErrorHandling = (EErrorHandling)theEObject;
        T result = caseEErrorHandling(eErrorHandling);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EBLOCK_ERROR_HANDLING:
      {
        EBlockErrorHandling eBlockErrorHandling = (EBlockErrorHandling)theEObject;
        T result = caseEBlockErrorHandling(eBlockErrorHandling);
        if (result == null) result = caseEErrorHandling(eBlockErrorHandling);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EPLAY_ERROR_HANDLING:
      {
        EPlayErrorHandling ePlayErrorHandling = (EPlayErrorHandling)theEObject;
        T result = caseEPlayErrorHandling(ePlayErrorHandling);
        if (result == null) result = caseEErrorHandling(ePlayErrorHandling);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.ETASK_HANDLER_ERROR_HANDLING:
      {
        ETaskHandlerErrorHandling eTaskHandlerErrorHandling = (ETaskHandlerErrorHandling)theEObject;
        T result = caseETaskHandlerErrorHandling(eTaskHandlerErrorHandling);
        if (result == null) result = caseEErrorHandling(eTaskHandlerErrorHandling);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EFACTS_SETTINGS:
      {
        EFactsSettings eFactsSettings = (EFactsSettings)theEObject;
        T result = caseEFactsSettings(eFactsSettings);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EDELEGATION:
      {
        EDelegation eDelegation = (EDelegation)theEObject;
        T result = caseEDelegation(eDelegation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EASYNCHRONOUS_SETTINGS:
      {
        EAsynchronousSettings eAsynchronousSettings = (EAsynchronousSettings)theEObject;
        T result = caseEAsynchronousSettings(eAsynchronousSettings);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.ENOTIFIABLE:
      {
        ENotifiable eNotifiable = (ENotifiable)theEObject;
        T result = caseENotifiable(eNotifiable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.ENOTIFIED_HANDLER:
      {
        ENotifiedHandler eNotifiedHandler = (ENotifiedHandler)theEObject;
        T result = caseENotifiedHandler(eNotifiedHandler);
        if (result == null) result = caseENotifiable(eNotifiedHandler);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.ENOTIFIED_TOPIC:
      {
        ENotifiedTopic eNotifiedTopic = (ENotifiedTopic)theEObject;
        T result = caseENotifiedTopic(eNotifiedTopic);
        if (result == null) result = caseENotifiable(eNotifiedTopic);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EJINJA_EXPRESSION_OR_STRING:
      {
        EJinjaExpressionOrString eJinjaExpressionOrString = (EJinjaExpressionOrString)theEObject;
        T result = caseEJinjaExpressionOrString(eJinjaExpressionOrString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EJINJA_EXPRESSION_AND_STRING:
      {
        EJinjaExpressionAndString eJinjaExpressionAndString = (EJinjaExpressionAndString)theEObject;
        T result = caseEJinjaExpressionAndString(eJinjaExpressionAndString);
        if (result == null) result = caseEValuePassed(eJinjaExpressionAndString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EVALUE_PASSED:
      {
        EValuePassed eValuePassed = (EValuePassed)theEObject;
        T result = caseEValuePassed(eValuePassed);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EVALUE_PASSED_TO_JINJA_EXPRESSION:
      {
        EValuePassedToJinjaExpression eValuePassedToJinjaExpression = (EValuePassedToJinjaExpression)theEObject;
        T result = caseEValuePassedToJinjaExpression(eValuePassedToJinjaExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.ECOMPOSED_VALUE:
      {
        EComposedValue eComposedValue = (EComposedValue)theEObject;
        T result = caseEComposedValue(eComposedValue);
        if (result == null) result = caseEValue(eComposedValue);
        if (result == null) result = caseEValueWithoutString(eComposedValue);
        if (result == null) result = caseEValuePassedToJinjaExpression(eComposedValue);
        if (result == null) result = caseEValuePassed(eComposedValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EVALUE:
      {
        EValue eValue = (EValue)theEObject;
        T result = caseEValue(eValue);
        if (result == null) result = caseEValuePassedToJinjaExpression(eValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EVALUE_WITHOUT_STRING:
      {
        EValueWithoutString eValueWithoutString = (EValueWithoutString)theEObject;
        T result = caseEValueWithoutString(eValueWithoutString);
        if (result == null) result = caseEValuePassed(eValueWithoutString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.ESIMPLE_VALUE_WITHOUT_STRING:
      {
        ESimpleValueWithoutString eSimpleValueWithoutString = (ESimpleValueWithoutString)theEObject;
        T result = caseESimpleValueWithoutString(eSimpleValueWithoutString);
        if (result == null) result = caseEValueWithoutString(eSimpleValueWithoutString);
        if (result == null) result = caseEValuePassed(eSimpleValueWithoutString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.ESIMPLE_VALUE:
      {
        ESimpleValue eSimpleValue = (ESimpleValue)theEObject;
        T result = caseESimpleValue(eSimpleValue);
        if (result == null) result = caseEValue(eSimpleValue);
        if (result == null) result = caseEValuePassedToJinjaExpression(eSimpleValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EITEM:
      {
        EItem eItem = (EItem)theEObject;
        T result = caseEItem(eItem);
        if (result == null) result = caseEValuePassedToJinjaExpression(eItem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EJINJA_EXPRESSION_EVALUATION:
      {
        EJinjaExpressionEvaluation eJinjaExpressionEvaluation = (EJinjaExpressionEvaluation)theEObject;
        T result = caseEJinjaExpressionEvaluation(eJinjaExpressionEvaluation);
        if (result == null) result = caseEJinjaExpressionOrString(eJinjaExpressionEvaluation);
        if (result == null) result = caseEDictionaryPassed(eJinjaExpressionEvaluation);
        if (result == null) result = caseEListPassed(eJinjaExpressionEvaluation);
        if (result == null) result = caseENumberPassed(eJinjaExpressionEvaluation);
        if (result == null) result = caseEBooleanPassed(eJinjaExpressionEvaluation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EJINJA_EXPRESSION_EVALUATION_WITHOUT_BRACKETS:
      {
        EJinjaExpressionEvaluationWithoutBrackets eJinjaExpressionEvaluationWithoutBrackets = (EJinjaExpressionEvaluationWithoutBrackets)theEObject;
        T result = caseEJinjaExpressionEvaluationWithoutBrackets(eJinjaExpressionEvaluationWithoutBrackets);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EFUNCTION_CALL:
      {
        EFunctionCall eFunctionCall = (EFunctionCall)theEObject;
        T result = caseEFunctionCall(eFunctionCall);
        if (result == null) result = caseEValuePassedToJinjaExpression(eFunctionCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EFILTERED_EXPRESSION:
      {
        EFilteredExpression eFilteredExpression = (EFilteredExpression)theEObject;
        T result = caseEFilteredExpression(eFilteredExpression);
        if (result == null) result = caseEJinjaExpressionEvaluationWithoutBrackets(eFilteredExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EOR_EXPRESSION:
      {
        EOrExpression eOrExpression = (EOrExpression)theEObject;
        T result = caseEOrExpression(eOrExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EAND_EXPRESSION:
      {
        EAndExpression eAndExpression = (EAndExpression)theEObject;
        T result = caseEAndExpression(eAndExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.ETRUTH_EXPRESSION:
      {
        ETruthExpression eTruthExpression = (ETruthExpression)theEObject;
        T result = caseETruthExpression(eTruthExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EOPERATION:
      {
        EOperation eOperation = (EOperation)theEObject;
        T result = caseEOperation(eOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EIS_EXPRESSION:
      {
        EIsExpression eIsExpression = (EIsExpression)theEObject;
        T result = caseEIsExpression(eIsExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EPARENTHESISED_EXPRESSION:
      {
        EParenthesisedExpression eParenthesisedExpression = (EParenthesisedExpression)theEObject;
        T result = caseEParenthesisedExpression(eParenthesisedExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EIF_EXPRESSION:
      {
        EIfExpression eIfExpression = (EIfExpression)theEObject;
        T result = caseEIfExpression(eIfExpression);
        if (result == null) result = caseEJinjaExpressionEvaluationWithoutBrackets(eIfExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EDICTIONARY_PAIR_REFERENCE:
      {
        EDictionaryPairReference eDictionaryPairReference = (EDictionaryPairReference)theEObject;
        T result = caseEDictionaryPairReference(eDictionaryPairReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EVARIABLE_DECLARATION_VARIABLE_REFERENCE:
      {
        EVariableDeclarationVariableReference eVariableDeclarationVariableReference = (EVariableDeclarationVariableReference)theEObject;
        T result = caseEVariableDeclarationVariableReference(eVariableDeclarationVariableReference);
        if (result == null) result = caseEVariableReference(eVariableDeclarationVariableReference);
        if (result == null) result = caseEValuePassedToJinjaExpression(eVariableDeclarationVariableReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EREGISTER_VARIABLE_REFERENCE:
      {
        ERegisterVariableReference eRegisterVariableReference = (ERegisterVariableReference)theEObject;
        T result = caseERegisterVariableReference(eRegisterVariableReference);
        if (result == null) result = caseEVariableReference(eRegisterVariableReference);
        if (result == null) result = caseEValuePassedToJinjaExpression(eRegisterVariableReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EVARIABLE_DECLARATION:
      {
        EVariableDeclaration eVariableDeclaration = (EVariableDeclaration)theEObject;
        T result = caseEVariableDeclaration(eVariableDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EINDEX_OR_LOOP_VARIABLE:
      {
        EIndexOrLoopVariable eIndexOrLoopVariable = (EIndexOrLoopVariable)theEObject;
        T result = caseEIndexOrLoopVariable(eIndexOrLoopVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EINDEX_OR_LOOP_VARIABLE_REFERENCE:
      {
        EIndexOrLoopVariableReference eIndexOrLoopVariableReference = (EIndexOrLoopVariableReference)theEObject;
        T result = caseEIndexOrLoopVariableReference(eIndexOrLoopVariableReference);
        if (result == null) result = caseEVariableReference(eIndexOrLoopVariableReference);
        if (result == null) result = caseEValuePassedToJinjaExpression(eIndexOrLoopVariableReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EREGISTER_VARIABLE:
      {
        ERegisterVariable eRegisterVariable = (ERegisterVariable)theEObject;
        T result = caseERegisterVariable(eRegisterVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EINPUT_OPERATION_VARIABLE_REFERENCE:
      {
        EInputOperationVariableReference eInputOperationVariableReference = (EInputOperationVariableReference)theEObject;
        T result = caseEInputOperationVariableReference(eInputOperationVariableReference);
        if (result == null) result = caseEVariableReference(eInputOperationVariableReference);
        if (result == null) result = caseEValuePassedToJinjaExpression(eInputOperationVariableReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EINPUT_INTERFACE_VARIABLE_REFERENCE:
      {
        EInputInterfaceVariableReference eInputInterfaceVariableReference = (EInputInterfaceVariableReference)theEObject;
        T result = caseEInputInterfaceVariableReference(eInputInterfaceVariableReference);
        if (result == null) result = caseEVariableReference(eInputInterfaceVariableReference);
        if (result == null) result = caseEValuePassedToJinjaExpression(eInputInterfaceVariableReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EVARIABLE_REFERENCE:
      {
        EVariableReference eVariableReference = (EVariableReference)theEObject;
        T result = caseEVariableReference(eVariableReference);
        if (result == null) result = caseEValuePassedToJinjaExpression(eVariableReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.ESPECIAL_VARIABLE:
      {
        ESpecialVariable eSpecialVariable = (ESpecialVariable)theEObject;
        T result = caseESpecialVariable(eSpecialVariable);
        if (result == null) result = caseEValuePassedToJinjaExpression(eSpecialVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.ETAIL_ELEMENT:
      {
        ETailElement eTailElement = (ETailElement)theEObject;
        T result = caseETailElement(eTailElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EDICTIONARY:
      {
        EDictionary eDictionary = (EDictionary)theEObject;
        T result = caseEDictionary(eDictionary);
        if (result == null) result = caseEComposedValue(eDictionary);
        if (result == null) result = caseEDictionaryPassed(eDictionary);
        if (result == null) result = caseEValue(eDictionary);
        if (result == null) result = caseEValueWithoutString(eDictionary);
        if (result == null) result = caseEValuePassedToJinjaExpression(eDictionary);
        if (result == null) result = caseEValuePassed(eDictionary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EDICTIONARY_PAIR:
      {
        EDictionaryPair eDictionaryPair = (EDictionaryPair)theEObject;
        T result = caseEDictionaryPair(eDictionaryPair);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.ELIST:
      {
        EList eList = (EList)theEObject;
        T result = caseEList(eList);
        if (result == null) result = caseEComposedValue(eList);
        if (result == null) result = caseEListPassed(eList);
        if (result == null) result = caseEValue(eList);
        if (result == null) result = caseEValueWithoutString(eList);
        if (result == null) result = caseEValuePassedToJinjaExpression(eList);
        if (result == null) result = caseEValuePassed(eList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EDICTIONARY_PASSED:
      {
        EDictionaryPassed eDictionaryPassed = (EDictionaryPassed)theEObject;
        T result = caseEDictionaryPassed(eDictionaryPassed);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.ELIST_PASSED:
      {
        EListPassed eListPassed = (EListPassed)theEObject;
        T result = caseEListPassed(eListPassed);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.ENUMBER_PASSED:
      {
        ENumberPassed eNumberPassed = (ENumberPassed)theEObject;
        T result = caseENumberPassed(eNumberPassed);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AnsibleDslPackage.EBOOLEAN_PASSED:
      {
        EBooleanPassed eBooleanPassed = (EBooleanPassed)theEObject;
        T result = caseEBooleanPassed(eBooleanPassed);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EPlaybook</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EPlaybook</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEPlaybook(EPlaybook object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EBase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EBase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEBase(EBase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EExecution</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EExecution</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEExecution(EExecution object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EBlock Task</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EBlock Task</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEBlockTask(EBlockTask object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ETask Handler</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ETask Handler</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseETaskHandler(ETaskHandler object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EBase Attributes</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EBase Attributes</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEBaseAttributes(EBaseAttributes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EExecution Attributes</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EExecution Attributes</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEExecutionAttributes(EExecutionAttributes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ETask Handler Attributes</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ETask Handler Attributes</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseETaskHandlerAttributes(ETaskHandlerAttributes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EPlay</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EPlay</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEPlay(EPlay object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EBlock</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EBlock</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEBlock(EBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ETask</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ETask</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseETask(ETask object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EHandler</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EHandler</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEHandler(EHandler object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EModule Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EModule Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEModuleCall(EModuleCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EParameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EParameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEParameter(EParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ERole Inclusion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ERole Inclusion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseERoleInclusion(ERoleInclusion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ERole Inclusions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ERole Inclusions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseERoleInclusions(ERoleInclusions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ELoop</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ELoop</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseELoop(ELoop object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ELoop Over List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ELoop Over List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseELoopOverList(ELoopOverList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ELoop Control</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ELoop Control</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseELoopControl(ELoopControl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EUntil</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EUntil</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEUntil(EUntil object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EPrivilage Escalation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EPrivilage Escalation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEPrivilageEscalation(EPrivilageEscalation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EValidation Mode</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EValidation Mode</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEValidationMode(EValidationMode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EConnection</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EConnection</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEConnection(EConnection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EExe Settings</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EExe Settings</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEExeSettings(EExeSettings object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EPlay Exe Settings</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EPlay Exe Settings</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEPlayExeSettings(EPlayExeSettings object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EExecution Exe Settings</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EExecution Exe Settings</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEExecutionExeSettings(EExecutionExeSettings object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EError Handling</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EError Handling</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEErrorHandling(EErrorHandling object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EBlock Error Handling</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EBlock Error Handling</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEBlockErrorHandling(EBlockErrorHandling object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EPlay Error Handling</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EPlay Error Handling</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEPlayErrorHandling(EPlayErrorHandling object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ETask Handler Error Handling</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ETask Handler Error Handling</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseETaskHandlerErrorHandling(ETaskHandlerErrorHandling object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EFacts Settings</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EFacts Settings</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEFactsSettings(EFactsSettings object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EDelegation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EDelegation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEDelegation(EDelegation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EAsynchronous Settings</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EAsynchronous Settings</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEAsynchronousSettings(EAsynchronousSettings object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ENotifiable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ENotifiable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseENotifiable(ENotifiable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ENotified Handler</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ENotified Handler</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseENotifiedHandler(ENotifiedHandler object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ENotified Topic</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ENotified Topic</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseENotifiedTopic(ENotifiedTopic object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EJinja Expression Or String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EJinja Expression Or String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEJinjaExpressionOrString(EJinjaExpressionOrString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EJinja Expression And String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EJinja Expression And String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEJinjaExpressionAndString(EJinjaExpressionAndString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EValue Passed</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EValue Passed</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEValuePassed(EValuePassed object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EValue Passed To Jinja Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EValue Passed To Jinja Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEValuePassedToJinjaExpression(EValuePassedToJinjaExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EComposed Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EComposed Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEComposedValue(EComposedValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EValue</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EValue</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEValue(EValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EValue Without String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EValue Without String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEValueWithoutString(EValueWithoutString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ESimple Value Without String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ESimple Value Without String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseESimpleValueWithoutString(ESimpleValueWithoutString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ESimple Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ESimple Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseESimpleValue(ESimpleValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EItem</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EItem</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEItem(EItem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EJinja Expression Evaluation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EJinja Expression Evaluation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEJinjaExpressionEvaluation(EJinjaExpressionEvaluation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EJinja Expression Evaluation Without Brackets</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EJinja Expression Evaluation Without Brackets</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEJinjaExpressionEvaluationWithoutBrackets(EJinjaExpressionEvaluationWithoutBrackets object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EFunction Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EFunction Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEFunctionCall(EFunctionCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EFiltered Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EFiltered Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEFilteredExpression(EFilteredExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EOr Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EOr Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEOrExpression(EOrExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EAnd Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EAnd Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEAndExpression(EAndExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ETruth Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ETruth Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseETruthExpression(ETruthExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EOperation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EOperation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEOperation(EOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EIs Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EIs Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEIsExpression(EIsExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EParenthesised Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EParenthesised Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEParenthesisedExpression(EParenthesisedExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EIf Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EIf Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEIfExpression(EIfExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EDictionary Pair Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EDictionary Pair Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEDictionaryPairReference(EDictionaryPairReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EVariable Declaration Variable Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EVariable Declaration Variable Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEVariableDeclarationVariableReference(EVariableDeclarationVariableReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ERegister Variable Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ERegister Variable Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseERegisterVariableReference(ERegisterVariableReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EVariable Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EVariable Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEVariableDeclaration(EVariableDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EIndex Or Loop Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EIndex Or Loop Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEIndexOrLoopVariable(EIndexOrLoopVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EIndex Or Loop Variable Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EIndex Or Loop Variable Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEIndexOrLoopVariableReference(EIndexOrLoopVariableReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ERegister Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ERegister Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseERegisterVariable(ERegisterVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EInput Operation Variable Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EInput Operation Variable Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEInputOperationVariableReference(EInputOperationVariableReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EInput Interface Variable Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EInput Interface Variable Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEInputInterfaceVariableReference(EInputInterfaceVariableReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EVariable Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EVariable Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEVariableReference(EVariableReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ESpecial Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ESpecial Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseESpecialVariable(ESpecialVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ETail Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ETail Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseETailElement(ETailElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EDictionary</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EDictionary</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEDictionary(EDictionary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EDictionary Pair</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EDictionary Pair</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEDictionaryPair(EDictionaryPair object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EList</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EList</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEList(EList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EDictionary Passed</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EDictionary Passed</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEDictionaryPassed(EDictionaryPassed object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EList Passed</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EList Passed</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEListPassed(EListPassed object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ENumber Passed</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ENumber Passed</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseENumberPassed(ENumberPassed object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EBoolean Passed</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EBoolean Passed</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEBooleanPassed(EBooleanPassed object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //AnsibleDslSwitch
