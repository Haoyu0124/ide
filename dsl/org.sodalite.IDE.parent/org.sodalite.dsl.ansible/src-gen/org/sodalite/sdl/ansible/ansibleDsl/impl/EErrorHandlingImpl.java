/**
 * generated by Xtext 2.23.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.EErrorHandling;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EError Handling</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EErrorHandlingImpl#getAny_errors_fatal <em>Any errors fatal</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EErrorHandlingImpl#getIgnore_errors <em>Ignore errors</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EErrorHandlingImpl#getIgnore_unreachable <em>Ignore unreachable</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EErrorHandlingImpl extends MinimalEObjectImpl.Container implements EErrorHandling
{
  /**
   * The default value of the '{@link #getAny_errors_fatal() <em>Any errors fatal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAny_errors_fatal()
   * @generated
   * @ordered
   */
  protected static final String ANY_ERRORS_FATAL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAny_errors_fatal() <em>Any errors fatal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAny_errors_fatal()
   * @generated
   * @ordered
   */
  protected String any_errors_fatal = ANY_ERRORS_FATAL_EDEFAULT;

  /**
   * The default value of the '{@link #getIgnore_errors() <em>Ignore errors</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIgnore_errors()
   * @generated
   * @ordered
   */
  protected static final String IGNORE_ERRORS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIgnore_errors() <em>Ignore errors</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIgnore_errors()
   * @generated
   * @ordered
   */
  protected String ignore_errors = IGNORE_ERRORS_EDEFAULT;

  /**
   * The default value of the '{@link #getIgnore_unreachable() <em>Ignore unreachable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIgnore_unreachable()
   * @generated
   * @ordered
   */
  protected static final String IGNORE_UNREACHABLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIgnore_unreachable() <em>Ignore unreachable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIgnore_unreachable()
   * @generated
   * @ordered
   */
  protected String ignore_unreachable = IGNORE_UNREACHABLE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EErrorHandlingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnsibleDslPackage.Literals.EERROR_HANDLING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAny_errors_fatal()
  {
    return any_errors_fatal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAny_errors_fatal(String newAny_errors_fatal)
  {
    String oldAny_errors_fatal = any_errors_fatal;
    any_errors_fatal = newAny_errors_fatal;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EERROR_HANDLING__ANY_ERRORS_FATAL, oldAny_errors_fatal, any_errors_fatal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIgnore_errors()
  {
    return ignore_errors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIgnore_errors(String newIgnore_errors)
  {
    String oldIgnore_errors = ignore_errors;
    ignore_errors = newIgnore_errors;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EERROR_HANDLING__IGNORE_ERRORS, oldIgnore_errors, ignore_errors));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIgnore_unreachable()
  {
    return ignore_unreachable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIgnore_unreachable(String newIgnore_unreachable)
  {
    String oldIgnore_unreachable = ignore_unreachable;
    ignore_unreachable = newIgnore_unreachable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EERROR_HANDLING__IGNORE_UNREACHABLE, oldIgnore_unreachable, ignore_unreachable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EERROR_HANDLING__ANY_ERRORS_FATAL:
        return getAny_errors_fatal();
      case AnsibleDslPackage.EERROR_HANDLING__IGNORE_ERRORS:
        return getIgnore_errors();
      case AnsibleDslPackage.EERROR_HANDLING__IGNORE_UNREACHABLE:
        return getIgnore_unreachable();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EERROR_HANDLING__ANY_ERRORS_FATAL:
        setAny_errors_fatal((String)newValue);
        return;
      case AnsibleDslPackage.EERROR_HANDLING__IGNORE_ERRORS:
        setIgnore_errors((String)newValue);
        return;
      case AnsibleDslPackage.EERROR_HANDLING__IGNORE_UNREACHABLE:
        setIgnore_unreachable((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EERROR_HANDLING__ANY_ERRORS_FATAL:
        setAny_errors_fatal(ANY_ERRORS_FATAL_EDEFAULT);
        return;
      case AnsibleDslPackage.EERROR_HANDLING__IGNORE_ERRORS:
        setIgnore_errors(IGNORE_ERRORS_EDEFAULT);
        return;
      case AnsibleDslPackage.EERROR_HANDLING__IGNORE_UNREACHABLE:
        setIgnore_unreachable(IGNORE_UNREACHABLE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EERROR_HANDLING__ANY_ERRORS_FATAL:
        return ANY_ERRORS_FATAL_EDEFAULT == null ? any_errors_fatal != null : !ANY_ERRORS_FATAL_EDEFAULT.equals(any_errors_fatal);
      case AnsibleDslPackage.EERROR_HANDLING__IGNORE_ERRORS:
        return IGNORE_ERRORS_EDEFAULT == null ? ignore_errors != null : !IGNORE_ERRORS_EDEFAULT.equals(ignore_errors);
      case AnsibleDslPackage.EERROR_HANDLING__IGNORE_UNREACHABLE:
        return IGNORE_UNREACHABLE_EDEFAULT == null ? ignore_unreachable != null : !IGNORE_UNREACHABLE_EDEFAULT.equals(ignore_unreachable);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (any_errors_fatal: ");
    result.append(any_errors_fatal);
    result.append(", ignore_errors: ");
    result.append(ignore_errors);
    result.append(", ignore_unreachable: ");
    result.append(ignore_unreachable);
    result.append(')');
    return result.toString();
  }

} //EErrorHandlingImpl
