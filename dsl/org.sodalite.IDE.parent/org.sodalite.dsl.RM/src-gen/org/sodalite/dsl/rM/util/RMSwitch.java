/**
 * generated by Xtext 2.17.1
 */
package org.sodalite.dsl.rM.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.sodalite.dsl.rM.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.sodalite.dsl.rM.RMPackage
 * @generated
 */
public class RMSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static RMPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RMSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = RMPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case RMPackage.RM_MODEL:
      {
        RM_Model rM_Model = (RM_Model)theEObject;
        T result = caseRM_Model(rM_Model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EDATA_TYPES:
      {
        EDataTypes eDataTypes = (EDataTypes)theEObject;
        T result = caseEDataTypes(eDataTypes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EDATA_TYPE:
      {
        EDataType eDataType = (EDataType)theEObject;
        T result = caseEDataType(eDataType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EARTIFACT_TYPES:
      {
        EArtifactTypes eArtifactTypes = (EArtifactTypes)theEObject;
        T result = caseEArtifactTypes(eArtifactTypes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EARTIFACT_TYPE:
      {
        EArtifactType eArtifactType = (EArtifactType)theEObject;
        T result = caseEArtifactType(eArtifactType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.ECAPABILITY_TYPES:
      {
        ECapabilityTypes eCapabilityTypes = (ECapabilityTypes)theEObject;
        T result = caseECapabilityTypes(eCapabilityTypes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.ECAPABILITY_TYPE:
      {
        ECapabilityType eCapabilityType = (ECapabilityType)theEObject;
        T result = caseECapabilityType(eCapabilityType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EINTERFACE_TYPES:
      {
        EInterfaceTypes eInterfaceTypes = (EInterfaceTypes)theEObject;
        T result = caseEInterfaceTypes(eInterfaceTypes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EINTERFACE_TYPE:
      {
        EInterfaceType eInterfaceType = (EInterfaceType)theEObject;
        T result = caseEInterfaceType(eInterfaceType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EPOLICY_TYPES:
      {
        EPolicyTypes ePolicyTypes = (EPolicyTypes)theEObject;
        T result = caseEPolicyTypes(ePolicyTypes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EPOLICY_TYPE:
      {
        EPolicyType ePolicyType = (EPolicyType)theEObject;
        T result = caseEPolicyType(ePolicyType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.ENODE_TYPES:
      {
        ENodeTypes eNodeTypes = (ENodeTypes)theEObject;
        T result = caseENodeTypes(eNodeTypes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.ENODE_TYPE:
      {
        ENodeType eNodeType = (ENodeType)theEObject;
        T result = caseENodeType(eNodeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.ERELATIONSHIP_TYPES:
      {
        ERelationshipTypes eRelationshipTypes = (ERelationshipTypes)theEObject;
        T result = caseERelationshipTypes(eRelationshipTypes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.ERELATIONSHIP_TYPE:
      {
        ERelationshipType eRelationshipType = (ERelationshipType)theEObject;
        T result = caseERelationshipType(eRelationshipType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EPROPERTIES:
      {
        EProperties eProperties = (EProperties)theEObject;
        T result = caseEProperties(eProperties);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EPROPERTY_DEFINITION:
      {
        EPropertyDefinition ePropertyDefinition = (EPropertyDefinition)theEObject;
        T result = caseEPropertyDefinition(ePropertyDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EATTRIBUTES:
      {
        EAttributes eAttributes = (EAttributes)theEObject;
        T result = caseEAttributes(eAttributes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EATTRIBUTE_DEFINITION:
      {
        EAttributeDefinition eAttributeDefinition = (EAttributeDefinition)theEObject;
        T result = caseEAttributeDefinition(eAttributeDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EINTERFACES:
      {
        EInterfaces eInterfaces = (EInterfaces)theEObject;
        T result = caseEInterfaces(eInterfaces);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EINTERFACE_DEFINITION:
      {
        EInterfaceDefinition eInterfaceDefinition = (EInterfaceDefinition)theEObject;
        T result = caseEInterfaceDefinition(eInterfaceDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EOPERATIONS:
      {
        EOperations eOperations = (EOperations)theEObject;
        T result = caseEOperations(eOperations);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EOPERATION_DEFINITION:
      {
        EOperationDefinition eOperationDefinition = (EOperationDefinition)theEObject;
        T result = caseEOperationDefinition(eOperationDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EINPUTS:
      {
        EInputs eInputs = (EInputs)theEObject;
        T result = caseEInputs(eInputs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EPARAMETER_DEFINITION:
      {
        EParameterDefinition eParameterDefinition = (EParameterDefinition)theEObject;
        T result = caseEParameterDefinition(eParameterDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EVALUE_EXPRESSION:
      {
        EValueExpression eValueExpression = (EValueExpression)theEObject;
        T result = caseEValueExpression(eValueExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EFUNCTION:
      {
        EFunction eFunction = (EFunction)theEObject;
        T result = caseEFunction(eFunction);
        if (result == null) result = caseEValueExpression(eFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.GET_ATTRIBUTE:
      {
        GetAttribute getAttribute = (GetAttribute)theEObject;
        T result = caseGetAttribute(getAttribute);
        if (result == null) result = caseEFunction(getAttribute);
        if (result == null) result = caseEValueExpression(getAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.GET_PROPERTY:
      {
        GetProperty getProperty = (GetProperty)theEObject;
        T result = caseGetProperty(getProperty);
        if (result == null) result = caseEFunction(getProperty);
        if (result == null) result = caseEValueExpression(getProperty);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.ECAPABILITIES:
      {
        ECapabilities eCapabilities = (ECapabilities)theEObject;
        T result = caseECapabilities(eCapabilities);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.ECAPABILITY_DEFINITION:
      {
        ECapabilityDefinition eCapabilityDefinition = (ECapabilityDefinition)theEObject;
        T result = caseECapabilityDefinition(eCapabilityDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EREQUIREMENTS:
      {
        ERequirements eRequirements = (ERequirements)theEObject;
        T result = caseERequirements(eRequirements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EREQUIREMENT_DEFINITION:
      {
        ERequirementDefinition eRequirementDefinition = (ERequirementDefinition)theEObject;
        T result = caseERequirementDefinition(eRequirementDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.ECONSTRAINTS:
      {
        EConstraints eConstraints = (EConstraints)theEObject;
        T result = caseEConstraints(eConstraints);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.ECONSTRAINT:
      {
        EConstraint eConstraint = (EConstraint)theEObject;
        T result = caseEConstraint(eConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EMAX_LENGTH:
      {
        EMaxLength eMaxLength = (EMaxLength)theEObject;
        T result = caseEMaxLength(eMaxLength);
        if (result == null) result = caseEConstraint(eMaxLength);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EMIN_LENGTH:
      {
        EMinLength eMinLength = (EMinLength)theEObject;
        T result = caseEMinLength(eMinLength);
        if (result == null) result = caseEConstraint(eMinLength);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.ELENGTH:
      {
        ELength eLength = (ELength)theEObject;
        T result = caseELength(eLength);
        if (result == null) result = caseEConstraint(eLength);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EVALID_VALUES:
      {
        EValid_Values eValid_Values = (EValid_Values)theEObject;
        T result = caseEValid_Values(eValid_Values);
        if (result == null) result = caseEConstraint(eValid_Values);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EIN_RANGE:
      {
        EInRange eInRange = (EInRange)theEObject;
        T result = caseEInRange(eInRange);
        if (result == null) result = caseEConstraint(eInRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.ELESS_OR_EQUAL:
      {
        ELessOrEqual eLessOrEqual = (ELessOrEqual)theEObject;
        T result = caseELessOrEqual(eLessOrEqual);
        if (result == null) result = caseEConstraint(eLessOrEqual);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.ELESS_THAN:
      {
        ELessThan eLessThan = (ELessThan)theEObject;
        T result = caseELessThan(eLessThan);
        if (result == null) result = caseEConstraint(eLessThan);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EGREATER_OR_EQUAL:
      {
        EGreaterOrEqual eGreaterOrEqual = (EGreaterOrEqual)theEObject;
        T result = caseEGreaterOrEqual(eGreaterOrEqual);
        if (result == null) result = caseEConstraint(eGreaterOrEqual);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EGREATER_THAN:
      {
        EGreaterThan eGreaterThan = (EGreaterThan)theEObject;
        T result = caseEGreaterThan(eGreaterThan);
        if (result == null) result = caseEConstraint(eGreaterThan);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RMPackage.EEQUAL:
      {
        EEqual eEqual = (EEqual)theEObject;
        T result = caseEEqual(eEqual);
        if (result == null) result = caseEConstraint(eEqual);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>RM Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>RM Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRM_Model(RM_Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EData Types</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EData Types</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEDataTypes(EDataTypes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EData Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EData Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEDataType(EDataType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EArtifact Types</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EArtifact Types</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEArtifactTypes(EArtifactTypes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EArtifact Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EArtifact Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEArtifactType(EArtifactType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ECapability Types</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ECapability Types</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseECapabilityTypes(ECapabilityTypes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ECapability Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ECapability Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseECapabilityType(ECapabilityType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EInterface Types</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EInterface Types</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEInterfaceTypes(EInterfaceTypes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EInterface Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EInterface Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEInterfaceType(EInterfaceType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EPolicy Types</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EPolicy Types</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEPolicyTypes(EPolicyTypes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EPolicy Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EPolicy Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEPolicyType(EPolicyType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ENode Types</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ENode Types</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseENodeTypes(ENodeTypes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ENode Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ENode Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseENodeType(ENodeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ERelationship Types</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ERelationship Types</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseERelationshipTypes(ERelationshipTypes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ERelationship Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ERelationship Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseERelationshipType(ERelationshipType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EProperties</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EProperties</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEProperties(EProperties object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EProperty Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EProperty Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEPropertyDefinition(EPropertyDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EAttributes</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EAttributes</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEAttributes(EAttributes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EAttribute Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EAttribute Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEAttributeDefinition(EAttributeDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EInterfaces</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EInterfaces</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEInterfaces(EInterfaces object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EInterface Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EInterface Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEInterfaceDefinition(EInterfaceDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EOperations</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EOperations</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEOperations(EOperations object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EOperation Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EOperation Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEOperationDefinition(EOperationDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EInputs</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EInputs</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEInputs(EInputs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EParameter Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EParameter Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEParameterDefinition(EParameterDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EValue Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EValue Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEValueExpression(EValueExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EFunction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EFunction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEFunction(EFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Get Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Get Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGetAttribute(GetAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Get Property</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Get Property</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGetProperty(GetProperty object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ECapabilities</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ECapabilities</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseECapabilities(ECapabilities object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ECapability Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ECapability Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseECapabilityDefinition(ECapabilityDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ERequirements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ERequirements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseERequirements(ERequirements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ERequirement Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ERequirement Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseERequirementDefinition(ERequirementDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EConstraints</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EConstraints</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEConstraints(EConstraints object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EConstraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EConstraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEConstraint(EConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EMax Length</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EMax Length</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEMaxLength(EMaxLength object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EMin Length</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EMin Length</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEMinLength(EMinLength object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ELength</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ELength</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseELength(ELength object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EValid Values</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EValid Values</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEValid_Values(EValid_Values object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EIn Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EIn Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEInRange(EInRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ELess Or Equal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ELess Or Equal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseELessOrEqual(ELessOrEqual object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ELess Than</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ELess Than</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseELessThan(ELessThan object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EGreater Or Equal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EGreater Or Equal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEGreaterOrEqual(EGreaterOrEqual object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EGreater Than</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EGreater Than</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEGreaterThan(EGreaterThan object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EEqual</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EEqual</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEEqual(EEqual object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //RMSwitch
