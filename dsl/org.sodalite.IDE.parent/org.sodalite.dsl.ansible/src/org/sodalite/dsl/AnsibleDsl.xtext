grammar org.sodalite.sdl.ansible.AnsibleDsl with org.eclipse.xtext.common.Terminals

generate ansibleDsl "http://www.sodalite.org/dsl/AnsibleDsl"
import "http://www.sodalite.org/dsl/RM" as rm

Model:
	EPlaybook
;

EPlaybook:
	'playbook_name:' name=STRING
	('used_by:'
	BEGIN
		used_by=EUsedByBody
	END)?
	'plays:'
	BEGIN
		(plays+=EPlay+)
	END
;

EUsedByBody:
	'node_type:' node_type=[rm::ENodeType|STRING]
	'operation:' operation=[rm::EOperationDefinition|STRING]
;

EBase:
	EPlay | EExecution
;

EExecution:
	EBlock | ETaskHandler | ERoleInclusion
;

EBlockTask:
	EBlock | ETask
;

ETaskHandler:
	ETask | EHandler
;

EPlay:
	{EPlay}
	'play:'
	BEGIN
	(
		('play_name:' name=EJinjaExpressionAndString)? &
		('hosts:' hosts=EJinjaExpressionAndString)? &
		(privilege_escalation=EPrivilegeEscalation)? &
		(validation_mode=EValidationMode)? &
		(connection=EConnection)? &
		('no_log:' no_log=EBooleanPassed)? &
		('debugger:' debugger=EJinjaExpressionAndString)? &
		('module_defaults:' module_defaults=EListPassed)? &
		('environment:' environment=EListPassed)? &
		('collections:' collections=EListPassed)? &
		('tags:' tags=EListPassed)? &
		('vars:'
		BEGIN
			(variable_declarations+=EVariableDeclaration)+
		END)? &
		(play_exe_settings=EPlayExeSettings)? &
		(error_handling=EPlayErrorHandling)? &
		(facts_settings=EFactsSettings)? &
		('vars_files:' vars_files=EListPassed)? &
		('vars_prompt:' vars_prompt=EListPassed)? &
		('force_handlers:' force_handlers=EBooleanPassed)? &
		(playbook_inclusion=EPlaybookInclusion)? &
		('pre_tasks:'
		BEGIN
			(pre_tasks_list+=EBlockTask)+
		END)? &
		(roles_inclusions=ERoleInclusions)? &
		('tasks_list:'
		BEGIN
			(tasks_list+=EBlockTask)+
		END)? &
		('post_tasks:'
		BEGIN
			(post_tasks_list+=EBlockTask)+
		END)? &
		('handlers:'
		BEGIN
			(handlers+=EHandler)+
		END)?
	)
	END
;

EBlock:
	'block:'
	BEGIN
	(
		('block_name:' name=EJinjaExpressionAndString)? &
		(privilege_escalation=EPrivilegeEscalation)? &
		(validation_mode=EValidationMode)? &
		(connection=EConnection)? &
		('no_log:' no_log=EBooleanPassed)? &
		('debugger:' debugger=EJinjaExpressionAndString)? &
		('module_defaults:' module_defaults=EListPassed)? &
		('environment:' environment=EListPassed)? &
		('collections:' collections=EListPassed)? &
		('tags:' tags=EListPassed)? &
		('vars:'
		BEGIN
			(variable_declarations+=EVariableDeclaration)+
		END)? &
		(exe_settings=EExecutionExeSettings)? &
		(delegation=EDelegation)? &
		('when:' when_expression=EJinjaExpressionEvaluationWithoutBrackets)? &
		(error_handling=EBlockAndRoleErrorHandling)? &
		('tasks:'
		BEGIN
			(tasks+=ETask)+
		END) &
		('rescue_tasks:'
		BEGIN
			(rescue_tasks+=ETask)+
		END)? &
		('always_tasks:'
		BEGIN
			(always_tasks+=ETask)+
		END)?
	)
	END
;

ETask:
	{ETask}
	'task:'
	BEGIN
	(
		('task_name:' name=EJinjaExpressionAndString)? &
		(privilege_escalation=EPrivilegeEscalation)? &
		(validation_mode=EValidationMode)? &
		(connection=EConnection)? &
		('no_log:' no_log=EBooleanPassed)? &
		('debugger:' debugger=EJinjaExpressionAndString)? &
		('module_defaults:' module_defaults=EListPassed)? &
		('environment:' environment=EListPassed)? &
		('collections:' collections=EListPassed)? &
		('tags:' tags=EListPassed)? &
		('vars:'
		BEGIN
			(variable_declarations+=EVariableDeclaration)+
		END)? &
		(exe_settings=EExecutionExeSettings)? &
		(delegation=EDelegation)? &
		('when:' when_expression=EJinjaExpressionEvaluationWithoutBrackets)? &
		(error_handling=ETaskHandlerErrorHandling)? &
		('action:' action=EJinjaExpressionAndString)? &
		(asynchronous_settings=EAsynchronousSettings)? &
		('args:' args=EDictionaryPassed)? &
		(module=EModuleCall) &
		('notify:' (notifiables+=ENotifiable)+)? &
		(loop=ELoop)? &
		(register=ERegisterVariable)?
	)
	END
;

EHandler:
	{EHandler}
	'handler:'
	BEGIN
	(
		('handler_name:' name=STRING)? & //could not use EJinjaExpressionAndString because if so the scoping doesn't work
		(privilege_escalation=EPrivilegeEscalation)? &
		(validation_mode=EValidationMode)? &
		(connection=EConnection)? &
		('no_log:' no_log=EBooleanPassed)? &
		('debugger:' debugger=EJinjaExpressionAndString)? &
		('module_defaults:' module_defaults=EListPassed)? &
		('environment:' environment=EListPassed)? &
		('collections:' collections=EListPassed)? &
		('tags:' tags=EListPassed)? &
		('vars:'
		BEGIN
			(variable_declarations+=EVariableDeclaration)+
		END)? &
		(exe_settings=EExecutionExeSettings)? &
		(delegation=EDelegation)? &
		('when:' when_expression=EJinjaExpressionEvaluationWithoutBrackets)? &
		(error_handling=ETaskHandlerErrorHandling)? &
		('action:' action=EJinjaExpressionAndString)? &
		(asynchronous_settings=EAsynchronousSettings)? &
		('args:' args=EDictionaryPassed)? &
		(module=EModuleCall) &
		('notify:' (notifiables+=ENotifiable)+)? &
		(loop=ELoop)? &
		(register=ERegisterVariable)? &
		('listen:' (listen_to+=[ENotifiedTopic|STRING])+)?
	)
	END
;

EModuleCall:
	'module:' name=ID
	BEGIN
	(
		('direct_parameter:' direct_parameter=EValuePassed)?
		('parameters:'
		BEGIN
			(parameters+=EParameter)+
		END)?
	)
	END
;

EParameter:
	name=ID ':' value_passed=EValuePassed
;

ERoleInclusion:
	'role:'
	BEGIN
	(
		'role_name:' name=EJinjaExpressionAndString
		(
			(privilege_escalation=EPrivilegeEscalation)? &
			(validation_mode=EValidationMode)? &
			(connection=EConnection)? &
			('no_log:' no_log=EBooleanPassed)? &
			('debugger:' debugger=EJinjaExpressionAndString)? &
			('module_defaults:' module_defaults=EListPassed)? &
			('environment:' environment=EListPassed)? &
			('collections:' collections=EListPassed)? &
			('tags:' tags=EListPassed)? &
			('vars:'
			BEGIN
				(variable_declarations+=EVariableDeclaration)+
			END)? &
			(exe_settings=EExecutionExeSettings)? &
			(delegation=EDelegation)? &
			('when:' when_expression=EJinjaExpressionEvaluationWithoutBrackets)? &
			(error_handling=EBlockAndRoleErrorHandling)?
		)
	)
	END
;

ERoleInclusions:
	'roles_inclusions:'
	BEGIN
		(roles+=ERoleInclusion)+
	END
;

EPlaybookInclusion:
	'playbook_inclusion:'
	BEGIN
	(
		('import_playbook:' playbook_file_name=STRING)&
		('when:' when_expression=EJinjaExpressionEvaluationWithoutBrackets)?
	)
	END
;

ELoop:
	'loop:'
	BEGIN
		(ELoopOverList | EUntil)
	END
;

ELoopOverList:
	'loop_over:' loop_list=EValuePassed
	(loop_control=ELoopControl)?
;

ELoopControl:
	'loop_control:'
	BEGIN
	(
		('label:' label=EValuePassed)? &
		('pause:' pause=ENumberPassed)? & //number of seconds
		('index_var:' index_var=EIndexOrLoopVariable)? &
		('loop_var:' loop_var=EIndexOrLoopVariable)? &
		('extended:' extended=EBooleanPassed)?
	)
	END
;

EUntil:
	'until:' until=EJinjaExpressionEvaluationWithoutBrackets
	(
		('retries:' retries=ENumberPassed)? &
		('delay:' delay=ENumberPassed)? //number of seconds
	)
;

EPrivilegeEscalation:
	'privilege_escalation:'
	BEGIN
	(	
		('become:' become=EBooleanPassed)? &
		('become_exe:' become_exe=EJinjaExpressionAndString)? &
		('become_flags:' become_flags=EJinjaExpressionAndString)? &
		('become_method:' become_method=EJinjaExpressionAndString)? &
		('become_user:' become_user=EJinjaExpressionAndString)?
	)
	END
;

EValidationMode:
	'validation_mode:'
	BEGIN
	(
		('check_mode:' check_mode=EBooleanPassed)? &
		('diff:' diff=EBooleanPassed)?
	)
	END
;

EConnection:
	'connection_info:'
	BEGIN
	(
		('connection:' connection=EJinjaExpressionAndString)? &
		('port:' port=ENumberPassed)? &
		('remote_user:' remote_user=EJinjaExpressionAndString)?
	)
	END
;

EExeSettings:
	EExecutionExeSettings | EPlayExeSettings
;

EPlayExeSettings:
	'play_exe_settings:'
	BEGIN
	(
		('strategy:' strategy=EJinjaExpressionAndString)? &
		('serial:' serial_list=EListPassed)? &
		('order:' order=EJinjaExpressionAndString)? &
		('throttle:' throttle=ENumberPassed)? &
		('run_once:' run_once=EBooleanPassed)?
	)
	END
;

EExecutionExeSettings:
	'exe_settings:'
	BEGIN
	(
		('throttle:' throttle=ENumberPassed)? &
		('run_once:' run_once=EBooleanPassed)?
	)
	END
;

EErrorHandling:
	EBlockAndRoleErrorHandling | EPlayErrorHandling | ETaskHandlerErrorHandling
;

EBlockAndRoleErrorHandling:
	'error_handling:'
	BEGIN
	(
		('any_errors_fatal:' any_errors_fatal=EBooleanPassed)? &
		('ignore_errors:' ignore_errors=EBooleanPassed)? &
		('ignore_unreachable:' ignore_unreachable=EBooleanPassed)?
	)
	END
;

EPlayErrorHandling:
	'error_handling:'
	BEGIN
	(
		('max_fail_percentage:' max_fail_percentage=ENumberPassed)? &
		('any_errors_fatal:' any_errors_fatal=EBooleanPassed)? &
		('ignore_errors:' ignore_errors=EBooleanPassed)? &
		('ignore_unreachable:' ignore_unreachable=EBooleanPassed)?
	)
	END
;

ETaskHandlerErrorHandling:
	'error_handling:'
	BEGIN
	(
		('changed_when:' changed_when=EJinjaExpressionEvaluationWithoutBrackets)? &
		('failed_when:' failed_when=EJinjaExpressionEvaluationWithoutBrackets)? &
		('any_errors_fatal:' any_errors_fatal=EBooleanPassed)? &
		('ignore_errors:' ignore_errors=EBooleanPassed)? &
		('ignore_unreachable:' ignore_unreachable=EBooleanPassed)?
	)
	END
;

EFactsSettings:
	'facts_settings:'
	BEGIN
	(
		('gather_facts:' gather_facts=EBooleanPassed)? &
		('gather_subset:' gather_subset=EListPassed)? &
		('gather_timeout:'gather_timeout=ENumberPassed)? &
		('fact_path:' fact_path=EJinjaExpressionAndString)?
	)
	END
;

EDelegation:
	'delegation:'
	BEGIN
	(
		('delegate_to:' delegate_to=EJinjaExpressionAndString)? &
		('delegate_facts:' delegate_facts=EBooleanPassed)?
	)
	END
;

EAsynchronousSettings:
	'asynchronous_settings:'
	BEGIN
	(
		('async:' async=ENumberPassed)? &
		('poll:' poll=ENumberPassed)?
	)
	END
;

ENotifiable:
	ENotifiedHandler | ENotifiedTopic
;

ENotifiedHandler:
	name=[EHandler|STRING]
;

ENotifiedTopic:
	'topic:' name=STRING
;

EJinjaExpressionOrString:
	EJinjaExpressionEvaluation | string=STRING
;

EJinjaExpressionAndString:
	(jinja_expression_and_string+=EJinjaExpressionOrString)+
;

EValuePassed:
	EJinjaExpressionAndString | EValueWithoutString
;

EValuePassedToJinjaExpression:
	EValue | ESpecialVariable | EItem | EVariableReference | EFunctionCall | EEmptyCurlyBraces
;

EComposedValue:
	EDictionary | EList
;

EValue:
	EComposedValue | ESimpleValue
;

EValueWithoutString:
	EComposedValue | ESimpleValueWithoutString
;

ESimpleValueWithoutString:
	simple_value=BOOLEAN | simple_value=NULL | simple_value=NUMBER | simple_value=NONE
;
ESimpleValue:
	simple_value_string=STRING | simple_value_without_string=ESimpleValueWithoutString
;

EItem:
	{EItem}
	'item'  //TODO: maybe this should be included in ESpecialVariable, thus it shouldn't exist as a rule?
;

EJinjaExpressionEvaluation:
	'{{' jinja_expression=EJinjaExpressionEvaluationWithoutBrackets '}}'
;

EJinjaExpressionEvaluationWithoutBrackets:
	EFilteredExpression | EIfExpression
;

EFunctionCall:
	name=ID ('(' parameters+=EFilteredExpression (',' parameters+=EFilteredExpression)* ')' | empty_brackets='()')? //TODO maybe it's better to call it "function_name" instead of "name"
;

EFilteredExpression:
	to_filter=EOrExpression ('|' filter=EFilteredExpression)?
;

EOrExpression:
	left_or=EAndExpression ('or' right_or=EOrExpression)?
;

EAndExpression:
	left_and=ETruthExpression ('and' right_and=EAndExpression)?
;

ETruthExpression:
	left_value=EOperation (equality_sign=('==' | '!=' | '<' | '>' | '<=' | '>=') right_value=ETruthExpression)?
;

EOperation:
	left_operand=EIsExpression (operator=('+' | '-' | '/' | '//' | '%' | '*' | '**') right_operand=EOperation)?
;

EIsExpression:
	(not='not')? parenthesised_expression=EParenthesisedExpression ('is' status=EIsExpression | (not_in='not')? 'in' container_expression=EIsExpression)?
;

EParenthesisedExpression:
	(basic_value=EValuePassedToJinjaExpression | '(' parenthesised_term=EFilteredExpression ')') ('[' index=NUMBER ']')? ('.' tail+=ETailElement)*
;

EIfExpression:
	'return' if_expression=EFilteredExpression 'if' if_condition=EFilteredExpression ('else' else_expression=EFilteredExpression)?
;

EDictionaryPairReference:
	name=[EDictionaryPair|ID] ('[' index=NUMBER ']')?
;

EVariableDeclarationVariableReference:
	'declared_variable:' variable_declaration_variable_reference=[EVariableDeclaration|ID]
;

ERegisterVariableReference:
	'registered_variable:' register_variable_reference=[ERegisterVariable|ID]
;

EVariableDeclaration:
	name=ID ':' value_passed=EValuePassed
;

EIndexOrLoopVariable:
	name=ID
;

EIndexOrLoopVariableReference:
	'index_or_loop_var:' name=[EIndexOrLoopVariable|ID]
;

ERegisterVariable:
	'register:' name=ID
;

EInputOperationVariableReference:
	'operation_input:' name=[rm::EParameterDefinition|STRING]
;

EInputInterfaceVariableReference:
	'interface_input:' name=[rm::EPropertyDefinition|STRING]
;

ESetFactVariableReference:
	'fact_set:' name=[EParameter]
;

EVariableReference:
	EVariableDeclarationVariableReference | ERegisterVariableReference | EInputOperationVariableReference | EInputInterfaceVariableReference | EIndexOrLoopVariableReference | ESetFactVariableReference
;

ESpecialVariable: //https://docs.ansible.com/ansible/latest/reference_appendices/special_variables.html
	{ESpecialVariable}
	'special_variable:' name=ID
;

ETailElement:
	function_call=EFunctionCall ('[' index=NUMBER ']')?
;

EDictionary:
	('{' dictionary_pairs+=EDictionaryPair (',' dictionary_pairs+=EDictionaryPair)* '}') |
	BEGIN
		(dictionary_pairs+=EDictionaryPair)+
	END
;

EDictionaryPair:
	name=ID ':' value=EValuePassed
;

EList:
	'[' elements+=EValuePassed (',' elements+=EValuePassed)* ']'
;

EDictionaryPassed:
	EJinjaExpressionEvaluation | EDictionary
;

EListPassed:
	EJinjaExpressionEvaluation | EList
;

ENumberPassed:
	EJinjaExpressionEvaluation | number_passed=NUMBER | number_passed=NULL
;

EBooleanPassed:
	EJinjaExpressionEvaluation | boolean_passed=BOOLEAN | boolean_passed=NULL
;

EEmptyCurlyBraces:
	left_curly_brace='{' right_curly_brace='}'
;

terminal BOOLEAN:
	'True' |'False'
;

terminal NULL:
	'Null'
;

terminal NONE:
	'None'
;

terminal NUMBER:
	(('1'..'9')('0'..'9')* | '0') ('.'('0'..'9')+)?
;

//Positional blocks delimited with indentation
terminal BEGIN: 'synthetic:BEGIN';
terminal END: 'synthetic:END';












