/*
 * generated by Xtext 2.17.1
 */
package org.sodalite.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.sodalite.dsl.rM.EArtifactType;
import org.sodalite.dsl.rM.EArtifactTypes;
import org.sodalite.dsl.rM.EAttributeDefinition;
import org.sodalite.dsl.rM.EAttributes;
import org.sodalite.dsl.rM.ECapabilities;
import org.sodalite.dsl.rM.ECapabilityDefinition;
import org.sodalite.dsl.rM.ECapabilityType;
import org.sodalite.dsl.rM.ECapabilityTypes;
import org.sodalite.dsl.rM.EConstraints;
import org.sodalite.dsl.rM.EDataType;
import org.sodalite.dsl.rM.EDataTypes;
import org.sodalite.dsl.rM.EEqual;
import org.sodalite.dsl.rM.EGreaterOrEqual;
import org.sodalite.dsl.rM.EGreaterThan;
import org.sodalite.dsl.rM.EInRange;
import org.sodalite.dsl.rM.EInputs;
import org.sodalite.dsl.rM.EInterfaceDefinition;
import org.sodalite.dsl.rM.EInterfaceType;
import org.sodalite.dsl.rM.EInterfaceTypes;
import org.sodalite.dsl.rM.EInterfaces;
import org.sodalite.dsl.rM.ELength;
import org.sodalite.dsl.rM.ELessOrEqual;
import org.sodalite.dsl.rM.ELessThan;
import org.sodalite.dsl.rM.EMaxLength;
import org.sodalite.dsl.rM.EMinLength;
import org.sodalite.dsl.rM.ENodeType;
import org.sodalite.dsl.rM.ENodeTypes;
import org.sodalite.dsl.rM.EOperationDefinition;
import org.sodalite.dsl.rM.EOperations;
import org.sodalite.dsl.rM.EParameterDefinition;
import org.sodalite.dsl.rM.EPolicyType;
import org.sodalite.dsl.rM.EPolicyTypes;
import org.sodalite.dsl.rM.EProperties;
import org.sodalite.dsl.rM.EPropertyDefinition;
import org.sodalite.dsl.rM.ERelationshipType;
import org.sodalite.dsl.rM.ERelationshipTypes;
import org.sodalite.dsl.rM.ERequirementDefinition;
import org.sodalite.dsl.rM.ERequirements;
import org.sodalite.dsl.rM.EValid_Values;
import org.sodalite.dsl.rM.EValueExpression;
import org.sodalite.dsl.rM.GetAttribute;
import org.sodalite.dsl.rM.GetProperty;
import org.sodalite.dsl.rM.RMPackage;
import org.sodalite.dsl.rM.RM_Model;
import org.sodalite.dsl.services.RMGrammarAccess;

@SuppressWarnings("all")
public class RMSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RMGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RMPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RMPackage.EARTIFACT_TYPE:
				sequence_EArtifactType(context, (EArtifactType) semanticObject); 
				return; 
			case RMPackage.EARTIFACT_TYPES:
				sequence_EArtifactTypes(context, (EArtifactTypes) semanticObject); 
				return; 
			case RMPackage.EATTRIBUTE_DEFINITION:
				sequence_EAttributeDefinition(context, (EAttributeDefinition) semanticObject); 
				return; 
			case RMPackage.EATTRIBUTES:
				sequence_EAttributes(context, (EAttributes) semanticObject); 
				return; 
			case RMPackage.ECAPABILITIES:
				sequence_ECapabilities(context, (ECapabilities) semanticObject); 
				return; 
			case RMPackage.ECAPABILITY_DEFINITION:
				sequence_ECapabilityDefinition(context, (ECapabilityDefinition) semanticObject); 
				return; 
			case RMPackage.ECAPABILITY_TYPE:
				sequence_ECapabilityType(context, (ECapabilityType) semanticObject); 
				return; 
			case RMPackage.ECAPABILITY_TYPES:
				sequence_ECapabilityTypes(context, (ECapabilityTypes) semanticObject); 
				return; 
			case RMPackage.ECONSTRAINTS:
				sequence_EConstraints(context, (EConstraints) semanticObject); 
				return; 
			case RMPackage.EDATA_TYPE:
				sequence_EDataType(context, (EDataType) semanticObject); 
				return; 
			case RMPackage.EDATA_TYPES:
				sequence_EDataTypes(context, (EDataTypes) semanticObject); 
				return; 
			case RMPackage.EEQUAL:
				sequence_EEqual(context, (EEqual) semanticObject); 
				return; 
			case RMPackage.EGREATER_OR_EQUAL:
				sequence_EGreaterOrEqual(context, (EGreaterOrEqual) semanticObject); 
				return; 
			case RMPackage.EGREATER_THAN:
				sequence_EGreaterThan(context, (EGreaterThan) semanticObject); 
				return; 
			case RMPackage.EIN_RANGE:
				sequence_EInRange(context, (EInRange) semanticObject); 
				return; 
			case RMPackage.EINPUTS:
				sequence_EInputs(context, (EInputs) semanticObject); 
				return; 
			case RMPackage.EINTERFACE_DEFINITION:
				sequence_EInterfaceDefinition(context, (EInterfaceDefinition) semanticObject); 
				return; 
			case RMPackage.EINTERFACE_TYPE:
				sequence_EInterfaceType(context, (EInterfaceType) semanticObject); 
				return; 
			case RMPackage.EINTERFACE_TYPES:
				sequence_EInterfaceTypes(context, (EInterfaceTypes) semanticObject); 
				return; 
			case RMPackage.EINTERFACES:
				sequence_EInterfaces(context, (EInterfaces) semanticObject); 
				return; 
			case RMPackage.ELENGTH:
				sequence_ELength(context, (ELength) semanticObject); 
				return; 
			case RMPackage.ELESS_OR_EQUAL:
				sequence_ELessOrEqual(context, (ELessOrEqual) semanticObject); 
				return; 
			case RMPackage.ELESS_THAN:
				sequence_ELessThan(context, (ELessThan) semanticObject); 
				return; 
			case RMPackage.EMAX_LENGTH:
				sequence_EMaxLength(context, (EMaxLength) semanticObject); 
				return; 
			case RMPackage.EMIN_LENGTH:
				sequence_EMinLength(context, (EMinLength) semanticObject); 
				return; 
			case RMPackage.ENODE_TYPE:
				sequence_ENodeType(context, (ENodeType) semanticObject); 
				return; 
			case RMPackage.ENODE_TYPES:
				sequence_ENodeTypes(context, (ENodeTypes) semanticObject); 
				return; 
			case RMPackage.EOPERATION_DEFINITION:
				sequence_EOperationDefinition(context, (EOperationDefinition) semanticObject); 
				return; 
			case RMPackage.EOPERATIONS:
				sequence_EOperations(context, (EOperations) semanticObject); 
				return; 
			case RMPackage.EPARAMETER_DEFINITION:
				sequence_EParameterDefinition(context, (EParameterDefinition) semanticObject); 
				return; 
			case RMPackage.EPOLICY_TYPE:
				sequence_EPolicyType(context, (EPolicyType) semanticObject); 
				return; 
			case RMPackage.EPOLICY_TYPES:
				sequence_EPolicyTypes(context, (EPolicyTypes) semanticObject); 
				return; 
			case RMPackage.EPROPERTIES:
				sequence_EProperties(context, (EProperties) semanticObject); 
				return; 
			case RMPackage.EPROPERTY_DEFINITION:
				sequence_EPropertyDefinition(context, (EPropertyDefinition) semanticObject); 
				return; 
			case RMPackage.ERELATIONSHIP_TYPE:
				sequence_ERelationshipType(context, (ERelationshipType) semanticObject); 
				return; 
			case RMPackage.ERELATIONSHIP_TYPES:
				sequence_ERelationshipTypes(context, (ERelationshipTypes) semanticObject); 
				return; 
			case RMPackage.EREQUIREMENT_DEFINITION:
				sequence_ERequirementDefinition(context, (ERequirementDefinition) semanticObject); 
				return; 
			case RMPackage.EREQUIREMENTS:
				sequence_ERequirements(context, (ERequirements) semanticObject); 
				return; 
			case RMPackage.EVALID_VALUES:
				sequence_EValid_Values(context, (EValid_Values) semanticObject); 
				return; 
			case RMPackage.EVALUE_EXPRESSION:
				sequence_EValueExpression(context, (EValueExpression) semanticObject); 
				return; 
			case RMPackage.GET_ATTRIBUTE:
				sequence_GetAttribute(context, (GetAttribute) semanticObject); 
				return; 
			case RMPackage.GET_PROPERTY:
				sequence_GetProperty(context, (GetProperty) semanticObject); 
				return; 
			case RMPackage.RM_MODEL:
				sequence_RM_Model(context, (RM_Model) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     EArtifactType returns EArtifactType
	 *
	 * Constraint:
	 *     (name=QUALIFIED_NAME superType=[EArtifactType|QUALIFIED_NAME]? description=STRING? mime_type=STRING? file_ext=STRING?)
	 */
	protected void sequence_EArtifactType(ISerializationContext context, EArtifactType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EArtifactTypes returns EArtifactTypes
	 *
	 * Constraint:
	 *     artifactTypes+=EArtifactType+
	 */
	protected void sequence_EArtifactTypes(ISerializationContext context, EArtifactTypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAttributeDefinition returns EAttributeDefinition
	 *
	 * Constraint:
	 *     (name=ID type=[EDataType|EDataTypeName] description=STRING? entry_schema=[EDataType|EDataTypeName]?)
	 */
	protected void sequence_EAttributeDefinition(ISerializationContext context, EAttributeDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EAttributes returns EAttributes
	 *
	 * Constraint:
	 *     attributes+=EAttributeDefinition*
	 */
	protected void sequence_EAttributes(ISerializationContext context, EAttributes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ECapabilities returns ECapabilities
	 *
	 * Constraint:
	 *     capabilities+=ECapabilityDefinition*
	 */
	protected void sequence_ECapabilities(ISerializationContext context, ECapabilities semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ECapabilityDefinition returns ECapabilityDefinition
	 *
	 * Constraint:
	 *     (name=ID type=[ECapabilityType|QUALIFIED_NAME] description=STRING? valid_source_types=STRING? (start=STRING end=STRING)?)
	 */
	protected void sequence_ECapabilityDefinition(ISerializationContext context, ECapabilityDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ECapabilityType returns ECapabilityType
	 *
	 * Constraint:
	 *     (name=QUALIFIED_NAME superType=[ECapabilityType|QUALIFIED_NAME]? description=STRING? properties=EProperties? atributes=EAttributes?)
	 */
	protected void sequence_ECapabilityType(ISerializationContext context, ECapabilityType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ECapabilityTypes returns ECapabilityTypes
	 *
	 * Constraint:
	 *     capabilityTypes+=ECapabilityType+
	 */
	protected void sequence_ECapabilityTypes(ISerializationContext context, ECapabilityTypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EConstraints returns EConstraints
	 *
	 * Constraint:
	 *     constraints+=EConstraint*
	 */
	protected void sequence_EConstraints(ISerializationContext context, EConstraints semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EDataType returns EDataType
	 *
	 * Constraint:
	 *     (name=EDataTypeName superType=[EDataType|EDataTypeName]? description=STRING? constraints=EConstraints? properties=EProperties?)
	 */
	protected void sequence_EDataType(ISerializationContext context, EDataType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EDataTypes returns EDataTypes
	 *
	 * Constraint:
	 *     dataTypes+=EDataType+
	 */
	protected void sequence_EDataTypes(ISerializationContext context, EDataTypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EConstraint returns EEqual
	 *     EEqual returns EEqual
	 *
	 * Constraint:
	 *     val=STRING
	 */
	protected void sequence_EEqual(ISerializationContext context, EEqual semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RMPackage.Literals.EEQUAL__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RMPackage.Literals.EEQUAL__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEEqualAccess().getValSTRINGTerminalRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EConstraint returns EGreaterOrEqual
	 *     EGreaterOrEqual returns EGreaterOrEqual
	 *
	 * Constraint:
	 *     val=STRING
	 */
	protected void sequence_EGreaterOrEqual(ISerializationContext context, EGreaterOrEqual semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RMPackage.Literals.EGREATER_OR_EQUAL__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RMPackage.Literals.EGREATER_OR_EQUAL__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEGreaterOrEqualAccess().getValSTRINGTerminalRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EConstraint returns EGreaterThan
	 *     EGreaterThan returns EGreaterThan
	 *
	 * Constraint:
	 *     val=STRING
	 */
	protected void sequence_EGreaterThan(ISerializationContext context, EGreaterThan semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RMPackage.Literals.EGREATER_THAN__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RMPackage.Literals.EGREATER_THAN__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEGreaterThanAccess().getValSTRINGTerminalRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EConstraint returns EInRange
	 *     EInRange returns EInRange
	 *
	 * Constraint:
	 *     (start=STRING end=STRING)
	 */
	protected void sequence_EInRange(ISerializationContext context, EInRange semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RMPackage.Literals.EIN_RANGE__START) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RMPackage.Literals.EIN_RANGE__START));
			if (transientValues.isValueTransient(semanticObject, RMPackage.Literals.EIN_RANGE__END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RMPackage.Literals.EIN_RANGE__END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEInRangeAccess().getStartSTRINGTerminalRuleCall_2_0(), semanticObject.getStart());
		feeder.accept(grammarAccess.getEInRangeAccess().getEndSTRINGTerminalRuleCall_4_0(), semanticObject.getEnd());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EInputs returns EInputs
	 *
	 * Constraint:
	 *     inputs+=EParameterDefinition*
	 */
	protected void sequence_EInputs(ISerializationContext context, EInputs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EInterfaceDefinition returns EInterfaceDefinition
	 *
	 * Constraint:
	 *     (name=ID type=[EInterfaceType|QUALIFIED_NAME] inputs=EProperties? operations=EOperations?)
	 */
	protected void sequence_EInterfaceDefinition(ISerializationContext context, EInterfaceDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EInterfaceType returns EInterfaceType
	 *
	 * Constraint:
	 *     (name=QUALIFIED_NAME superType=[EInterfaceType|QUALIFIED_NAME]? description=STRING? inputs=EProperties? operations=EOperations?)
	 */
	protected void sequence_EInterfaceType(ISerializationContext context, EInterfaceType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EInterfaceTypes returns EInterfaceTypes
	 *
	 * Constraint:
	 *     interfaceTypes+=EInterfaceType+
	 */
	protected void sequence_EInterfaceTypes(ISerializationContext context, EInterfaceTypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EInterfaces returns EInterfaces
	 *
	 * Constraint:
	 *     interfaces+=EInterfaceDefinition*
	 */
	protected void sequence_EInterfaces(ISerializationContext context, EInterfaces semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EConstraint returns ELength
	 *     ELength returns ELength
	 *
	 * Constraint:
	 *     val=STRING
	 */
	protected void sequence_ELength(ISerializationContext context, ELength semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RMPackage.Literals.ELENGTH__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RMPackage.Literals.ELENGTH__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getELengthAccess().getValSTRINGTerminalRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EConstraint returns ELessOrEqual
	 *     ELessOrEqual returns ELessOrEqual
	 *
	 * Constraint:
	 *     val=STRING
	 */
	protected void sequence_ELessOrEqual(ISerializationContext context, ELessOrEqual semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RMPackage.Literals.ELESS_OR_EQUAL__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RMPackage.Literals.ELESS_OR_EQUAL__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getELessOrEqualAccess().getValSTRINGTerminalRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EConstraint returns ELessThan
	 *     ELessThan returns ELessThan
	 *
	 * Constraint:
	 *     val=STRING
	 */
	protected void sequence_ELessThan(ISerializationContext context, ELessThan semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RMPackage.Literals.ELESS_THAN__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RMPackage.Literals.ELESS_THAN__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getELessThanAccess().getValSTRINGTerminalRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EConstraint returns EMaxLength
	 *     EMaxLength returns EMaxLength
	 *
	 * Constraint:
	 *     val=STRING
	 */
	protected void sequence_EMaxLength(ISerializationContext context, EMaxLength semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RMPackage.Literals.EMAX_LENGTH__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RMPackage.Literals.EMAX_LENGTH__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEMaxLengthAccess().getValSTRINGTerminalRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EConstraint returns EMinLength
	 *     EMinLength returns EMinLength
	 *
	 * Constraint:
	 *     val=STRING
	 */
	protected void sequence_EMinLength(ISerializationContext context, EMinLength semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RMPackage.Literals.EMIN_LENGTH__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RMPackage.Literals.EMIN_LENGTH__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEMinLengthAccess().getValSTRINGTerminalRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ENodeType returns ENodeType
	 *
	 * Constraint:
	 *     (
	 *         name=QUALIFIED_NAME 
	 *         superType=[ENodeType|QUALIFIED_NAME]? 
	 *         description=STRING? 
	 *         properties=EProperties? 
	 *         atributes=EAttributes? 
	 *         interfaces=EInterfaces? 
	 *         capabilities=ECapabilities? 
	 *         requirements=ERequirements?
	 *     )
	 */
	protected void sequence_ENodeType(ISerializationContext context, ENodeType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ENodeTypes returns ENodeTypes
	 *
	 * Constraint:
	 *     nodeTypes+=ENodeType+
	 */
	protected void sequence_ENodeTypes(ISerializationContext context, ENodeTypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EOperationDefinition returns EOperationDefinition
	 *
	 * Constraint:
	 *     (name=ID description=STRING? inputs=EInputs? implementation=STRING?)
	 */
	protected void sequence_EOperationDefinition(ISerializationContext context, EOperationDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EOperations returns EOperations
	 *
	 * Constraint:
	 *     operations+=EOperationDefinition*
	 */
	protected void sequence_EOperations(ISerializationContext context, EOperations semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EParameterDefinition returns EParameterDefinition
	 *
	 * Constraint:
	 *     (name=ID value=EValueExpression? default=EValueExpression?)
	 */
	protected void sequence_EParameterDefinition(ISerializationContext context, EParameterDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EPolicyType returns EPolicyType
	 *
	 * Constraint:
	 *     (name=QUALIFIED_NAME superType=[EPolicyType|QUALIFIED_NAME]? description=STRING?)
	 */
	protected void sequence_EPolicyType(ISerializationContext context, EPolicyType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EPolicyTypes returns EPolicyTypes
	 *
	 * Constraint:
	 *     policyTypes+=EPolicyType+
	 */
	protected void sequence_EPolicyTypes(ISerializationContext context, EPolicyTypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EProperties returns EProperties
	 *
	 * Constraint:
	 *     properties+=EPropertyDefinition*
	 */
	protected void sequence_EProperties(ISerializationContext context, EProperties semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EPropertyDefinition returns EPropertyDefinition
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         type=[EDataType|EDataTypeName] 
	 *         description=STRING? 
	 *         required=BOOLEAN? 
	 *         default=EValueExpression? 
	 *         status=STRING? 
	 *         constraints=EConstraints? 
	 *         entry_schema=[EDataType|EDataTypeName]?
	 *     )
	 */
	protected void sequence_EPropertyDefinition(ISerializationContext context, EPropertyDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ERelationshipType returns ERelationshipType
	 *
	 * Constraint:
	 *     (
	 *         name=QUALIFIED_NAME 
	 *         superType=[ERelationshipType|QUALIFIED_NAME]? 
	 *         description=STRING? 
	 *         properties=EProperties? 
	 *         atributes=EAttributes? 
	 *         interfaces=EInterfaces? 
	 *         valid_target_types=STRING?
	 *     )
	 */
	protected void sequence_ERelationshipType(ISerializationContext context, ERelationshipType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ERelationshipTypes returns ERelationshipTypes
	 *
	 * Constraint:
	 *     relationshipTypes+=ERelationshipType+
	 */
	protected void sequence_ERelationshipTypes(ISerializationContext context, ERelationshipTypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ERequirementDefinition returns ERequirementDefinition
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         capability=[ECapabilityType|QUALIFIED_NAME] 
	 *         node=[ENodeType|QUALIFIED_NAME]? 
	 *         relationship=[ERelationshipType|QUALIFIED_NAME]? 
	 *         (start=STRING end=STRING)?
	 *     )
	 */
	protected void sequence_ERequirementDefinition(ISerializationContext context, ERequirementDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ERequirements returns ERequirements
	 *
	 * Constraint:
	 *     requirements+=ERequirementDefinition*
	 */
	protected void sequence_ERequirements(ISerializationContext context, ERequirements semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EConstraint returns EValid_Values
	 *     EValid_Values returns EValid_Values
	 *
	 * Constraint:
	 *     val=STRING
	 */
	protected void sequence_EValid_Values(ISerializationContext context, EValid_Values semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RMPackage.Literals.EVALID_VALUES__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RMPackage.Literals.EVALID_VALUES__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEValid_ValuesAccess().getValSTRINGTerminalRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EValueExpression returns EValueExpression
	 *
	 * Constraint:
	 *     {EValueExpression}
	 */
	protected void sequence_EValueExpression(ISerializationContext context, EValueExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EValueExpression returns GetAttribute
	 *     EFunction returns GetAttribute
	 *     GetAttribute returns GetAttribute
	 *
	 * Constraint:
	 *     (attribute=STRING entity=ENTITY req_cap=STRING?)
	 */
	protected void sequence_GetAttribute(ISerializationContext context, GetAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EValueExpression returns GetProperty
	 *     EFunction returns GetProperty
	 *     GetProperty returns GetProperty
	 *
	 * Constraint:
	 *     (attribute=STRING entity=ENTITY req_cap=STRING?)
	 */
	protected void sequence_GetProperty(ISerializationContext context, GetProperty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RM_Model returns RM_Model
	 *
	 * Constraint:
	 *     (
	 *         (dataTypes=EDataTypes? ((relationshipTypes=ERelationshipTypes policyTypes=EPolicyTypes) | policyTypes=EPolicyTypes)) | 
	 *         (
	 *             dataTypes=EDataTypes? 
	 *             artifactTypes=EArtifactTypes 
	 *             ((relationshipTypes=ERelationshipTypes policyTypes=EPolicyTypes) | policyTypes=EPolicyTypes)
	 *         ) | 
	 *         (
	 *             (
	 *                 (dataTypes=EDataTypes? capabilityTypes=ECapabilityTypes) | 
	 *                 (dataTypes=EDataTypes? artifactTypes=EArtifactTypes capabilityTypes=ECapabilityTypes) | 
	 *                 capabilityTypes=ECapabilityTypes
	 *             ) 
	 *             ((relationshipTypes=ERelationshipTypes policyTypes=EPolicyTypes) | policyTypes=EPolicyTypes)
	 *         ) | 
	 *         (
	 *             (
	 *                 (dataTypes=EDataTypes? ((capabilityTypes=ECapabilityTypes interfaceTypes=EInterfaceTypes) | interfaceTypes=EInterfaceTypes)) | 
	 *                 (
	 *                     dataTypes=EDataTypes? 
	 *                     artifactTypes=EArtifactTypes 
	 *                     ((capabilityTypes=ECapabilityTypes interfaceTypes=EInterfaceTypes) | interfaceTypes=EInterfaceTypes)
	 *                 ) | 
	 *                 (capabilityTypes=ECapabilityTypes interfaceTypes=EInterfaceTypes) | 
	 *                 interfaceTypes=EInterfaceTypes
	 *             ) 
	 *             ((relationshipTypes=ERelationshipTypes policyTypes=EPolicyTypes) | policyTypes=EPolicyTypes)
	 *         ) | 
	 *         (
	 *             (
	 *                 (dataTypes=EDataTypes? ((interfaceTypes=EInterfaceTypes relationshipTypes=ERelationshipTypes) | relationshipTypes=ERelationshipTypes)) | 
	 *                 (
	 *                     dataTypes=EDataTypes? 
	 *                     artifactTypes=EArtifactTypes 
	 *                     ((interfaceTypes=EInterfaceTypes relationshipTypes=ERelationshipTypes) | relationshipTypes=ERelationshipTypes)
	 *                 ) | 
	 *                 (
	 *                     (
	 *                         (dataTypes=EDataTypes? capabilityTypes=ECapabilityTypes) | 
	 *                         (dataTypes=EDataTypes? artifactTypes=EArtifactTypes capabilityTypes=ECapabilityTypes) | 
	 *                         capabilityTypes=ECapabilityTypes
	 *                     ) 
	 *                     ((interfaceTypes=EInterfaceTypes relationshipTypes=ERelationshipTypes) | relationshipTypes=ERelationshipTypes)
	 *                 ) | 
	 *                 (interfaceTypes=EInterfaceTypes relationshipTypes=ERelationshipTypes) | 
	 *                 relationshipTypes=ERelationshipTypes
	 *             )? 
	 *             nodeTypes=ENodeTypes 
	 *             policyTypes=EPolicyTypes
	 *         ) | 
	 *         (relationshipTypes=ERelationshipTypes policyTypes=EPolicyTypes) | 
	 *         policyTypes=EPolicyTypes
	 *     )?
	 */
	protected void sequence_RM_Model(ISerializationContext context, RM_Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
