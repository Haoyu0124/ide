/**
 * generated by Xtext 2.23.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.EConditionalExpression;
import org.sodalite.sdl.ansible.ansibleDsl.EConditionalFormula;
import org.sodalite.sdl.ansible.ansibleDsl.EValuePassed;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EConditional Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EConditionalExpressionImpl#getLeft_term <em>Left term</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EConditionalExpressionImpl#getRight_term <em>Right term</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EConditionalExpressionImpl#getFormula <em>Formula</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EConditionalExpressionImpl#getIs_true <em>Is true</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EConditionalExpressionImpl extends MinimalEObjectImpl.Container implements EConditionalExpression
{
  /**
   * The cached value of the '{@link #getLeft_term() <em>Left term</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft_term()
   * @generated
   * @ordered
   */
  protected EValuePassed left_term;

  /**
   * The cached value of the '{@link #getRight_term() <em>Right term</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight_term()
   * @generated
   * @ordered
   */
  protected EValuePassed right_term;

  /**
   * The cached value of the '{@link #getFormula() <em>Formula</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFormula()
   * @generated
   * @ordered
   */
  protected EConditionalFormula formula;

  /**
   * The default value of the '{@link #getIs_true() <em>Is true</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIs_true()
   * @generated
   * @ordered
   */
  protected static final String IS_TRUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIs_true() <em>Is true</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIs_true()
   * @generated
   * @ordered
   */
  protected String is_true = IS_TRUE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EConditionalExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnsibleDslPackage.Literals.ECONDITIONAL_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EValuePassed getLeft_term()
  {
    return left_term;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeft_term(EValuePassed newLeft_term, NotificationChain msgs)
  {
    EValuePassed oldLeft_term = left_term;
    left_term = newLeft_term;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ECONDITIONAL_EXPRESSION__LEFT_TERM, oldLeft_term, newLeft_term);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLeft_term(EValuePassed newLeft_term)
  {
    if (newLeft_term != left_term)
    {
      NotificationChain msgs = null;
      if (left_term != null)
        msgs = ((InternalEObject)left_term).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ECONDITIONAL_EXPRESSION__LEFT_TERM, null, msgs);
      if (newLeft_term != null)
        msgs = ((InternalEObject)newLeft_term).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ECONDITIONAL_EXPRESSION__LEFT_TERM, null, msgs);
      msgs = basicSetLeft_term(newLeft_term, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ECONDITIONAL_EXPRESSION__LEFT_TERM, newLeft_term, newLeft_term));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EValuePassed getRight_term()
  {
    return right_term;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRight_term(EValuePassed newRight_term, NotificationChain msgs)
  {
    EValuePassed oldRight_term = right_term;
    right_term = newRight_term;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ECONDITIONAL_EXPRESSION__RIGHT_TERM, oldRight_term, newRight_term);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRight_term(EValuePassed newRight_term)
  {
    if (newRight_term != right_term)
    {
      NotificationChain msgs = null;
      if (right_term != null)
        msgs = ((InternalEObject)right_term).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ECONDITIONAL_EXPRESSION__RIGHT_TERM, null, msgs);
      if (newRight_term != null)
        msgs = ((InternalEObject)newRight_term).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ECONDITIONAL_EXPRESSION__RIGHT_TERM, null, msgs);
      msgs = basicSetRight_term(newRight_term, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ECONDITIONAL_EXPRESSION__RIGHT_TERM, newRight_term, newRight_term));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EConditionalFormula getFormula()
  {
    return formula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFormula(EConditionalFormula newFormula, NotificationChain msgs)
  {
    EConditionalFormula oldFormula = formula;
    formula = newFormula;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ECONDITIONAL_EXPRESSION__FORMULA, oldFormula, newFormula);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFormula(EConditionalFormula newFormula)
  {
    if (newFormula != formula)
    {
      NotificationChain msgs = null;
      if (formula != null)
        msgs = ((InternalEObject)formula).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ECONDITIONAL_EXPRESSION__FORMULA, null, msgs);
      if (newFormula != null)
        msgs = ((InternalEObject)newFormula).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AnsibleDslPackage.ECONDITIONAL_EXPRESSION__FORMULA, null, msgs);
      msgs = basicSetFormula(newFormula, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ECONDITIONAL_EXPRESSION__FORMULA, newFormula, newFormula));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIs_true()
  {
    return is_true;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIs_true(String newIs_true)
  {
    String oldIs_true = is_true;
    is_true = newIs_true;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.ECONDITIONAL_EXPRESSION__IS_TRUE, oldIs_true, is_true));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ECONDITIONAL_EXPRESSION__LEFT_TERM:
        return basicSetLeft_term(null, msgs);
      case AnsibleDslPackage.ECONDITIONAL_EXPRESSION__RIGHT_TERM:
        return basicSetRight_term(null, msgs);
      case AnsibleDslPackage.ECONDITIONAL_EXPRESSION__FORMULA:
        return basicSetFormula(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ECONDITIONAL_EXPRESSION__LEFT_TERM:
        return getLeft_term();
      case AnsibleDslPackage.ECONDITIONAL_EXPRESSION__RIGHT_TERM:
        return getRight_term();
      case AnsibleDslPackage.ECONDITIONAL_EXPRESSION__FORMULA:
        return getFormula();
      case AnsibleDslPackage.ECONDITIONAL_EXPRESSION__IS_TRUE:
        return getIs_true();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ECONDITIONAL_EXPRESSION__LEFT_TERM:
        setLeft_term((EValuePassed)newValue);
        return;
      case AnsibleDslPackage.ECONDITIONAL_EXPRESSION__RIGHT_TERM:
        setRight_term((EValuePassed)newValue);
        return;
      case AnsibleDslPackage.ECONDITIONAL_EXPRESSION__FORMULA:
        setFormula((EConditionalFormula)newValue);
        return;
      case AnsibleDslPackage.ECONDITIONAL_EXPRESSION__IS_TRUE:
        setIs_true((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ECONDITIONAL_EXPRESSION__LEFT_TERM:
        setLeft_term((EValuePassed)null);
        return;
      case AnsibleDslPackage.ECONDITIONAL_EXPRESSION__RIGHT_TERM:
        setRight_term((EValuePassed)null);
        return;
      case AnsibleDslPackage.ECONDITIONAL_EXPRESSION__FORMULA:
        setFormula((EConditionalFormula)null);
        return;
      case AnsibleDslPackage.ECONDITIONAL_EXPRESSION__IS_TRUE:
        setIs_true(IS_TRUE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.ECONDITIONAL_EXPRESSION__LEFT_TERM:
        return left_term != null;
      case AnsibleDslPackage.ECONDITIONAL_EXPRESSION__RIGHT_TERM:
        return right_term != null;
      case AnsibleDslPackage.ECONDITIONAL_EXPRESSION__FORMULA:
        return formula != null;
      case AnsibleDslPackage.ECONDITIONAL_EXPRESSION__IS_TRUE:
        return IS_TRUE_EDEFAULT == null ? is_true != null : !IS_TRUE_EDEFAULT.equals(is_true);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (is_true: ");
    result.append(is_true);
    result.append(')');
    return result.toString();
  }

} //EConditionalExpressionImpl
