node_types{
	
	sodalite.nodes.DockerHost {
		derived_from: tosca.nodes.SoftwareComponent	
		properties{
			registry_ip{
				type: string
				description: 'IP of the SODALITE docker registry'
				required: true
				default: "localhost"
			}
		}
		attributes{
			registry_ip{
				type: string
				description: 'IP of the SODALITE docker registry'
			}
		}
		interfaces{
			Standard{
				type: tosca.interfaces.node.lifecycle.Standard
				operations{
					create{
						inputs{
							registry_ip {
								default:
									get_attribute{
										attribute: 'registry_ip'
										entity: SELF
									}
							}
							public_ipv4_address{
								default:
									get_attribute{
										attribute: 'public_address'
										entity: SELF
										req_cap: 'host'
									}
							}
						}
						implementation: 'playbooks/docker/create_docker_host.yml'
					}
					delete{
						inputs{
							registry_ip{
								default:
									get_property{
										property: 'registry_ip'
										entity: SELF
									}
							}
						}
						implementation: 'playbooks/docker/destroy_docker_host.yml'
					}
				}
			}
		}
		capabilities{
			host{
				type: tosca.capabilities.Compute
				valid_source_types: '[ sodalite.nodes.DockerizedComponent ]'
			}
		}
	}
	
	sodalite.nodes.DockerizedComponent{
		derived_from: tosca.nodes.SoftwareComponent
		properties{
			image_name{
				type: string
				description: 'The name of the image on the host'
				required: true
			}
			ports{
				type: string
				description: 'Port binding for the docker container "exposed:internal" like "8081:8080"'
				required: true
			}
			exposed_ports{
				type: string
				description: 'Exposed ports of the container like "8081"'
				required: true
			}
		}
		interfaces{
			Standard{
				type: tosca.interfaces.node.lifecycle.Standard
				operations{
					create{
						inputs{
							registry_ip{
								default:
									get_attribute{
										attribute: "registry_ip"
										entity: SELF
									}
							}
							image_name{
								default:
									get_property{
										property: "image_name"
										entity: SELF
									}
							}
							ports{
								default:
									get_property{
										property: "ports"
										entity: SELF
									}
							}
							exposed_ports {
								default:
									get_property{
										property: "exposed_ports"
										entity: SELF
									}
							}
						}
						implementation: "playbooks/docker/dockerized_component_deploy.yml"
					}
					delete{
						inputs{
							image_name{
								default:
									get_property{
										property: "image_name"
										entity: SELF
									}
							}
							registry_ip{
								default:
									get_attribute{
										attribute: "registry_ip"
										entity: SELF
										req_cap: 'host'
									}
							}
						}
						implementation: "playbooks/docker/dockerized_component_undeploy.yml"
					}
				}
			}
		}
		requirements{
			host{
				capability: tosca.capabilities.Compute
				node: sodalite.nodes.DockerHost
				relationship: tosca.relationships.HostedOn
			}
		}
	}
	
	sodalite.nodes.VM.OpenStack{
		derived_from:tosca.nodes.Compute
		properties{
			name{
				type: string
				description: 'Name that should be given to the VM in OpenStack'
			}
			image{
				type: string
				description: 'OpenStack image id (image names are not accepted)'
			}
			flavor{
				type: string
				description: 'OpenStack flavor id (flavor names are not accepted)'
			}
			network{
				type: string
				description: 'OpenStack network id (network names are not accepted)'
			}
			security_groups{
				type: string
				description: 'OpenStack names of the security groups to which the instance should be added.Comma separated string.'
			}
			key_name{
				type: string
				description: 'OpenStack SSH key name that should be placed on the VM'
			}
		}
		attributes{
			id{
				type: string
				description: 'OpenStack id of the VM'
			}
			private_address{
				type: string
				description: 'Private ipv4'
			}
			public_address{
				type: string
				description: 'Public ipv4'
			}
		}
		interfaces{
			Standard{
				type: tosca.interfaces.node.lifecycle.Standard
				operations{
					create{
						inputs{
							vm_name{
								default:
									get_property{
										property: "name"
										entity: SELF
									}
							}
							image{
								default:
									get_property{
										property: "image"
										entity: SELF
									}
							}
							flavor{
								default:
									get_property{
										property: "flavor"
										entity: SELF
									}
							}
							network{
								default:
									get_property{
										property: "network"
										entity: SELF
									}
							}
							security_groups{
								default:
									get_property{
										property:"security_groups"
										entity: SELF
									}									
							}
						}
						implementation: 'playbooks/vm/create.yml'
					}
					delete{
						inputs{
								id{
									default:
										get_attribute{
											attribute: "id"
											entity: SELF
										}
								}
						}
						implementation: "playbooks/vm/delete.yml"
					}
				}
			}
		}
	}
}
