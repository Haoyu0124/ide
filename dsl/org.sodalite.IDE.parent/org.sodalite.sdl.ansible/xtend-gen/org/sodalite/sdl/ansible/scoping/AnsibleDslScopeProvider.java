/**
 * generated by Xtext 2.23.0
 */
package org.sodalite.sdl.ansible.scoping;

import com.google.common.base.Objects;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.ERole;
import org.sodalite.sdl.ansible.ansibleDsl.impl.EDeclaredVariableImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.EFilteredVariableImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.EPlayImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.ERoleCallsImpl;
import org.sodalite.sdl.ansible.ansibleDsl.impl.ERoleImpl;
import org.sodalite.sdl.ansible.scoping.AbstractAnsibleDslScopeProvider;

/**
 * This class contains custom scoping description.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class AnsibleDslScopeProvider extends AbstractAnsibleDslScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    if (((context instanceof EFilteredVariableImpl) && Objects.equal(reference, AnsibleDslPackage.Literals.EFILTERED_VARIABLE__VARIABLE))) {
      final EPlayImpl rootPlay = EcoreUtil2.<EPlayImpl>getContainerOfType(context, EPlayImpl.class);
      if ((rootPlay != null)) {
        final List<EDeclaredVariableImpl> candidates = EcoreUtil2.<EDeclaredVariableImpl>getAllContentsOfType(rootPlay, EDeclaredVariableImpl.class);
        final List<ERoleCallsImpl> roleCalls = EcoreUtil2.<ERoleCallsImpl>getAllContentsOfType(rootPlay, ERoleCallsImpl.class);
        for (final ERoleCallsImpl roleCall : roleCalls) {
          EList<ERole> _roles = roleCall.getRoles();
          for (final ERole role : _roles) {
            {
              final List<EDeclaredVariableImpl> candidatesRole = EcoreUtil2.<EDeclaredVariableImpl>getAllContentsOfType(role, EDeclaredVariableImpl.class);
              for (final EDeclaredVariableImpl candidateRole : candidatesRole) {
                candidates.add(candidateRole);
              }
            }
          }
        }
        return Scopes.scopeFor(candidates);
      } else {
        final ERoleImpl rootRole = EcoreUtil2.<ERoleImpl>getContainerOfType(context, ERoleImpl.class);
        final List<EDeclaredVariableImpl> candidates_1 = EcoreUtil2.<EDeclaredVariableImpl>getAllContentsOfType(rootRole, EDeclaredVariableImpl.class);
        return Scopes.scopeFor(candidates_1);
      }
    }
    return super.getScope(context, reference);
  }
}
