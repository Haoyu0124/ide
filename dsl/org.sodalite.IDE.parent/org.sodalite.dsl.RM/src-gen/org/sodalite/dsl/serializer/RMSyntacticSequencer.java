/*
 * generated by Xtext 2.19.0
 */
package org.sodalite.dsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.sodalite.dsl.services.RMGrammarAccess;

@SuppressWarnings("all")
public class RMSyntacticSequencer extends AbstractSyntacticSequencer {

	protected RMGrammarAccess grammarAccess;
	protected AbstractElementAlias match_EArtifactType_File_extKeyword_5_0_p;
	protected AbstractElementAlias match_ECapabilityDefinition___Valid_source_typesKeyword_4_0_LeftSquareBracketKeyword_4_1_RightSquareBracketKeyword_4_3__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (RMGrammarAccess) access;
		match_EArtifactType_File_extKeyword_5_0_p = new TokenAlias(true, false, grammarAccess.getEArtifactTypeAccess().getFile_extKeyword_5_0());
		match_ECapabilityDefinition___Valid_source_typesKeyword_4_0_LeftSquareBracketKeyword_4_1_RightSquareBracketKeyword_4_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getECapabilityDefinitionAccess().getValid_source_typesKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getECapabilityDefinitionAccess().getLeftSquareBracketKeyword_4_1()), new TokenAlias(false, false, grammarAccess.getECapabilityDefinitionAccess().getRightSquareBracketKeyword_4_3()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getSTRINGRule())
			return getSTRINGToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal STRING:
	 * 			'"' ( '\\' .  | !('\\'|'"') )* '"' |
	 * 			"'" ( '\\' .  | !('\\'|"'") )* "'"
	 * 		;
	 */
	protected String getSTRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_EArtifactType_File_extKeyword_5_0_p.equals(syntax))
				emit_EArtifactType_File_extKeyword_5_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ECapabilityDefinition___Valid_source_typesKeyword_4_0_LeftSquareBracketKeyword_4_1_RightSquareBracketKeyword_4_3__q.equals(syntax))
				emit_ECapabilityDefinition___Valid_source_typesKeyword_4_0_LeftSquareBracketKeyword_4_1_RightSquareBracketKeyword_4_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'file_ext:'+
	 *
	 * This ambiguous syntax occurs at:
	 *     description=STRING (ambiguity) file_ext=STRING
	 *     mime_type=STRING (ambiguity) file_ext=STRING
	 *     name=QUALIFIED_NAME '{' (ambiguity) file_ext=STRING
	 *     superType=[EArtifactType|QUALIFIED_NAME] (ambiguity) file_ext=STRING
	 */
	protected void emit_EArtifactType_File_extKeyword_5_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('valid_source_types:' '[' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     description=STRING (ambiguity) 'occurrences:' '[' start=STRING
	 *     description=STRING (ambiguity) '}' (rule end)
	 *     type=[ECapabilityType|QUALIFIED_NAME] (ambiguity) 'occurrences:' '[' start=STRING
	 *     type=[ECapabilityType|QUALIFIED_NAME] (ambiguity) '}' (rule end)
	 */
	protected void emit_ECapabilityDefinition___Valid_source_typesKeyword_4_0_LeftSquareBracketKeyword_4_1_RightSquareBracketKeyword_4_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
