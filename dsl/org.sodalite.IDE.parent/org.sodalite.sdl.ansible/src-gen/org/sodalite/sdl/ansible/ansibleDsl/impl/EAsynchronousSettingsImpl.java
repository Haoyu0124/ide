/**
 * generated by Xtext 2.23.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.EAsynchronousSettings;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EAsynchronous Settings</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EAsynchronousSettingsImpl#getAsync <em>Async</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EAsynchronousSettingsImpl#getPoll <em>Poll</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EAsynchronousSettingsImpl extends MinimalEObjectImpl.Container implements EAsynchronousSettings
{
  /**
   * The default value of the '{@link #getAsync() <em>Async</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAsync()
   * @generated
   * @ordered
   */
  protected static final String ASYNC_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAsync() <em>Async</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAsync()
   * @generated
   * @ordered
   */
  protected String async = ASYNC_EDEFAULT;

  /**
   * The default value of the '{@link #getPoll() <em>Poll</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPoll()
   * @generated
   * @ordered
   */
  protected static final String POLL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPoll() <em>Poll</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPoll()
   * @generated
   * @ordered
   */
  protected String poll = POLL_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EAsynchronousSettingsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnsibleDslPackage.Literals.EASYNCHRONOUS_SETTINGS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAsync()
  {
    return async;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAsync(String newAsync)
  {
    String oldAsync = async;
    async = newAsync;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__ASYNC, oldAsync, async));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPoll()
  {
    return poll;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPoll(String newPoll)
  {
    String oldPoll = poll;
    poll = newPoll;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__POLL, oldPoll, poll));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__ASYNC:
        return getAsync();
      case AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__POLL:
        return getPoll();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__ASYNC:
        setAsync((String)newValue);
        return;
      case AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__POLL:
        setPoll((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__ASYNC:
        setAsync(ASYNC_EDEFAULT);
        return;
      case AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__POLL:
        setPoll(POLL_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__ASYNC:
        return ASYNC_EDEFAULT == null ? async != null : !ASYNC_EDEFAULT.equals(async);
      case AnsibleDslPackage.EASYNCHRONOUS_SETTINGS__POLL:
        return POLL_EDEFAULT == null ? poll != null : !POLL_EDEFAULT.equals(poll);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (async: ");
    result.append(async);
    result.append(", poll: ");
    result.append(poll);
    result.append(')');
    return result.toString();
  }

} //EAsynchronousSettingsImpl
