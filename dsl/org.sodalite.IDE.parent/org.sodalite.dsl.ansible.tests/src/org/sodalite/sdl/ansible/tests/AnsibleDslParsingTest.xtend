/*
 * generated by Xtext 2.23.0
 */
package org.sodalite.sdl.ansible.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.sodalite.sdl.ansible.ansibleDsl.Model
import org.eclipse.xtext.xbase.testing.CompilationTestHelper

@ExtendWith(InjectionExtension)
@InjectWith(AnsibleDslInjectorProvider)
class AnsibleDslParsingTest {
	@Inject
	ParseHelper<Model> parseHelper
	@Inject
	extension CompilationTestHelper
	
	@Test
	def void testHelloWorldTemplate() {
		'''
			/*
			 * This is an example model
			 */
			playbook_name: "hello world playbook"
			plays:
				play:
					play_name: "hello world play"
					hosts: "all"
					tasks_list:
						task_to_execute:
							task_name: "hello world task"
							module: "debug"
								parameters:
									msg: "Hello world!"
			'''.assertCompilesTo('''
			- name: "hello world play"
			  hosts: "all"
			
			  tasks:
			
			    - name: "hello world task"
			      debug:
			        msg: "Hello world!"
			
			''')
	}
	
	@Test
	def void testPrivilegeEscalation() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					privilege_escalation:
						become: no
						become_exe: "become_exe"
						become_flags: "become_flags"
						become_method: "become_method"
						become_user: "become_user"
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			  become: no
			  become_exe: "become_exe"
			  become_flags: "become_flags"
			  become_method: "become_method"
			  become_user: "become_user"
			
		''')		
	}
	
	@Test
	def void testValidationMode() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					validation_mode:
						check_mode: no
						diff: no
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			  check_moode: no
			  diff: no
			
		''')		
	}
	
	@Test
	def void testConnection() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					connection_info:
						connection: "connection"
						port_attribute: 2
						remote_user: "remote_user"
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			  connection: "connection"
			  port: 2
			  remote_user: "remote_user"
			
		''')		
	}
	
	@Test
	def void testVariableDeclarations() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					vars:
						var1: 5
						var2: "string"
						var3: false
						var4: {key1: 1, key2: 2}
						var5: [1, 2, 3]
						var6: {{ declared_variable: var1 }}
						var7: {{ input_var1 }}"string"{{ input_var2 }}
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			  vars:
			    var1: 5
			    var2: "string"
			    var3: false
			    var4: {'key1': 1, 'key2': 2}
			    var5: [1, 2, 3]
			    var6: "{{ var1 }}"
			    var7: "{{ input_var1 }}string{{ input_var2 }}"
			
		''')	
	}
	
	@Test
	def void testOtherBaseAttributes() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					no_log: no
					debugger: "debugger"
					module_defaults: ["1", "2"]
					environment: ["1", "2"]
					collections: ["1", "2"]
					tags_attribute: ["1", "2"]
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			  no_log: no
			  debugger: "debugger"
			  module_defaults: ["1", "2"]
			  environment: ["1", "2"]
			  collections: ["1", "2"]
			  tags: ["1", "2"]
			
		''')		
	}
	
	@Test
	def void testStartOfPlay() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
				play:
					hosts: "all"
				play:
					hosts: "all"
					external_file_inclusion:
						import_playbook: "playbook.yaml"
				play:
					external_file_inclusion:
						import_playbook: "playbook.yaml"
				play:
					external_file_inclusion:
						include: "playbook.yaml"
				play:
					play_name: "name"
					hosts: "all"
					external_file_inclusion:
						include: "playbook.yaml"
						when: False
		'''.assertCompilesTo('''
			- name: "name"
			
			- hosts: "all"
			
			- hosts: "all"
			  import_playbook: playbook.yaml
			
			- import_playbook: playbook.yaml
			
			- include: playbook.yaml
			
			- name: "name"
			  hosts: "all"
			  include: playbook.yaml
			  when: False
			
		''')
	}
	
	@Test
	def void testPlayExeSettings() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					play_exe_settings:
						order: "order"
						run_once: no
						serial: 2
						strategy: "strategy"
						throttle: 2
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			  strategy: "strategy"
			  serial: 2
			  order: "order"
			  throttle: 2
			  run_once: no
			
		''')
	}
	
	@Test
	def void testPlayErrorHandling() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					error_handling:
						any_errors_fatal: no
						ignore_errors: no
						ignore_unreachable: no
						max_fail_percentage: 1
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			  max_fail_percentage: 1
			  any_errors_fatal: no
			  ignore_errors: no
			  ignore_unreachable: no
			
		''')
	}
	
	@Test
	def void testFactsSettings() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					facts_settings:
						fact_path: "path"
						gather_facts: no
						gather_subset: no
						gather_timeout: 2
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			  gather_facts: no
			  gather_subset: no
			  gather_timeout: 2
			  fact_path: "path"
			
		''')
	}
	
	@Test
	def void testPreAndPostTasks() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					pre_tasks:
						task_to_execute:
							module: "module"
					post_tasks:
						task_to_execute:
							module: "module"
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			
			  pre_tasks:
			
			    - module:
			
			  post_tasks:
			
			    - module:
			
		''')
	}
	
	@Test
	def void testRoleInclusion() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					roles_inclusions:
						role:
							role_name: "name"
							error_handling:
								any_errors_fatal: no
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			  roles:
			    - role: "name"
			      any_errors_fatal: no
			
		''')
	}
	
	@Test
	def void testOtherAttributesOfPlay() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					vars_files: ["1", "2"]
					vars_prompt: ["1", "2"]
					force_handlers: no
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			  vars_files: ["1", "2"]
			  vars_prompt: ["1", "2"]
			  force_handlers: no
			
		''')
	}
	
	@Test
	def void testStartOfBlock() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					tasks_list:
						block_to_execute:
							block_name: "name"
							tasks:
								task_to_execute:
									module: "module"
						block_to_execute:
							tasks:
								task_to_execute:
									module: "module"
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			
			  tasks:
			
			    - name: "name"
			      block:
			        - module:
			
			    - block:
			        - module:
			
		''')
	}
	
	@Test
	def void testBlockAndRoleErrorHandling() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					tasks_list:
						block_to_execute:
							block_name: "name"
							error_handling:
								any_errors_fatal: no
								ignore_errors: no
								ignore_unreachable: no
							tasks:
								task_to_execute:
									module: "module"
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			
			  tasks:
			
			    - name: "name"
			      block:
			        - module:
			      any_errors_fatal: no
			      ignore_errors: no
			      ignore_unreachable: no
			
		''')
	}
	
	@Test
	def void testRescueAndAlwaysTasks() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					tasks_list:
						block_to_execute:
							block_name: "name"
							rescue_tasks:
								task_to_execute:
									module: "module"
							always_tasks:
								task_to_execute:
									module: "module"					
							tasks:
								task_to_execute:
									module: "module"
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			
			  tasks:
			
			    - name: "name"
			      block:
			        - module:
			      rescue: 
			        - module:
			      always: 
			        - module:
			
		''')
	}
	
	@Test
	def void testExecutionExeSettings() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					tasks_list:
						block_to_execute:
							block_name: "name"
							exe_settings:
								run_once: no
								throttle: 1				
							tasks:
								task_to_execute:
									module: "module"
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			
			  tasks:
			
			    - name: "name"
			      block:
			        - module:
			      throttle: 1
			      run_once: no
			
		''')
	}
	
	
	@Test
	def void testDelegation() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					tasks_list:
						block_to_execute:
							block_name: "name"
							delegation:
								delegate_facts: no
								delegate_to: "delegate_to"			
							tasks:
								task_to_execute:
									module: "module"
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			
			  tasks:
			
			    - name: "name"
			      block:
			        - module:
			      delegate_to: "delegate_to"
			      delegate_facts: no
			
		''')
	}
	
	@Test
	def void testWhenExpression() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					tasks_list:
						block_to_execute:
							block_name: "name"
							when: false		
							tasks:
								task_to_execute:
									module: "module"
									when:
										when_condition: false
										when_condition: false
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			
			  tasks:
			
			    - name: "name"
			      block:
			        - module:
			          when: 
			            - false
			            - false
			      when: false
			
		''')
	}
	
	@Test
	def void testHandlers() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					tasks_list:
						task_to_execute:
							module: "module"
								parameters:
									parameter1: "parameter"
							notify: "handler1", topic: "topic1"
						task_to_execute:
							module: "module"
								direct_parameter: "direct_parameter"
							notify: topic: "topic2"
						task_to_execute:
							task_name: "name1"
							module: "module"
								parameters:
									parameter1: "parameter"
							notify: "handler1", topic: "topic3"
						task_to_execute:
							task_name: "name2"
							module: "module"
							notify: topic: "topic4"
					handlers:
						handler:
							handler_name: "handler1"
							module: "module"
								direct_parameter: "direct_parameter"
						handler:
							module: "module"
							listen: "topic1", "topic2"
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			
			  tasks:
			
			    - module:
			        parameter1: "parameter"
			      notify: ["handler1", "topic1"]
			
			    - module: "direct_parameter"
			      notify: ["topic2"]
			
			    - name: "name1"
			      module:
			        parameter1: "parameter"
			      notify: ["handler1", "topic3"]
			
			    - name: "name2"
			      module:
			      notify: ["topic4"]
			
			  handlers:
			
			    - name: "handler1"
			      module: "direct_parameter"
			
			    - module:
			      listen: ["topic1", "topic2"]
			
		''')
	}
	
	@Test
	def void testTaskHandlerErrorHandling() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					tasks_list:
						task_to_execute:
							module: "module"
								parameters:
									parameter1: "parameter"
							error_handling:
								any_errors_fatal: no
								changed_when: false
								failed_when: false
								ignore_errors: no
								ignore_unreachable: no
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			
			  tasks:
			
			    - module:
			        parameter1: "parameter"
			      change_when: false
			      failed_when: false
			      any_errors_fatal: no
			      ignore_errors: no
			      ignore_unreachable: no
			
		''')
	}
	
	@Test
	def void testAsynchronousSettings() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					tasks_list:
						task_to_execute:
							module: "module"
								parameters:
									parameter1: "parameter"
							asynchronous_settings:
								async: 1
								poll: 1
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			
			  tasks:
			
			    - module:
			        parameter1: "parameter"
			      async: 1
			      poll: 1
			
		''')
	}
	
	@Test
	def void testLoop() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					tasks_list:
						task_to_execute:
							module: "module"
								parameters:
									parameter1: "parameter"
									parameter2: {{ index_or_loop_var: index_var }}
									parameter3: {{ index_or_loop_var: loop_var }}
							loop:
								loop_over: {{ variable }}
								loop_control:
									extended: no
									index_var: index_var
									label: "label"
									loop_var:  loop_var
									pause: 2
						task_to_execute:
							module: "module"
							loop:
								loop_over: 4
						task_to_execute:
							module: "module"
							loop:
								with items: "items"
						task_to_execute:
							module: "module"
							loop:
								until:
									until_condition: "condition"
									delay_attribute: 3
									retries: 3
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			
			  tasks:
			
			    - module:
			        parameter1: "parameter"
			        parameter2: "{{ index_var }}"
			        parameter3: "{{ loop_var }}"
			      loop: "{{ variable }}"
			      label: "label"
			      pause: 2
			      index_var: index_var
			      loop_var: loop_var
			      extended: no
			
			    - module:
			      loop: [4]
			
			    - module:
			      with_items: "items"
			
			    - module:
			      until: "condition"
			      retries: 3
			      delay: 3
			
		''')
	}
	
	@Test
	def void testRegister() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					tasks_list:
						task_to_execute:
							module: "module"
							register: variable
						task_to_execute:
							module: "module"
								parameters:
									parameter1: {{ registered_variable: variable }}
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			
			  tasks:
			
			    - module:
			      register: variable
			
			    - module:
			        parameter1: "{{ variable }}"
			
		''')
	}
	
	@Test
	def void testSetFact() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					tasks_list:
						task_to_execute:
							module: "module"
							register: variable
						task_to_execute:
							module: "set_fact"
								parameters:
									parameter1: {{ registered_variable: variable }}
						task_to_execute:
							module: "module"
								direct_parameter: {{ fact_set: parameter1 }}
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			
			  tasks:
			
			    - module:
			      register: variable
			
			    - set_fact:
			        parameter1: "{{ variable }}"
			
			    - module: "{{ parameter1 }}"
			
		''')
	}
	
	@Test
	def void testOtherAttributesOfTaskHandler() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					tasks_list:
						task_to_execute:
							module: "module"
							action: "action"
							args:
								key1: "1"
								key2: "2"
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			
			  tasks:
			
			    - module:
			      action: "action"
			      args: 
			        'key1': "1"
			        'key2': "2"
			
		''')
	}
	
	@Test
	def void testPassedValues() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name1"
					hosts: "all"
					collections: {{ variable_list }}
					error_handling:
						any_errors_fatal: {{ variable_boolean }}
						max_fail_percentage: {{ variable_number }}
					facts_settings:
						gather_timeout: null
					tasks_list:
						task_to_execute:
							error_handling:
								any_errors_fatal: {% if var == 5 %} {{ variable_boolean }} {% endif %}
							module: "module"
							args: {{ variable_dictionary }}
				play:
					play_name: "name2"
					hosts: "all"
					collections: {% if var == 5 %} {{ variable_list }} {% endif %}
					error_handling:
						max_fail_percentage: {% if var == 5 %} {{ variable_number }} {% endif %}
					tasks_list:
						task_to_execute:
							module: "module"
							args: {% if var == 5 %} {{ variable_dictionary }} {% endif %}
		'''.assertCompilesTo('''
			- name: "name1"
			  hosts: "all"
			  collections: "{{ variable_list }}"
			  max_fail_percentage: "{{ variable_number }}"
			  any_errors_fatal: "{{ variable_boolean }}"
			  gather_timeout: null
			
			  tasks:
			
			    - module:
			      any_errors_fatal: "{% if var == 5 %}"{{ variable_boolean }}"{% endif %}"
			      args: "{{ variable_dictionary }}"
			
			- name: "name2"
			  hosts: "all"
			  collections: "{% if var == 5 %}"{{ variable_list }}"{% endif %}"
			  max_fail_percentage: "{% if var == 5 %}"{{ variable_number }}"{% endif %}"
			
			  tasks:
			
			    - module:
			      args: "{% if var == 5 %}"{{ variable_dictionary }}"{% endif %}"
			
		''')
	}
	
	@Test
	def void testTailElement() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					vars:
						var1: 5
						var2:
							- "first element"
							- "second element"
							- key1: "value1"
							key2: "value2"
					tasks_list:
						task_to_execute:
							module: "module"
								parameters:
									parameter1: {{ variable[1][1:2:3][:2:3][1::3][1:2:][1:2].tail1[declared_variable: var1].tail2().tail3[index].tail4["index"] }}
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			  vars:
			    var1: 5
			    var2: 
			      - "first element"
			      - "second element"
			      - 'key1': "value1"
			        'key2': "value2"
			
			  tasks:
			
			    - module:
			        parameter1: "{{ variable[1][1:2:3][:2:3][1::3][1:2:][1:2].tail1[var1].tail2().tail3[index].tail4['index'] }}"
			
		''')
	}
	
	@Test
	def void testJinjaExpressionEvaluationWithoutBrackets() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					vars:
						var1: true
						var2: {{ 5 if declared_variable: var1 else 6 }}
						var3: {{ (value1 == 6 and value2 == 7) or declared_variable: var1 | toString}}
						var4: {{ 1 + 1 }}
						var5: {{ not declared_variable: var1 }}
						var6: {{ (declared_variable: var4 is 2 or declared_variable: var4 in [5, 6, 7]) and declared_variable: var1 is boolean or declared_variable: var1 not in [1, 2]}}
						var7: {{ concat(first_string="string1", "string2") }}
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			  vars:
			    var1: true
			    var2: "{{ 5 if var1 else 6 }}"
			    var3: "{{ (value1 == 6 and value2 == 7) or var1 | toString }}"
			    var4: "{{ 1 + 1 }}"
			    var5: "{{ not var1 }}"
			    var6: "{{ (var4 is 2 or var4 in [5, 6, 7]) and var1 is boolean or var1 not in [1, 2] }}"
			    var7: "{{ concat(first_string='string1', 'string2') }}"
			
		''')
	}

	@Test
	def void testMultiLineExpression() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					vars:
						var1: 5
						var2:
							- "first element"
							- "second element"
							- key1: "value1"
							key2: "value2"
					tasks_list:
						task_to_execute:
							module: "module"
								parameters:
									parameter1: >
										line_of_string: "first line"
										line_of_string: "second line \\2"
										line_of_string: {{ declared_variable: var1 }}"string"{{ declared_variable: var1 }}
										line_of_string: {% for element in  declared_variable: var2 recursive %} {{ element }} {% else %}" else "{% endfor %}
									parameter2: |
										line_of_string: "first line \\"
										line_of_string: {%+ for element, i in declared_variable: var2 if True %} {{ element }} {%+ else %}" else "{%+ endfor %}
										line_of_string: {% if declared_variable: var1 == 5 %}" 5 "{% else %}" not 5 "{% endif %}
										line_of_string: {% if declared_variable: var2[0] == 5 %}" element 0 is 5 " {% elif declared_variable: var1 == 5 %}" 5 "{% else %}" not 5 "{% endif %}
										line_of_string: {%+ if declared_variable: var2[0] == 5 %}" element 0 is 5 " {%+ elif declared_variable: var1 == 5 %}" 5 "{%+ else %}" not 5 "{%+ endif %}
									parameter3: "\\"
									parameter4: "\"string\""
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			  vars:
			    var1: 5
			    var2: 
			      - "first element"
			      - "second element"
			      - 'key1': "value1"
			        'key2': "value2"
			
			  tasks:
			
			    - module:
			        parameter1: >
			          first line
			          second line \\2
			          {{ var1 }}string{{ var1 }}
			          {% for element in var2 recursive %}{{ element }}{% else %} else {% endfor %}
			        parameter2: |
			          first line \
			          {%+ for element, i in var2 if True %}{{ element }}{%+ else %} else {%+ endfor %}
			          {% if var1 == 5 %} 5 {% else %} not 5 {% endif %}
			          {% if var2[0] == 5 %} element 0 is 5 {% elif var1 == 5 %} 5 {% else %} not 5 {% endif %}
			          {%+ if var2[0] == 5 %} element 0 is 5 {%+ elif var1 == 5 %} 5 {%+ else %} not 5 {%+ endif %}
			        parameter3: "\\"
			        parameter4: "\"string\""
			
		''')
	}
	
	@Test
	def void testSpecialVariable() {
		'''
			playbook_name: "name"
			plays:
				play:
					play_name: "name"
					hosts: "all"
					vars:
						var1: {{ {ke1: 5, key2: "string"} }}
						var2: null
						var2: {{ special_variable: ansible_host }}
		'''.assertCompilesTo('''
			- name: "name"
			  hosts: "all"
			  vars:
			    var1: "{{ {'ke1': 5, 'key2': 'string'} }}"
			    var2: null
			    var2: "{{ ansible_host }}"
			
		''')
	}
	
}
