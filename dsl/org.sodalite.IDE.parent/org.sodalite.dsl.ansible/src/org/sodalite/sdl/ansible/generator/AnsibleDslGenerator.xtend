/*
 * generated by Xtext 2.23.0
 */
package org.sodalite.sdl.ansible.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.sodalite.sdl.ansible.ansibleDsl.EPlaybook
import org.sodalite.sdl.ansible.ansibleDsl.EPlay
import org.sodalite.sdl.ansible.ansibleDsl.EDictionary
import org.sodalite.sdl.ansible.ansibleDsl.EList
import java.util.ArrayList
import org.sodalite.sdl.ansible.ansibleDsl.EPlayExeSettings
import org.sodalite.sdl.ansible.ansibleDsl.EPlayErrorHandling
import org.sodalite.sdl.ansible.ansibleDsl.EFactsSettings
import org.sodalite.sdl.ansible.ansibleDsl.EBlockTask
import org.sodalite.sdl.ansible.ansibleDsl.ETaskHandler
import org.sodalite.sdl.ansible.ansibleDsl.EBlock
import org.sodalite.sdl.ansible.ansibleDsl.ETask
import org.sodalite.sdl.ansible.ansibleDsl.EHandler
import org.sodalite.sdl.ansible.ansibleDsl.EValuePassed
import org.sodalite.sdl.ansible.ansibleDsl.ENotifiedTopic
import org.sodalite.sdl.ansible.ansibleDsl.ENotifiedHandler
import org.sodalite.sdl.ansible.ansibleDsl.ELoopOverList
import org.sodalite.sdl.ansible.ansibleDsl.EUntil
import org.sodalite.sdl.ansible.ansibleDsl.ERoleInclusion
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaExpressionEvaluationWithoutBrackets
import org.sodalite.sdl.ansible.ansibleDsl.EFilteredExpression
import org.sodalite.sdl.ansible.ansibleDsl.EOrExpression
import org.sodalite.sdl.ansible.ansibleDsl.EFunctionCall
import org.sodalite.sdl.ansible.ansibleDsl.EAndExpression
import org.sodalite.sdl.ansible.ansibleDsl.ETruthExpression
import org.sodalite.sdl.ansible.ansibleDsl.EOperation
import org.sodalite.sdl.ansible.ansibleDsl.EIsExpression
import org.sodalite.sdl.ansible.ansibleDsl.EParenthesisedExpression
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaExpressionAndString
import org.sodalite.sdl.ansible.ansibleDsl.EValueWithoutString
import org.sodalite.sdl.ansible.ansibleDsl.EValuePassedToJinjaExpression
import org.sodalite.sdl.ansible.ansibleDsl.EComposedValue
import org.sodalite.sdl.ansible.ansibleDsl.ESimpleValueWithoutString
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaExpressionOrString
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaExpressionEvaluation
import org.sodalite.sdl.ansible.ansibleDsl.EVariableDeclarationVariableReference
import org.sodalite.sdl.ansible.ansibleDsl.ERegisterVariableReference
import org.sodalite.sdl.ansible.ansibleDsl.ESpecialVariable
import org.sodalite.sdl.ansible.ansibleDsl.EInputOperationVariableReference
import org.sodalite.sdl.ansible.ansibleDsl.EInputInterfaceVariableReference
import org.sodalite.sdl.ansible.ansibleDsl.EListPassed
import org.sodalite.sdl.ansible.ansibleDsl.EDictionaryPassed
import org.sodalite.sdl.ansible.ansibleDsl.ENumberPassed
import org.sodalite.sdl.ansible.ansibleDsl.EBooleanPassed
import org.sodalite.sdl.ansible.ansibleDsl.EIndexOrLoopVariableReference
import org.sodalite.sdl.ansible.ansibleDsl.ETailElement
import org.sodalite.sdl.ansible.ansibleDsl.EBase
import org.sodalite.sdl.ansible.ansibleDsl.EExecution
import org.sodalite.sdl.ansible.ansibleDsl.EPlaybookInclusion
import org.sodalite.sdl.ansible.ansibleDsl.ESetFactVariableReference
import org.sodalite.sdl.ansible.ansibleDsl.EEmptyCurlyBraces
import org.sodalite.sdl.ansible.ansibleDsl.EBlockAndRoleErrorHandling
import org.sodalite.sdl.ansible.ansibleDsl.EJinjaStatement
import org.sodalite.sdl.ansible.ansibleDsl.EIfStatement
import org.sodalite.sdl.ansible.ansibleDsl.EForStatement
import org.sodalite.sdl.ansible.ansibleDsl.EWithLookup
import org.sodalite.sdl.ansible.ansibleDsl.ESquareBracketElement
import org.sodalite.sdl.ansible.ansibleDsl.EValueInLine
import org.sodalite.sdl.ansible.ansibleDsl.EDictionaryInLine
import org.sodalite.sdl.ansible.ansibleDsl.EDictionaryIndented
import org.sodalite.sdl.ansible.ansibleDsl.EListInLine
import org.sodalite.sdl.ansible.ansibleDsl.EListIndented
import org.sodalite.sdl.ansible.ansibleDsl.ESimpleValueInLine
import org.sodalite.sdl.ansible.ansibleDsl.EBooleanAnsible

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class AnsibleDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (e : resource.allContents.toIterable.filter(EPlaybook)){
			fsa.generateFile(e.name + '.yaml', compilePlays(e))
		}
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
	}
	
	def compilePlays(EPlaybook playbook) '''
		«FOR play : playbook.plays»
			«compilePlay(play, '  ')»
			
		«ENDFOR»
	'''
	
	def compilePlay(EPlay play, String space) '''
		«IF play.name !== null»
			- name: «compileJinjaExpressionAndString(play.name, space)»
			«IF play.hosts !== null»
				«space»hosts: «compileJinjaExpressionAndString(play.hosts, space)»
			«ENDIF»
			«IF play.playbook_inclusion !== null»
				«compilePlaybookInclusion(play.playbook_inclusion, space, false)»
			«ENDIF»
		«ELSE»
			«IF play.hosts !== null»
				- hosts: «compileJinjaExpressionAndString(play.hosts, space)»
				«IF play.playbook_inclusion !== null»
					«compilePlaybookInclusion(play.playbook_inclusion, space, false)»
				«ENDIF»
			«ELSE»
				«IF play.playbook_inclusion !== null»
					«compilePlaybookInclusion(play.playbook_inclusion, space, true)»
				«ENDIF»
			«ENDIF»
		«ENDIF»
		«compileBaseAttributes(play, space)»
		«IF play.play_exe_settings !== null»
			«compilePlayExeSettings(play.play_exe_settings, space)»
		«ENDIF»
		«IF play.error_handling !== null»
			«compilePlayErrorHandling(play.error_handling, space)»
		«ENDIF»
		«IF play.facts_settings !== null»
			«compileFactsSettings(play.facts_settings, space)»
		«ENDIF»
		«IF play.vars_files !== null»
			«space»vars_files: «compileListPassed(play.vars_files, space)»
		«ENDIF»
		«IF play.vars_prompt !== null»
			«space»vars_prompt: «compileListPassed(play.vars_prompt, space)»
		«ENDIF»
		«IF play.force_handlers !== null»
			«space»force_handlers: «compileBooleanPassed(play.force_handlers, space)»
		«ENDIF»
		«IF play.roles_inclusions !== null»
			«space»roles:
			«FOR role: play.roles_inclusions.roles»
				«compileRoleInclusion(role, space.concat('  '))»
			«ENDFOR»
		«ENDIF»
		«IF play.pre_tasks_list.size !== 0»
			
			«space»pre_tasks:
			«FOR blockTask: play.pre_tasks_list»
				
				«compileBlockTask(blockTask, space.concat('  '))»
			«ENDFOR»
		«ENDIF»
		«IF play.tasks_list.size !== 0»
			
			«space»tasks:
			«FOR blockTask: play.tasks_list»
				
				«compileBlockTask(blockTask, space.concat('  '))»
			«ENDFOR»
		«ENDIF»
		«IF play.post_tasks_list.size !== 0»
			
			«space»post_tasks:
			«FOR blockTask: play.post_tasks_list»
				
				«compileBlockTask(blockTask, space.concat('  '))»
			«ENDFOR»
		«ENDIF»
		«IF play.handlers.size !== 0»
			
			«space»handlers:
			«FOR handler: play.handlers»
				
				«compileTaskHandler(handler, space.concat('  '))»
			«ENDFOR»
		«ENDIF»
	'''
	
	//isFirstElementOfPlay is true if both play.name and play.hosts are null, so if import_playbook needs the '- ' before it 
	def compilePlaybookInclusion(EPlaybookInclusion playbookInclusion, String space, boolean isFirstElementOfPlay)'''
		«IF playbookInclusion !== null»
			«IF playbookInclusion.playbook_file_name !== null && !isFirstElementOfPlay»
				«space»import_playbook: «playbookInclusion.playbook_file_name»
			«ELSEIF playbookInclusion.playbook_file_name !== null && isFirstElementOfPlay»
				- import_playbook: «playbookInclusion.playbook_file_name»
			«ENDIF»			
			«IF playbookInclusion.when_expression !== null»
				«space»when: «compileJinjaExpressionEvaluationWithoutBrackets(playbookInclusion.when_expression, space)»
			«ENDIF»
		«ENDIF»
	'''
	
	def compileRoleInclusion(ERoleInclusion roleInclusion, String space)'''
		«space»- role: «compileJinjaExpressionAndString(roleInclusion.name, space)»
		«compileBaseAttributes(roleInclusion, space.concat('  '))»
		«compileExecutionAttributes(roleInclusion, space.concat('  '))»
		«IF roleInclusion.error_handling !== null»
			«compileBlockAndRoleErrorHandling(roleInclusion.error_handling, space.concat('  '))»
		«ENDIF»
	'''
	
	def compileBaseAttributes(EBase base, String space) '''
		«IF base.privilege_escalation !== null»
			«IF base.privilege_escalation.become !== null»
				«space»become: «compileBooleanPassed(base.privilege_escalation.become, space)»
			«ENDIF»
			«IF base.privilege_escalation.become_exe !== null»
				«space»become_exe: «compileJinjaExpressionAndString(base.privilege_escalation.become_exe, space)»
			«ENDIF»
			«IF base.privilege_escalation.become_flags !== null»
				«space»become_flags: «compileJinjaExpressionAndString(base.privilege_escalation.become_flags, space)»
			«ENDIF»
			«IF base.privilege_escalation.become_method !== null»
				«space»become_method: «compileJinjaExpressionAndString(base.privilege_escalation.become_method, space)»
			«ENDIF»
			«IF base.privilege_escalation.become_user !== null»
				«space»become_user: «compileJinjaExpressionAndString(base.privilege_escalation.become_user, space)»
			«ENDIF»
		«ENDIF»
		«IF base.validation_mode !== null»
			«IF base.validation_mode.check_mode !== null»
				«space»check_moode: «compileBooleanPassed(base.validation_mode.check_mode, space)»
			«ENDIF»
			«IF base.validation_mode.diff !== null»
				«space»diff: «compileBooleanPassed(base.validation_mode.diff, space)»
			«ENDIF»
		«ENDIF»
		«IF base.connection !== null»
			«IF base.connection.connection !== null»
				«space»connection: «compileJinjaExpressionAndString(base.connection.connection, space)»
			«ENDIF»
			«IF base.connection.port !== null»
				«space»port: «compileNumberPassed(base.connection.port, space)»
			«ENDIF»
			«IF base.connection.remote_user !== null»
				«space»remote_user: «compileJinjaExpressionAndString(base.connection.remote_user, space)»
			«ENDIF»
		«ENDIF»
		«IF base.no_log !== null»
			«space»no_log: «compileBooleanPassed(base.no_log, space)»
		«ENDIF»
		«IF base.debugger !== null»
			«space»debugger: «compileJinjaExpressionAndString(base.debugger, space)»
		«ENDIF»
		«IF base.module_defaults !== null»
			«space»module_defaults: «compileListPassed(base.module_defaults, space)»
		«ENDIF»
		«IF base.environment !== null»
			«space»environment: «compileListPassed(base.environment, space)»
		«ENDIF»
		«IF base.collections !== null»
			«space»collections: «compileListPassed(base.collections, space)»
		«ENDIF»
		«IF base.tags !== null»
			«space»tags: «compileListPassed(base.tags, space)»
		«ENDIF»
		«IF base.variable_declarations.size !== 0»
			«space»vars:
			«FOR variable_declaration: base.variable_declarations»
				«space.concat('  ')»«variable_declaration.name»: «compileValuePassed(variable_declaration.value_passed, space.concat('  ')).toString()»
			«ENDFOR»
		«ENDIF»
	'''
	
	def compilePlayExeSettings(EPlayExeSettings playExeSettings, String space) '''
		«IF playExeSettings.strategy !== null»
			«space»strategy: «compileJinjaExpressionAndString(playExeSettings.strategy, space)»
		«ENDIF»
		«IF playExeSettings.serial_list !== null»
			«space»serial: «compileListPassed(playExeSettings.serial_list, space)»
		«ENDIF»
		«IF playExeSettings.order !== null»
			«space»order: «compileJinjaExpressionAndString(playExeSettings.order, space)»
		«ENDIF»
		«IF playExeSettings.throttle !== null»
			«space»throttle: «compileNumberPassed(playExeSettings.throttle, space)»
		«ENDIF»
		«IF playExeSettings.run_once !== null»
			«space»run_once: «compileBooleanPassed(playExeSettings.run_once, space)»
		«ENDIF»
	'''
	
	def compilePlayErrorHandling(EPlayErrorHandling playErrorHandling, String space) '''
		«IF playErrorHandling.max_fail_percentage !== null»
			«space»max_fail_percentage: «compileNumberPassed(playErrorHandling.max_fail_percentage, space)»
		«ENDIF»
		«IF playErrorHandling.any_errors_fatal !== null»
			«space»any_errors_fatal: «compileBooleanPassed(playErrorHandling.any_errors_fatal, space)»
		«ENDIF»
		«IF playErrorHandling.ignore_errors !== null»
			«space»ignore_errors: «compileBooleanPassed(playErrorHandling.ignore_errors, space)»
		«ENDIF»
		«IF playErrorHandling.ignore_unreachable !== null»
			«space»ignore_unreachable: «compileBooleanPassed(playErrorHandling.ignore_unreachable, space)»
		«ENDIF»
	'''
	
	def compileFactsSettings(EFactsSettings factsSettings, String space) '''
		«IF factsSettings.gather_facts !== null»
			«space»gather_facts: «compileBooleanPassed(factsSettings.gather_facts, space)»
		«ENDIF»
		«IF factsSettings.gather_subset !== null»
			«space»gather_subset: «compileListPassed(factsSettings.gather_subset, space)»
		«ENDIF»
		«IF factsSettings.gather_timeout !== null»
			«space»gather_timeout: «compileNumberPassed(factsSettings.gather_timeout, space)»
		«ENDIF»
		«IF factsSettings.fact_path !== null»
			«space»fact_path: «compileJinjaExpressionAndString(factsSettings.fact_path, space)»
		«ENDIF»
	'''
	
	def compileBlockTask(EBlockTask blockTask, String space) '''
		«IF blockTask instanceof EBlock»
			«compileBlock(blockTask, space)»
		«ENDIF»
		«IF blockTask instanceof ETask»
			«compileTaskHandler(blockTask, space)»
		«ENDIF»
	'''
	
	def compileBlock(EBlock block, String space) '''
		«IF block.name !== null»
			«space»- name: «compileJinjaExpressionAndString(block.name, space.concat('  '))»
			«space.concat('  ')»block:
		«ELSE»
			«space»- block:
		«ENDIF»
		«IF block.tasks.size !== 0»
			«FOR task: block.tasks»
				«compileTaskHandler(task, space.concat('  ').concat('  '))»
			«ENDFOR»
		«ENDIF»
		«IF block.rescue_tasks.size !== 0»
			«space.concat('  ')»rescue: 
			«FOR task: block.rescue_tasks»
				«compileTaskHandler(task, space.concat('  ').concat('  '))»
			«ENDFOR»
		«ENDIF»
		«IF block.always_tasks.size !== 0»
			«space.concat('  ')»always: 
			«FOR task: block.always_tasks»
				«compileTaskHandler(task, space.concat('  ').concat('  '))»
			«ENDFOR»
		«ENDIF»
		«compileBaseAttributes(block, space.concat('  '))»
		«compileExecutionAttributes(block, space.concat('  '))»
		«IF block.error_handling !== null»
			«compileBlockAndRoleErrorHandling(block.error_handling, space.concat('  '))»
		«ENDIF»
	'''
	
	def compileBlockAndRoleErrorHandling(EBlockAndRoleErrorHandling blockAndRoleErrorHandling, String space)'''
		«IF blockAndRoleErrorHandling !== null»
			«IF blockAndRoleErrorHandling.any_errors_fatal !== null»
				«space»any_errors_fatal: «compileBooleanPassed(blockAndRoleErrorHandling.any_errors_fatal, space)»
			«ENDIF»
			«IF blockAndRoleErrorHandling.ignore_errors !== null»
				«space»ignore_errors: «compileBooleanPassed(blockAndRoleErrorHandling.ignore_errors, space)»
			«ENDIF»
			«IF blockAndRoleErrorHandling.ignore_unreachable !== null»
				«space»ignore_unreachable: «compileBooleanPassed(blockAndRoleErrorHandling.ignore_unreachable, space)»
			«ENDIF»
		«ENDIF»	
	'''
	
	def compileExecutionAttributes(EExecution execution, String space) '''
		«IF execution.exe_settings !== null»
			«IF execution.exe_settings.throttle != 0»
				«space»throttle: «compileNumberPassed(execution.exe_settings.throttle, space)»
			«ENDIF»
			«IF execution.exe_settings.run_once !== null»
				«space»run_once: «compileBooleanPassed(execution.exe_settings.run_once, space)»
			«ENDIF»
		«ENDIF»
		«IF execution.delegation !== null»
			«IF execution.delegation.delegate_to !== null»
				«space»delegate_to: «compileJinjaExpressionAndString(execution.delegation.delegate_to, space)»
			«ENDIF»
			«IF execution.delegation.delegate_facts !== null»
				«space»delegate_facts: «compileBooleanPassed(execution.delegation.delegate_facts, space)»
			«ENDIF»
		«ENDIF»
		«IF execution.when_expression !== null»
			«space»when: «compileJinjaExpressionEvaluationWithoutBrackets(execution.when_expression, space)»
		«ENDIF»
	'''
	
	//the name of the handler is a simple string because otherwise the scoping doesn't work, so this function is needed
	//to distinguish between the 2 different cases and get the name of task/handler
	def taskHandlerName(ETaskHandler taskHandler, String space){
		if (taskHandler instanceof ETask){
			//this check is necessary in order to not pass null to compileJinjaExpressionAndString
			if (taskHandler.name !== null) return compileJinjaExpressionAndString(taskHandler.name, space)
			else return null
		} 
		else if (taskHandler instanceof EHandler) return taskHandler.name
	}
	
	//if the task/handler has a name, indent it correctly. the name of the module used is the first thing to show
	def compileTaskHandler(ETaskHandler taskHandler, String space) '''
		«IF taskHandlerName(taskHandler, space) !== null»
			«space»- name: «taskHandlerName(taskHandler, space.concat('  '))»
			«IF taskHandler.module !== null»
				«space.concat('  ')»«taskHandler.module.name»:«IF taskHandler.module.direct_parameter !== null» «compileValuePassed(taskHandler.module.direct_parameter, space.concat('  '))»«ENDIF»
				«FOR parameter: taskHandler.module.parameters»
					«space.concat('  ').concat('  ')»«parameter.name»: «compileValuePassed(parameter.value_passed, space.concat('  ').concat('  '))»
				«ENDFOR»
			«ENDIF»
		«ELSE»
			«IF taskHandler.module !== null»
				«space»- «taskHandler.module.name»:«IF taskHandler.module.direct_parameter !== null» «compileValuePassed(taskHandler.module.direct_parameter, space.concat('  '))»«ENDIF»
				«FOR parameter: taskHandler.module.parameters»
					«space.concat('  ').concat('  ')»«parameter.name»: «compileValuePassed(parameter.value_passed, space.concat('  ').concat('  '))»
				«ENDFOR»
			«ENDIF»
		«ENDIF»
		«compileBaseAttributes(taskHandler, space.concat('  '))»
		«compileExecutionAttributes(taskHandler, space.concat('  '))»
		«compileTaskHandlerAttributes(taskHandler, space.concat('  '))»
		«IF taskHandler instanceof EHandler»
			«IF taskHandler.listen_to !== null»
				«space.concat('  ')»listen: «compileNotifiedTopics(taskHandler)»
			«ENDIF»
		«ENDIF»
	'''
	
	//the assumption is that the module used was already generated by the compileTaskHandler function
	def compileTaskHandlerAttributes(ETaskHandler taskHandler, String space) '''
		«IF taskHandler.error_handling !== null»
			«IF taskHandler.error_handling.changed_when !== null»
				«space»change_when: «compileJinjaExpressionEvaluationWithoutBrackets(taskHandler.error_handling.changed_when, space)»
			«ENDIF»
			«IF taskHandler.error_handling.failed_when !== null»
				«space»failed_when: «compileJinjaExpressionEvaluationWithoutBrackets(taskHandler.error_handling.failed_when, space)»
			«ENDIF»
			«IF taskHandler.error_handling.any_errors_fatal !== null»
				«space»any_errors_fatal: «compileBooleanPassed(taskHandler.error_handling.any_errors_fatal, space)»
			«ENDIF»
			«IF taskHandler.error_handling.ignore_errors !== null»
				«space»ignore_errors: «compileBooleanPassed(taskHandler.error_handling.ignore_errors, space)»
			«ENDIF»
			«IF taskHandler.error_handling.ignore_unreachable !== null»
				«space»ignore_unreachable: «compileBooleanPassed(taskHandler.error_handling.ignore_unreachable, space)»
			«ENDIF»
		«ENDIF»
		«IF taskHandler.action !== null»
			«space»action: «compileJinjaExpressionAndString(taskHandler.action, space)»
		«ENDIF»
		«IF taskHandler.asynchronous_settings !== null»
			«IF taskHandler.asynchronous_settings.async !== null»
				«space»async: «compileNumberPassed(taskHandler.asynchronous_settings.async, space)»
			«ENDIF»
			«IF taskHandler.asynchronous_settings.poll !== null»
				«space»poll: «compileNumberPassed(taskHandler.asynchronous_settings.poll, space)»
			«ENDIF»
		«ENDIF»
		«IF taskHandler.args !== null»
			«space»args: «compileDictionaryPassed(taskHandler.args, space)»
		«ENDIF»
		«IF taskHandler.notifiables.size !== 0»
			«space»notify: «compileNotifiables(taskHandler)»
		«ENDIF»
		«IF taskHandler.loop !== null»
			«IF taskHandler.loop instanceof ELoopOverList»
				«space»loop: «compileLoopList((taskHandler.loop as ELoopOverList).loop_list, space)»
				«IF (taskHandler.loop as ELoopOverList).loop_control !== null»
					«IF (taskHandler.loop as ELoopOverList).loop_control.label !== null»
						«space»label: «compileValuePassed((taskHandler.loop as ELoopOverList).loop_control.label, space)»
					«ENDIF»
					«IF (taskHandler.loop as ELoopOverList).loop_control.pause !== null»
						«space»pause: «compileNumberPassed((taskHandler.loop as ELoopOverList).loop_control.pause, space)»
					«ENDIF»
					«IF (taskHandler.loop as ELoopOverList).loop_control.index_var !== null»
						«space»index_var: «(taskHandler.loop as ELoopOverList).loop_control.index_var.name»
					«ENDIF»
					«IF (taskHandler.loop as ELoopOverList).loop_control.loop_var !== null»
						«space»loop_var: «(taskHandler.loop as ELoopOverList).loop_control.loop_var.name»
					«ENDIF»
					«IF (taskHandler.loop as ELoopOverList).loop_control.extended !== null»
						«space»extended: «compileBooleanPassed((taskHandler.loop as ELoopOverList).loop_control.extended, space)»
					«ENDIF»
				«ENDIF»
			«ENDIF»
			«IF taskHandler.loop instanceof EUntil»
				«IF (taskHandler.loop as EUntil).until !== null»
					«space»until: «compileJinjaExpressionEvaluationWithoutBrackets((taskHandler.loop as EUntil).until, space)»
				«ENDIF»
				«IF (taskHandler.loop as EUntil).retries !== null»
					«space»retries: «compileNumberPassed((taskHandler.loop as EUntil).retries, space)»
				«ENDIF»
				«IF (taskHandler.loop as EUntil).delay !== null»
					«space»delay: «compileNumberPassed((taskHandler.loop as EUntil).delay, space)»
				«ENDIF»
			«ENDIF»
			«IF taskHandler.loop instanceof EWithLookup»
				«IF (taskHandler.loop as EWithLookup).lookup !== null && (taskHandler.loop as EWithLookup).with_list !== null»
					«space»with_«(taskHandler.loop as EWithLookup).lookup»: «compileValuePassed((taskHandler.loop as EWithLookup).with_list, space).toString()»
				«ENDIF»
			«ENDIF»
		«ENDIF»
		«IF taskHandler.register !== null»
			«space»register: «taskHandler.register.name»
		«ENDIF»
	'''
	
	def compileNotifiables(ETaskHandler taskHandler){
		var newList = new ArrayList()
		for (notifiable : taskHandler.notifiables){
			if (notifiable instanceof ENotifiedTopic){
				newList.add("\"".concat(notifiable.name).concat("\""))	
			}
			else if (notifiable instanceof ENotifiedHandler){
				newList.add(notifiable.name.name)
			}
		}
		return newList
	}
	
	def compileNotifiedTopics(EHandler handler){
		var newList = new ArrayList()
		for (listenedTopic : handler.listen_to){
			newList.add("\"".concat(listenedTopic.name).concat("\""))
		}
		return newList
	}
	
	def compileDictionaryPassed(EDictionaryPassed dictionaryPassed, String space){
		if (dictionaryPassed instanceof EDictionary) return compileDictionary(dictionaryPassed, space)
		else if (dictionaryPassed instanceof EJinjaExpressionEvaluation) return "\"".concat(compileJinjaExpressionEvaluation(dictionaryPassed, space)).concat("\"")
	}
	
	def compileListPassed(EListPassed listPassed, String space){
		if (listPassed instanceof EList) return compileList(listPassed, space)
		else if (listPassed instanceof EJinjaExpressionEvaluation) return "\"".concat(compileJinjaExpressionEvaluation(listPassed, space)).concat("\"")
	}
	
	def compileNumberPassed(ENumberPassed numberPassed, String space){
		if (numberPassed instanceof EJinjaExpressionEvaluation) return "\"".concat(compileJinjaExpressionEvaluation(numberPassed, space)).concat("\"")
		else if (numberPassed.number_passed !== null) return numberPassed.number_passed
	}
	
	def compileBooleanPassed(EBooleanPassed booleanPassed, String space){
		if (booleanPassed instanceof EJinjaExpressionEvaluation) return "\"".concat(compileJinjaExpressionEvaluation(booleanPassed, space)).concat("\"")
		else if (booleanPassed.boolean_passed !== null) return compileBooleanAnsible(booleanPassed.boolean_passed)
	}
	
	def compileTailElement(ETailElement tailElement, String space){
		var tailElementString = ""
		if (tailElement.function_call !== null) tailElementString = tailElementString.concat(compileFunctionCall(tailElement.function_call, space))
		for (squareBracketElement : tailElement.square_bracket_elements){
			tailElementString = tailElementString.concat(squareBracketElement.compileSquareBracketElement)
		}
		return tailElementString
	}
	
	def compileSquareBracketElement(ESquareBracketElement squareBracketElement){
		var stringToReturn = ""
		if (squareBracketElement.index !== null) stringToReturn = stringToReturn.concat("[").concat(squareBracketElement.index).concat("]")
		else if (squareBracketElement.field !== null) stringToReturn = stringToReturn.concat("['").concat(squareBracketElement.field).concat("']")
		return stringToReturn
	}
	
	def compileJinjaExpressionEvaluationWithoutBrackets(EJinjaExpressionEvaluationWithoutBrackets jinja, String space){
		var stringToReturn = ""
		if (jinja.expression_to_evaluate !== null){
			stringToReturn = stringToReturn.concat(compileFilteredExpression(jinja.expression_to_evaluate, space))
		}
		for (ifBlock : jinja.if_chain){
			stringToReturn = stringToReturn.concat(" if ").concat(compileFilteredExpression(ifBlock.if_condition, space))
			if (ifBlock.else_expression !== null) stringToReturn = stringToReturn.concat(" else ").concat(compileFilteredExpression(ifBlock.else_expression, space))
		}
		return stringToReturn
	}

	def compileFunctionCall(EFunctionCall functionCall, String space){
		var stringToReturn = functionCall.name
		if (functionCall.parameters.size !== 0){
			stringToReturn = stringToReturn.concat("(")
			for (var index = 0; index < functionCall.parameters.size; index++){	
				//the first parameter shouldn't have a comma before it, the others yes
				if (index == 0){
					stringToReturn = stringToReturn.concat(compileFilteredExpression(functionCall.parameters.get(index), space).toString())
				}
				else {
					stringToReturn = stringToReturn.concat(", ").concat(compileFilteredExpression(functionCall.parameters.get(index), space).toString())
				}
			}
			stringToReturn = stringToReturn.concat(")")	
		}
		else if (functionCall.empty_brackets !== null){
			stringToReturn = stringToReturn.concat("()")
		}
		return stringToReturn
	}
	
	def compileFilteredExpression(EFilteredExpression filteredExpression, String space){
		var stringToReturn = compileOrExpression(filteredExpression.to_filter, space).toString()
		if (filteredExpression.filter !== null){
			stringToReturn = stringToReturn.concat(" | ").concat(compileFilteredExpression(filteredExpression.filter, space).toString())
		}
		return stringToReturn
	}
	
	def compileOrExpression(EOrExpression orExpression, String space){
		var stringToReturn = compileAndExpression(orExpression.left_or, space).toString()
		if (orExpression.right_or !== null){
			stringToReturn = stringToReturn.concat(" or ").concat(compileOrExpression(orExpression.right_or, space).toString())
		}
		return stringToReturn
	}
	
	def compileAndExpression(EAndExpression andExpression, String space){
		var stringToReturn = compileTruthExpression(andExpression.left_and, space).toString()
		if (andExpression.right_and !== null){
			stringToReturn = stringToReturn.concat(" and ").concat(compileAndExpression(andExpression.right_and, space).toString())
		}
		return stringToReturn
	}
	
	def compileTruthExpression(ETruthExpression truthExpression, String space){
		var stringToReturn = compileOperation(truthExpression.left_value, space).toString()
		if (truthExpression.equality_sign !== null && truthExpression.right_value !== null){
			stringToReturn = stringToReturn.concat(" ").concat(truthExpression.equality_sign).concat(" ").concat(compileTruthExpression(truthExpression.right_value, space).toString())
		}
		return stringToReturn
	}
	
	def compileOperation(EOperation operation, String space){
		var stringToReturn = compileIsExpression(operation.left_operand, space).toString()
		if (operation.operator !== null && operation.right_operand !== null){
			stringToReturn = stringToReturn.concat(" ").concat(operation.operator).concat(" ").concat(compileOperation(operation.right_operand, space).toString())
		}
		return stringToReturn
	}
	
	def compileIsExpression(EIsExpression isExpression, String space){
		var stringToReturn = ""
		if (isExpression.not !== null) stringToReturn = stringToReturn.concat("not ")
		stringToReturn = stringToReturn.concat(compileParenthesisedExpression(isExpression.parenthesised_expression, space).toString())
		if (isExpression.status !== null){
			stringToReturn = stringToReturn.concat(" is ").concat(compileIsExpression(isExpression.status, space).toString())	
		}
		else if (isExpression.container_expression !== null){
			if (isExpression.not_in !== null){
				stringToReturn = stringToReturn.concat(" not in ").concat(compileIsExpression(isExpression.container_expression, space).toString())
			}
			else {
				stringToReturn = stringToReturn.concat(" in ").concat(compileIsExpression(isExpression.container_expression, space).toString())
			}
		}
		return stringToReturn
	}
	
	def compileParenthesisedExpression(EParenthesisedExpression parenthesisedExpression, String space){
		var stringToReturn = ""
		if (parenthesisedExpression.basic_value !== null) stringToReturn = stringToReturn.concat(compileValuePassedToJinjaExpression(parenthesisedExpression.basic_value, space))
		else if (parenthesisedExpression.parenthesised_term !== null) stringToReturn = stringToReturn.concat("(").concat(compileFilteredExpression(parenthesisedExpression.parenthesised_term, space).toString()).concat(")")
		for (squareBracketElement : parenthesisedExpression.square_bracket_elements){
			stringToReturn = stringToReturn.concat(squareBracketElement.compileSquareBracketElement)
		}
		for (tailElement : parenthesisedExpression.tail){
			stringToReturn = stringToReturn.concat(".").concat(compileTailElement(tailElement, space))
		}
		return stringToReturn
	}
	
	def compileList(EList list, String space){
		if (list instanceof EListInLine){
			var newList = new ArrayList()
			for (element : list.elements){
				newList.add(compileValuePassed(element, space))
			}
			return newList			
		}
		else if (list instanceof EListIndented){
			var listString = ""
			for (element : list.elements){
				listString = listString.concat('\n').concat(space).concat("  - ").concat(compileValuePassed(element, space.concat("  ")).toString())
			}
			return listString
		}

	}
	
	def compileValuePassed(EValuePassed valuePassed, String space){
		if (valuePassed instanceof EJinjaExpressionAndString){
			return compileJinjaExpressionAndString(valuePassed, space)
		}
		else if (valuePassed instanceof EValueWithoutString){
			return compileValueWithoutString(valuePassed, space)
		}
	}
	
	def compileJinjaExpressionAndString(EJinjaExpressionAndString jinja, String space){
		//if jinja.new_line_command is not null, then a new line is needed for each element
		if (jinja.new_line_command !== null){
			var stringToReturn = jinja.new_line_command
			for (jinjaOr : jinja.jinja_expression_and_string){
				stringToReturn = stringToReturn.concat("\n").concat(space.concat("  ")).concat(compileJinjaExpressionOrString(jinjaOr, space.concat("  ")).toString())
			}
			return stringToReturn
		}
		//else, all the elements can just be concatenated in line
		else {
			var stringToReturn = "\""
			for (jinjaOr : jinja.jinja_expression_and_string){
				stringToReturn = stringToReturn.concat(compileJinjaExpressionOrString(jinjaOr, space).toString())
			}
			stringToReturn = stringToReturn.concat("\"")
			return stringToReturn			
		}

	}
	
	def compileJinjaExpressionOrString(EJinjaExpressionOrString jinja, String space){
		if (jinja.string !== null){
			return jinja.string
		}
		else if (jinja instanceof EJinjaExpressionEvaluation){
			return compileJinjaExpressionEvaluation(jinja, space)
		}
		else if (jinja instanceof EJinjaStatement){
			return compileJinjaStatement(jinja, space)
		}
	}
	
	def compileJinjaExpressionEvaluation(EJinjaExpressionEvaluation jinja, String space){
		return "{{ ".concat(compileJinjaExpressionEvaluationWithoutBrackets(jinja.jinja_expression, space).toString()).concat(" }}")
	}
	
	def compileJinjaStatement(EJinjaStatement jinjaStatement, String space){
		if (jinjaStatement instanceof EIfStatement){
			var stringToReturn = "{%"
			if (jinjaStatement.if_block_sign !== null) stringToReturn = stringToReturn.concat(jinjaStatement.if_block_sign)
			stringToReturn = stringToReturn.concat(" if ").concat(compileFilteredExpression(jinjaStatement.if_condition, space)).concat(" %}")
			stringToReturn = stringToReturn.concat(" ").concat(compileValuePassed(jinjaStatement.if_body, space).toString())
			//the elif blocks, if present
			for (elif : jinjaStatement.elif_blocks){
				stringToReturn = stringToReturn.concat(" {%")
				if (elif.elif_block_sign !== null) stringToReturn = stringToReturn.concat(elif.elif_block_sign)
				stringToReturn = stringToReturn.concat(" elif ").concat(compileFilteredExpression(elif.elif_condition, space)).concat(" %}")
				stringToReturn = stringToReturn.concat(" ").concat(compileValuePassed(elif.elif_body, space).toString())
			}
			//the else block, if present
			if (jinjaStatement.else_body !== null){
				stringToReturn = stringToReturn.concat(" {%")
				if (jinjaStatement.else_block_sign !== null) stringToReturn = stringToReturn.concat(jinjaStatement.else_block_sign)
				stringToReturn = stringToReturn.concat(" else %}")
				stringToReturn = stringToReturn.concat(" ").concat(compileValuePassed(jinjaStatement.else_body, space).toString())
			}
			//the endif part
			stringToReturn = stringToReturn.concat(" {%")
			if (jinjaStatement.endif_block_sign !== null) stringToReturn = stringToReturn.concat(jinjaStatement.endif_block_sign)
			stringToReturn = stringToReturn.concat(" endif %}")
			return stringToReturn
		}
		else if (jinjaStatement instanceof EForStatement){
			var stringToReturn = "{%"
			if (jinjaStatement.for_block_sign !== null) stringToReturn = stringToReturn.concat(jinjaStatement.for_block_sign)
			//the identifiers written after the "for"
			for (var index = 0; index < jinjaStatement.identifiers.size ; index++){
				//the first identifier shouldn't have a comma before it, the others yes
				if (index == 0){
					stringToReturn = stringToReturn.concat(" for ").concat(jinjaStatement.identifiers.get(index))
				}
				else {
					stringToReturn = stringToReturn.concat(", ").concat(jinjaStatement.identifiers.get(index))
				}
			}
			//the list of items to iterate after the "in"
			stringToReturn = stringToReturn.concat(" in ").concat(compileFilteredExpression(jinjaStatement.list, space))
			//the filter, if present
			if (jinjaStatement.condition !== null) stringToReturn = stringToReturn.concat(" if ").concat(compileFilteredExpression(jinjaStatement.condition, space))
			//the recursive keywork, if present
			if (jinjaStatement.recursive !== null) stringToReturn = stringToReturn.concat(" recursive")
			stringToReturn = stringToReturn.concat(" %}")
			//body of the for
			stringToReturn = stringToReturn.concat(" ").concat(compileValuePassed(jinjaStatement.for_body, space).toString())
			//the else block, if present
			if (jinjaStatement.else_body !== null){
				stringToReturn = stringToReturn.concat(" {%")
				if (jinjaStatement.else_block_sign !== null) stringToReturn = stringToReturn.concat(jinjaStatement.else_block_sign)
				stringToReturn = stringToReturn.concat(" else %}")
				stringToReturn = stringToReturn.concat(" ").concat(compileValuePassed(jinjaStatement.else_body, space).toString())
			}
			//the endfor part
			stringToReturn = stringToReturn.concat(" {%")
			if (jinjaStatement.endfor_block_sign !== null) stringToReturn = stringToReturn.concat(jinjaStatement.endfor_block_sign)
			stringToReturn = stringToReturn.concat(" endfor %}")
			return stringToReturn
		}
	}
	
	def compileValuePassedToJinjaExpression(EValuePassedToJinjaExpression valuePassedToJinjaExpression, String space){
		if (valuePassedToJinjaExpression instanceof EValueInLine) return compileValueInLine(valuePassedToJinjaExpression, space).toString()
		else if (valuePassedToJinjaExpression instanceof ESpecialVariable){
			var specialVariableString = valuePassedToJinjaExpression.name
			return specialVariableString
		}
		else if (valuePassedToJinjaExpression instanceof EVariableDeclarationVariableReference){
			var declaredVariableString = ""
			declaredVariableString = declaredVariableString.concat(valuePassedToJinjaExpression.variable_declaration_variable_reference.name)
			return declaredVariableString
		}
		else if (valuePassedToJinjaExpression instanceof ERegisterVariableReference){
			var registerVariableString = ""
			registerVariableString = registerVariableString.concat(valuePassedToJinjaExpression.register_variable_reference.name)
			return registerVariableString
		}
		else if (valuePassedToJinjaExpression instanceof EInputOperationVariableReference){
			var inputOperationVariableString = ""
			inputOperationVariableString = inputOperationVariableString.concat(valuePassedToJinjaExpression.name.name)
			return inputOperationVariableString
		}
		else if (valuePassedToJinjaExpression instanceof EInputInterfaceVariableReference){
			var inputInterfaceVariableString = ""
			inputInterfaceVariableString = inputInterfaceVariableString.concat(valuePassedToJinjaExpression.name.name)
			return inputInterfaceVariableString
		}
		else if (valuePassedToJinjaExpression instanceof EIndexOrLoopVariableReference){
			var indexOrLoopVariableString = ""
			indexOrLoopVariableString = indexOrLoopVariableString.concat(valuePassedToJinjaExpression.name.name)
			return indexOrLoopVariableString
		}
		else if (valuePassedToJinjaExpression instanceof ESetFactVariableReference){
			var setFactVariableReferenceString = ""
			setFactVariableReferenceString = setFactVariableReferenceString.concat(valuePassedToJinjaExpression.name.name)
		}
		else if (valuePassedToJinjaExpression instanceof EFunctionCall){
			return compileFunctionCall(valuePassedToJinjaExpression, space)
		}
		else if (valuePassedToJinjaExpression instanceof EEmptyCurlyBraces){
			return "{}"
		}
	}
	
	def compileLoopList(EValuePassed loopList, String space){
		if (loopList instanceof EJinjaExpressionAndString || loopList instanceof EList) return compileValuePassed(loopList, space)
		else return "[".concat(compileValuePassed(loopList, space).toString()).concat("]")
	}
	
	
	def compileValueInLine(EValueInLine valueInLine, String space){
		if (valueInLine instanceof EComposedValue) return compileComposedValue(valueInLine, space)
		else if (valueInLine instanceof ESimpleValueInLine) return valueInLine.compileSimpleValueInLine
	}
	
	def compileValueWithoutString(EValueWithoutString valueWithoutString, String space){
		if (valueWithoutString instanceof EComposedValue) return compileComposedValue(valueWithoutString, space)
		else if (valueWithoutString instanceof ESimpleValueWithoutString) return valueWithoutString.compileSimpleValueWithoutString
	}
	
	def compileComposedValue(EComposedValue composedValue, String space){
		if (composedValue instanceof EList) return compileList(composedValue, space)
		else if (composedValue instanceof EDictionary) return compileDictionary(composedValue, space)
	}
	
	def compileDictionary(EDictionary dictionary, String space){
		if (dictionary instanceof EDictionaryInLine){
			var dictionaryString = '{'
			for (dictionary_pair : dictionary.dictionary_pairs){
				dictionaryString = dictionaryString.concat(dictionary_pair.name).concat(': ').concat(compileValuePassed(dictionary_pair.value, space).toString()).concat(', ')
			}
			dictionaryString = dictionaryString.substring(0, dictionaryString.length() - 2)
			dictionaryString = dictionaryString.concat('}')
			return dictionaryString			
		}
		else if (dictionary instanceof EDictionaryIndented){
			var dictionaryString = ""
			for (dictionary_pair : dictionary.dictionary_pairs){
				dictionaryString = dictionaryString.concat('\n').concat(space).concat("  ").concat(dictionary_pair.name).concat(': ').concat(compileValuePassed(dictionary_pair.value, space.concat("  ")).toString())
			}
			return dictionaryString
		}
	}
	
	def compileSimpleValueInLine(ESimpleValueInLine simpleValueInLine){
		if (simpleValueInLine.simple_value !== null) return simpleValueInLine.simple_value
		else if (simpleValueInLine.simple_value_string !== null) return "\'".concat(simpleValueInLine.simple_value_string).concat("\'")
	}
	
	def compileSimpleValueWithoutString(ESimpleValueWithoutString simpleValueWithoutString){
		if (simpleValueWithoutString.simple_value_boolean !== null) return compileBooleanAnsible(simpleValueWithoutString.simple_value_boolean)
		else if (simpleValueWithoutString.simple_value !== null) return simpleValueWithoutString.simple_value
	}
	
	def compileBooleanAnsible(EBooleanAnsible booleanAnsible){
		if (booleanAnsible.boolean_ansible !== null) return booleanAnsible.boolean_ansible
	}

}
