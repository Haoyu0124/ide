/*******************************************************************************
 * Copyright (c) 2019 Atos Spain S.A.
 * This program and the accompanying materials
 * are made available under the terms of the Apache Public License 2.0 (APL2)
 * which accompanies this distribution, and is available at
 * https://apache.org/licenses/LICENSE-2.0
 *
 * Contributors:
 *     Jesús Gorroñogoitia - Design and implementation
 *******************************************************************************/
grammar org.sodalite.dsl.RM with org.eclipse.xtext.common.Terminals

generate rM "http://www.sodalite.org/dsl/RM"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

RM_Model:
	('data_types'START_BLOCK
	dataTypes=EDataTypes
	END_BLOCK)? &
	('artifact_types'START_BLOCK
	artifactTypes=EArtifactTypes
	END_BLOCK)? &
	('capability_types'START_BLOCK
	capabilityTypes=ECapabilityTypes
	END_BLOCK)? &
	('interface_types'START_BLOCK
	interfaceTypes=EInterfaceTypes
	END_BLOCK)? &
	('relationship_types'START_BLOCK
	relationshipTypes=ERelationshipTypes
	END_BLOCK)? &
	('node_types'START_BLOCK
	nodeTypes=ENodeTypes
	END_BLOCK)? &
	('policy_types'START_BLOCK
	policyTypes=EPolicyTypes
	END_BLOCK)?;

EDataTypes:
	{EDataTypes} (dataTypes+=EDataType)+;

EDataType:
	name=EDataTypeName START_BLOCK
	data=EDataTypeBody
	END_BLOCK;

EDataTypeBody:
	{EDataTypeBody} (('derived_from:' superType=[EDataType|EDataTypeName])? &
	('description:' description=STRING)? &
	('constraints'START_BLOCK
	constraints=EConstraints
	END_BLOCK)? &
	('properties'START_BLOCK
	properties=EProperties
	END_BLOCK)?);

EDataTypeName:
	QUALIFIED_NAME | PRIMITIVE_DATA_TYPE;

EArtifactTypes:
	{EArtifactTypes} (artifactTypes+=EArtifactType)+;

EArtifactType:
	name=QUALIFIED_NAME START_BLOCK
	artifact=EArtifactTypeBody
	END_BLOCK;

EArtifactTypeBody:
	{EArtifactTypeBody} (('derived_from:' superType=[EArtifactType|QUALIFIED_NAME])? &
	('description:' description=STRING)? &
	('mime_type:' mime_type=STRING)? &
	('file_ext:'+ file_ext=STRING)?);

ECapabilityTypes:
	{ECapabilityTypes} (capabilityTypes+=ECapabilityType)+;

ECapabilityType:
	name=QUALIFIED_NAME START_BLOCK
	capability=ECapabilityTypeBody
	END_BLOCK;

ECapabilityTypeBody:
	{ECapabilityTypeBody} (('derived_from:' superType=[ECapabilityType|QUALIFIED_NAME])? &
	('description:' description=STRING)? &
	('properties'START_BLOCK
	properties=EProperties
	END_BLOCK)? &
	('attributes'START_BLOCK
	atributes=EAttributes
	END_BLOCK)?);

EInterfaceTypes:
	{EInterfaceTypes} (interfaceTypes+=EInterfaceType)+;

EInterfaceType:
	name=QUALIFIED_NAME START_BLOCK
	interface=EInterfaceTypeBody
	END_BLOCK;

EInterfaceTypeBody:
	{EInterfaceTypeBody} (('derived_from:' superType=[EInterfaceType|QUALIFIED_NAME])? &
	('description:' description=STRING)? &
	('inputs'START_BLOCK
	inputs=EProperties
	END_BLOCK)? &
	('operations'START_BLOCK
	operations=EOperations
	END_BLOCK)?);

EPolicyTypes:
	{EPolicyTypes} (policyTypes+=EPolicyType)+;

EPolicyType:
	name=QUALIFIED_NAME START_BLOCK
	policy=EPolicyTypeBody
	END_BLOCK;

EPolicyTypeBody:
	{EPolicyTypeBody} (('derived_from:' superType=[EPolicyType|QUALIFIED_NAME])? &
	('description:' description=STRING)?);

ENodeTypes:
	{ENodeTypes} (nodeTypes+=ENodeType)+;

ENodeType:
	name=QUALIFIED_NAME START_BLOCK
	node=ENodeTypeBody
	END_BLOCK;

ENodeTypeBody:
	{ENodeTypeBody} (('derived_from:' superType=[ENodeType|QUALIFIED_NAME])? &
	('description:' description=STRING)? &
	('properties'START_BLOCK
	properties=EProperties
	END_BLOCK)? &
	('attributes'START_BLOCK
	attributes=EAttributes
	END_BLOCK)? &
	('interfaces'START_BLOCK
	interfaces=EInterfaces
	END_BLOCK)? &
	('capabilities'START_BLOCK
	capabilities=ECapabilities
	END_BLOCK)? &
	('requirements'START_BLOCK
	requirements=ERequirements
	END_BLOCK)?);

ERelationshipTypes:
	{ERelationshipTypes} (relationshipTypes+=ERelationshipType)+;

ERelationshipType:
	name=QUALIFIED_NAME START_BLOCK
	relationship=ERelationshipTypeBody
	END_BLOCK;

ERelationshipTypeBody:
	{ERelationshipTypeBody} (('derived_from:' superType=[ERelationshipType|QUALIFIED_NAME])? &
	('description:' description=STRING)? &
	('properties'START_BLOCK
	properties=EProperties
	END_BLOCK)? &
	('attributes'START_BLOCK
	atributes=EAttributes
	END_BLOCK)? &
	('interfaces'START_BLOCK
	interfaces=EInterfaces
	END_BLOCK)? &
	('valid_target_types:[' valid_target_types=EValidTargetTypes "]")?);

EValidTargetTypes:
	targetTypes+=ECapabilityTypeRef (',' sourceType+=ECapabilityTypeRef)*;

ECapabilityTypeRef:
	name=[ECapabilityType|QUALIFIED_NAME];

EProperties:
	{EProperties} (properties+=EPropertyDefinition)*;

EPropertyDefinition:
	name=ID START_BLOCK
	property=EPropertyDefinitionBody
	END_BLOCK;

EPropertyDefinitionBody:
	('type:' type=[EDataType|EDataTypeName]) &
	('description:' description=STRING)? &
	('required:' required=BOOLEAN)? &
	('default:' default=EValueExpression)? &
	('status:' status=STRING)? &
	('constraints'START_BLOCK
	constraints=EConstraints
	END_BLOCK)? &
	('entry_schema:' entry_schema=[EDataType|EDataTypeName])?;

EAttributes:
	{EAttributes} (attributes+=EAttributeDefinition)*;

EAttributeDefinition:
	name=ID START_BLOCK
	attribute=EAttributeDefinitionBody
	END_BLOCK;

EAttributeDefinitionBody:
	('type:' type=[EDataType|EDataTypeName]) &
	('description:' description=STRING)? &
	('entry_schema:' entry_schema=[EDataType|EDataTypeName])?;

EInterfaces:
	{EInterfaces} (interfaces+=EInterfaceDefinition)*;

EInterfaceDefinition:
	name=ID START_BLOCK
	interface=EInterfaceDefinitionBody
	END_BLOCK;

EInterfaceDefinitionBody:
	'type:' type=[EInterfaceType|QUALIFIED_NAME] &
	('inputs'START_BLOCK
	inputs=EProperties
	END_BLOCK)? &
	('operations'START_BLOCK
	operations=EOperations
	END_BLOCK)?;

EOperations:
	{EOperations} (operations+=EOperationDefinition)*;

EOperationDefinition:
	name=ID START_BLOCK
	operation=EOperationDefinitionBody
	END_BLOCK;

EOperationDefinitionBody:
	{EOperationDefinitionBody} (('description:' description=STRING)? &
	('inputs'START_BLOCK
	inputs=EInputs
	END_BLOCK)? &
	('implementation:' implementation=STRING)?);

EInputs:
	{EInputs} (inputs+=EParameterDefinition)*;

	//inputs of operation definition in NodeTypes are ParameterDefinition
EParameterDefinition:
	name=ID START_BLOCK
	parameter=EParameterDefinitionBody
	END_BLOCK;

EParameterDefinitionBody:
	{EParameterDefinitionBody} (
	('type:' type=[EDataType|EDataTypeName])? &
	('value:' value=EValueExpression)? &
	('default:' default=EValueExpression)?);

EValueExpression:
	{EValueExpression} STRING | EFunction;

EFunction:
	GetProperty | GetAttribute | GetInput;

GetInput:
	'get_input:' input=[EParameterDefinition]
;

GetAttribute:
	'get_attribute'START_BLOCK
	attribute=GetAttributeBody
	END_BLOCK;

GetAttributeBody:
	('attribute:' attribute=[EAttributeDefinition|QUALIFIED_NAME]) &
	('entity:' entity=ENTITY) &
	('req_cap:' req_cap=[EReqOrCap|QUALIFIED_NAME])?;

GetProperty:
	'get_property'START_BLOCK
	property=GetPropertyBody
	END_BLOCK;

GetPropertyBody:
	('property:' property=[EPropertyDefinition|QUALIFIED_NAME]) &
	('entity:' entity=ENTITY) &
	('req_cap:' req_cap=[EReqOrCap|QUALIFIED_NAME])?;

ECapabilities:
	{ECapabilities} (capabilities+=ECapabilityDefinition)*;

ECapabilityDefinition:
	name=ID START_BLOCK
	capability=ECapabilityDefinitionBody
	END_BLOCK;

ECapabilityDefinitionBody:
	('type:' type=[ECapabilityType|QUALIFIED_NAME]) &
	('description:' description=STRING)? &
	('properties'START_BLOCK
	properties=EProperties
	END_BLOCK)? &
	('attributes'START_BLOCK
	attributes=EAttributes
	END_BLOCK)? &
	('valid_source_types:[' (valid_source_types+=EValidSourceType)? ']')? &
	('occurrences:[' start=STRING ',' end=STRING ']')?;

EValidSourceType:
	sourceTypes+=ENodeTypeRef (',' sourceType+=ENodeTypeRef)*;

ENodeTypeRef:
	name=[ENodeType|QUALIFIED_NAME];

ERequirements:
	{ERequirements} (requirements+=ERequirementDefinition)*;

ERequirementDefinition:
	name=ID START_BLOCK
	requirement=ERequirementDefinitionBody
	END_BLOCK;

ERequirementDefinitionBody:
	('capability:' capability=[ECapabilityType|QUALIFIED_NAME]) &
	('node:' node=[ENodeType|QUALIFIED_NAME])? &
	('relationship:' relationship=[ERelationshipType|QUALIFIED_NAME])? &
	('occurrences:[' start=STRING ',' end=STRING ']')?;

EReqOrCap:
	ERequirementDefinition | ECapabilityDefinition;

EConstraints:
	{EConstraints} (constraints+=EConstraint)*;

EConstraint:
	EEqual | EGreaterThan | EGreaterOrEqual | ELessThan | ELessOrEqual | EInRange | EValid_Values | ELength | EMinLength |
	EMaxLength;

EMaxLength:
	'max_length:' val=STRING;

EMinLength:
	'min_length:' val=STRING;

ELength:
	'length:' val=STRING;

EValid_Values:
	'valid_values:' val=ELIST;

ELIST:
	'['list+=STRING ("," list+=STRING)* ']'
;

EInRange:
	'in_range:[' start=STRING "," end=STRING ']';

ELessOrEqual:
	'less_or_equal:' val=STRING;

ELessThan:
	'less_than:' val=STRING;

EGreaterOrEqual:
	'greater_or_equal:' val=STRING;

EGreaterThan:
	'greater_than:' val=STRING;

EEqual:
	'equal:' val=STRING;
	
EPropertyAssignmentValue:
	ESTRING | ELIST | EMAP | EFunction
;

ESTRING:
	string = STRING
;

EMAP:
	START_BLOCK
		map+=EMapEntry+
	END_BLOCK
;

EMapEntry:
	key=ID ":" value=EPropertyAssignmentValue
;

terminal QUALIFIED_NAME: //FIXME convert to data type rule, remove terminal
	ID ('.' ID)+;

terminal BOOLEAN returns ecore::EBoolean:
	'true' | 'false';

terminal ENTITY:
	'SELF' | 'SOURCE' | 'TARGET' | 'HOST';

terminal PRIMITIVE_DATA_TYPE:
	'string' | 'integer' | 'boolean' | 'map' | 'list' | 'range' | 'timestamp' | 'scalar-unit.frequency' |
	'scalar-unit.size' | 'version-type';

@Override
terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '-' | '0'..'9')*;

terminal START_BLOCK:
	'{'
;

terminal END_BLOCK:
	'}'
;
