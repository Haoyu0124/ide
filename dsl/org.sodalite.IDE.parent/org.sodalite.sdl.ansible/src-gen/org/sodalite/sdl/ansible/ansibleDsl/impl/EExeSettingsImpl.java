/**
 * generated by Xtext 2.23.0
 */
package org.sodalite.sdl.ansible.ansibleDsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.sodalite.sdl.ansible.ansibleDsl.AnsibleDslPackage;
import org.sodalite.sdl.ansible.ansibleDsl.EExeSettings;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EExe Settings</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EExeSettingsImpl#getThrottle <em>Throttle</em>}</li>
 *   <li>{@link org.sodalite.sdl.ansible.ansibleDsl.impl.EExeSettingsImpl#getRun_once <em>Run once</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EExeSettingsImpl extends MinimalEObjectImpl.Container implements EExeSettings
{
  /**
   * The default value of the '{@link #getThrottle() <em>Throttle</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThrottle()
   * @generated
   * @ordered
   */
  protected static final int THROTTLE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getThrottle() <em>Throttle</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThrottle()
   * @generated
   * @ordered
   */
  protected int throttle = THROTTLE_EDEFAULT;

  /**
   * The default value of the '{@link #getRun_once() <em>Run once</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRun_once()
   * @generated
   * @ordered
   */
  protected static final String RUN_ONCE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRun_once() <em>Run once</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRun_once()
   * @generated
   * @ordered
   */
  protected String run_once = RUN_ONCE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EExeSettingsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnsibleDslPackage.Literals.EEXE_SETTINGS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getThrottle()
  {
    return throttle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setThrottle(int newThrottle)
  {
    int oldThrottle = throttle;
    throttle = newThrottle;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EEXE_SETTINGS__THROTTLE, oldThrottle, throttle));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getRun_once()
  {
    return run_once;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRun_once(String newRun_once)
  {
    String oldRun_once = run_once;
    run_once = newRun_once;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnsibleDslPackage.EEXE_SETTINGS__RUN_ONCE, oldRun_once, run_once));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EEXE_SETTINGS__THROTTLE:
        return getThrottle();
      case AnsibleDslPackage.EEXE_SETTINGS__RUN_ONCE:
        return getRun_once();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EEXE_SETTINGS__THROTTLE:
        setThrottle((Integer)newValue);
        return;
      case AnsibleDslPackage.EEXE_SETTINGS__RUN_ONCE:
        setRun_once((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EEXE_SETTINGS__THROTTLE:
        setThrottle(THROTTLE_EDEFAULT);
        return;
      case AnsibleDslPackage.EEXE_SETTINGS__RUN_ONCE:
        setRun_once(RUN_ONCE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnsibleDslPackage.EEXE_SETTINGS__THROTTLE:
        return throttle != THROTTLE_EDEFAULT;
      case AnsibleDslPackage.EEXE_SETTINGS__RUN_ONCE:
        return RUN_ONCE_EDEFAULT == null ? run_once != null : !RUN_ONCE_EDEFAULT.equals(run_once);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (throttle: ");
    result.append(throttle);
    result.append(", run_once: ");
    result.append(run_once);
    result.append(')');
    return result.toString();
  }

} //EExeSettingsImpl
